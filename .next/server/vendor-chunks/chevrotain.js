"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/chevrotain";
exports.ids = ["vendor-chunks/chevrotain"];
exports.modules = {

/***/ "(ssr)/./node_modules/chevrotain/lib/src/api.js":
/*!************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/api.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Alternation: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.Alternation),\n/* harmony export */   Alternative: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.Alternative),\n/* harmony export */   CstParser: () => (/* reexport safe */ _parse_parser_parser_js__WEBPACK_IMPORTED_MODULE_1__.CstParser),\n/* harmony export */   EMPTY_ALT: () => (/* reexport safe */ _parse_parser_parser_js__WEBPACK_IMPORTED_MODULE_1__.EMPTY_ALT),\n/* harmony export */   EOF: () => (/* reexport safe */ _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_3__.EOF),\n/* harmony export */   EarlyExitException: () => (/* reexport safe */ _parse_exceptions_public_js__WEBPACK_IMPORTED_MODULE_7__.EarlyExitException),\n/* harmony export */   EmbeddedActionsParser: () => (/* reexport safe */ _parse_parser_parser_js__WEBPACK_IMPORTED_MODULE_1__.EmbeddedActionsParser),\n/* harmony export */   GAstVisitor: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.GAstVisitor),\n/* harmony export */   LLkLookaheadStrategy: () => (/* reexport safe */ _parse_grammar_llk_lookahead_js__WEBPACK_IMPORTED_MODULE_5__.LLkLookaheadStrategy),\n/* harmony export */   Lexer: () => (/* reexport safe */ _scan_lexer_public_js__WEBPACK_IMPORTED_MODULE_2__.Lexer),\n/* harmony export */   LexerDefinitionErrorType: () => (/* reexport safe */ _scan_lexer_public_js__WEBPACK_IMPORTED_MODULE_2__.LexerDefinitionErrorType),\n/* harmony export */   MismatchedTokenException: () => (/* reexport safe */ _parse_exceptions_public_js__WEBPACK_IMPORTED_MODULE_7__.MismatchedTokenException),\n/* harmony export */   NoViableAltException: () => (/* reexport safe */ _parse_exceptions_public_js__WEBPACK_IMPORTED_MODULE_7__.NoViableAltException),\n/* harmony export */   NonTerminal: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.NonTerminal),\n/* harmony export */   NotAllInputParsedException: () => (/* reexport safe */ _parse_exceptions_public_js__WEBPACK_IMPORTED_MODULE_7__.NotAllInputParsedException),\n/* harmony export */   Option: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.Option),\n/* harmony export */   Parser: () => (/* binding */ Parser),\n/* harmony export */   ParserDefinitionErrorType: () => (/* reexport safe */ _parse_parser_parser_js__WEBPACK_IMPORTED_MODULE_1__.ParserDefinitionErrorType),\n/* harmony export */   Repetition: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.Repetition),\n/* harmony export */   RepetitionMandatory: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.RepetitionMandatory),\n/* harmony export */   RepetitionMandatoryWithSeparator: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.RepetitionMandatoryWithSeparator),\n/* harmony export */   RepetitionWithSeparator: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.RepetitionWithSeparator),\n/* harmony export */   Rule: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.Rule),\n/* harmony export */   Terminal: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.Terminal),\n/* harmony export */   VERSION: () => (/* reexport safe */ _version_js__WEBPACK_IMPORTED_MODULE_0__.VERSION),\n/* harmony export */   clearCache: () => (/* binding */ clearCache),\n/* harmony export */   createSyntaxDiagramsCode: () => (/* reexport safe */ _diagrams_render_public_js__WEBPACK_IMPORTED_MODULE_11__.createSyntaxDiagramsCode),\n/* harmony export */   createToken: () => (/* reexport safe */ _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_3__.createToken),\n/* harmony export */   createTokenInstance: () => (/* reexport safe */ _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_3__.createTokenInstance),\n/* harmony export */   defaultLexerErrorProvider: () => (/* reexport safe */ _scan_lexer_errors_public_js__WEBPACK_IMPORTED_MODULE_8__.defaultLexerErrorProvider),\n/* harmony export */   defaultParserErrorProvider: () => (/* reexport safe */ _parse_errors_public_js__WEBPACK_IMPORTED_MODULE_6__.defaultParserErrorProvider),\n/* harmony export */   generateCstDts: () => (/* reexport safe */ _chevrotain_cst_dts_gen__WEBPACK_IMPORTED_MODULE_10__.generateCstDts),\n/* harmony export */   getLookaheadPaths: () => (/* reexport safe */ _parse_grammar_lookahead_js__WEBPACK_IMPORTED_MODULE_4__.getLookaheadPaths),\n/* harmony export */   isRecognitionException: () => (/* reexport safe */ _parse_exceptions_public_js__WEBPACK_IMPORTED_MODULE_7__.isRecognitionException),\n/* harmony export */   serializeGrammar: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.serializeGrammar),\n/* harmony export */   serializeProduction: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.serializeProduction),\n/* harmony export */   tokenLabel: () => (/* reexport safe */ _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_3__.tokenLabel),\n/* harmony export */   tokenMatcher: () => (/* reexport safe */ _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_3__.tokenMatcher),\n/* harmony export */   tokenName: () => (/* reexport safe */ _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_3__.tokenName)\n/* harmony export */ });\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/chevrotain/lib/src/version.js\");\n/* harmony import */ var _parse_parser_parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse/parser/parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n/* harmony import */ var _scan_lexer_public_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scan/lexer_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/lexer_public.js\");\n/* harmony import */ var _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scan/tokens_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens_public.js\");\n/* harmony import */ var _parse_grammar_lookahead_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parse/grammar/lookahead.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/lookahead.js\");\n/* harmony import */ var _parse_grammar_llk_lookahead_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parse/grammar/llk_lookahead.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/llk_lookahead.js\");\n/* harmony import */ var _parse_errors_public_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parse/errors_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/errors_public.js\");\n/* harmony import */ var _parse_exceptions_public_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./parse/exceptions_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/exceptions_public.js\");\n/* harmony import */ var _scan_lexer_errors_public_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./scan/lexer_errors_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/lexer_errors_public.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n/* harmony import */ var _chevrotain_cst_dts_gen__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @chevrotain/cst-dts-gen */ \"(ssr)/./node_modules/@chevrotain/cst-dts-gen/lib/src/api.js\");\n/* harmony import */ var _diagrams_render_public_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./diagrams/render_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/diagrams/render_public.js\");\n/* istanbul ignore file - tricky to import some things from this module during testing */\n// semantic version\n\n\n\n// Tokens utilities\n\n// Lookahead\n\n\n// Other Utilities\n\n\n\n// grammar reflection API\n\n// GAST Utilities\n\n\n/* istanbul ignore next */\nfunction clearCache() {\n    console.warn(\"The clearCache function was 'soft' removed from the Chevrotain API.\" +\n        \"\\n\\t It performs no action other than printing this message.\" +\n        \"\\n\\t Please avoid using it as it will be completely removed in the future\");\n}\n\nclass Parser {\n    constructor() {\n        throw new Error(\"The Parser class has been deprecated, use CstParser or EmbeddedActionsParser instead.\\t\\n\" +\n            \"See: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_7-0-0\");\n    }\n}\n//# sourceMappingURL=api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL2FwaS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ3VDO0FBQzRFO0FBQzFDO0FBQ3pFO0FBQ3NIO0FBQ3RIO0FBQ2lFO0FBQ087QUFDeEU7QUFDc0U7QUFDaUc7QUFDN0Y7QUFDMUU7QUFDOEw7QUFDOUw7QUFDdUY7QUFDOUI7QUFDekQ7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ3VFO0FBQ2hFO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYWxleGFuZGVyLm5vYmxlL2FwZXgtdG9vbGJveC9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL2FwaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZSAtIHRyaWNreSB0byBpbXBvcnQgc29tZSB0aGluZ3MgZnJvbSB0aGlzIG1vZHVsZSBkdXJpbmcgdGVzdGluZyAqL1xuLy8gc2VtYW50aWMgdmVyc2lvblxuZXhwb3J0IHsgVkVSU0lPTiB9IGZyb20gXCIuL3ZlcnNpb24uanNcIjtcbmV4cG9ydCB7IENzdFBhcnNlciwgRW1iZWRkZWRBY3Rpb25zUGFyc2VyLCBQYXJzZXJEZWZpbml0aW9uRXJyb3JUeXBlLCBFTVBUWV9BTFQsIH0gZnJvbSBcIi4vcGFyc2UvcGFyc2VyL3BhcnNlci5qc1wiO1xuZXhwb3J0IHsgTGV4ZXIsIExleGVyRGVmaW5pdGlvbkVycm9yVHlwZSB9IGZyb20gXCIuL3NjYW4vbGV4ZXJfcHVibGljLmpzXCI7XG4vLyBUb2tlbnMgdXRpbGl0aWVzXG5leHBvcnQgeyBjcmVhdGVUb2tlbiwgY3JlYXRlVG9rZW5JbnN0YW5jZSwgRU9GLCB0b2tlbkxhYmVsLCB0b2tlbk1hdGNoZXIsIHRva2VuTmFtZSwgfSBmcm9tIFwiLi9zY2FuL3Rva2Vuc19wdWJsaWMuanNcIjtcbi8vIExvb2thaGVhZFxuZXhwb3J0IHsgZ2V0TG9va2FoZWFkUGF0aHMgfSBmcm9tIFwiLi9wYXJzZS9ncmFtbWFyL2xvb2thaGVhZC5qc1wiO1xuZXhwb3J0IHsgTExrTG9va2FoZWFkU3RyYXRlZ3kgfSBmcm9tIFwiLi9wYXJzZS9ncmFtbWFyL2xsa19sb29rYWhlYWQuanNcIjtcbi8vIE90aGVyIFV0aWxpdGllc1xuZXhwb3J0IHsgZGVmYXVsdFBhcnNlckVycm9yUHJvdmlkZXIgfSBmcm9tIFwiLi9wYXJzZS9lcnJvcnNfcHVibGljLmpzXCI7XG5leHBvcnQgeyBFYXJseUV4aXRFeGNlcHRpb24sIGlzUmVjb2duaXRpb25FeGNlcHRpb24sIE1pc21hdGNoZWRUb2tlbkV4Y2VwdGlvbiwgTm90QWxsSW5wdXRQYXJzZWRFeGNlcHRpb24sIE5vVmlhYmxlQWx0RXhjZXB0aW9uLCB9IGZyb20gXCIuL3BhcnNlL2V4Y2VwdGlvbnNfcHVibGljLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0TGV4ZXJFcnJvclByb3ZpZGVyIH0gZnJvbSBcIi4vc2Nhbi9sZXhlcl9lcnJvcnNfcHVibGljLmpzXCI7XG4vLyBncmFtbWFyIHJlZmxlY3Rpb24gQVBJXG5leHBvcnQgeyBBbHRlcm5hdGlvbiwgQWx0ZXJuYXRpdmUsIE5vblRlcm1pbmFsLCBPcHRpb24sIFJlcGV0aXRpb24sIFJlcGV0aXRpb25NYW5kYXRvcnksIFJlcGV0aXRpb25NYW5kYXRvcnlXaXRoU2VwYXJhdG9yLCBSZXBldGl0aW9uV2l0aFNlcGFyYXRvciwgUnVsZSwgVGVybWluYWwsIH0gZnJvbSBcIkBjaGV2cm90YWluL2dhc3RcIjtcbi8vIEdBU1QgVXRpbGl0aWVzXG5leHBvcnQgeyBzZXJpYWxpemVHcmFtbWFyLCBzZXJpYWxpemVQcm9kdWN0aW9uLCBHQXN0VmlzaXRvciwgfSBmcm9tIFwiQGNoZXZyb3RhaW4vZ2FzdFwiO1xuZXhwb3J0IHsgZ2VuZXJhdGVDc3REdHMgfSBmcm9tIFwiQGNoZXZyb3RhaW4vY3N0LWR0cy1nZW5cIjtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJDYWNoZSgpIHtcbiAgICBjb25zb2xlLndhcm4oXCJUaGUgY2xlYXJDYWNoZSBmdW5jdGlvbiB3YXMgJ3NvZnQnIHJlbW92ZWQgZnJvbSB0aGUgQ2hldnJvdGFpbiBBUEkuXCIgK1xuICAgICAgICBcIlxcblxcdCBJdCBwZXJmb3JtcyBubyBhY3Rpb24gb3RoZXIgdGhhbiBwcmludGluZyB0aGlzIG1lc3NhZ2UuXCIgK1xuICAgICAgICBcIlxcblxcdCBQbGVhc2UgYXZvaWQgdXNpbmcgaXQgYXMgaXQgd2lsbCBiZSBjb21wbGV0ZWx5IHJlbW92ZWQgaW4gdGhlIGZ1dHVyZVwiKTtcbn1cbmV4cG9ydCB7IGNyZWF0ZVN5bnRheERpYWdyYW1zQ29kZSB9IGZyb20gXCIuL2RpYWdyYW1zL3JlbmRlcl9wdWJsaWMuanNcIjtcbmV4cG9ydCBjbGFzcyBQYXJzZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgUGFyc2VyIGNsYXNzIGhhcyBiZWVuIGRlcHJlY2F0ZWQsIHVzZSBDc3RQYXJzZXIgb3IgRW1iZWRkZWRBY3Rpb25zUGFyc2VyIGluc3RlYWQuXFx0XFxuXCIgK1xuICAgICAgICAgICAgXCJTZWU6IGh0dHBzOi8vY2hldnJvdGFpbi5pby9kb2NzL2NoYW5nZXMvQlJFQUtJTkdfQ0hBTkdFUy5odG1sI183LTAtMFwiKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/diagrams/render_public.js":
/*!*******************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/diagrams/render_public.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSyntaxDiagramsCode: () => (/* binding */ createSyntaxDiagramsCode)\n/* harmony export */ });\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../version.js */ \"(ssr)/./node_modules/chevrotain/lib/src/version.js\");\n\nfunction createSyntaxDiagramsCode(grammar, { resourceBase = `https://unpkg.com/chevrotain@${_version_js__WEBPACK_IMPORTED_MODULE_0__.VERSION}/diagrams/`, css = `https://unpkg.com/chevrotain@${_version_js__WEBPACK_IMPORTED_MODULE_0__.VERSION}/diagrams/diagrams.css`, } = {}) {\n    const header = `\n<!-- This is a generated file -->\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n  body {\n    background-color: hsl(30, 20%, 95%)\n  }\n</style>\n\n`;\n    const cssHtml = `\n<link rel='stylesheet' href='${css}'>\n`;\n    const scripts = `\n<script src='${resourceBase}vendor/railroad-diagrams.js'></script>\n<script src='${resourceBase}src/diagrams_builder.js'></script>\n<script src='${resourceBase}src/diagrams_behavior.js'></script>\n<script src='${resourceBase}src/main.js'></script>\n`;\n    const diagramsDiv = `\n<div id=\"diagrams\" align=\"center\"></div>    \n`;\n    const serializedGrammar = `\n<script>\n    window.serializedGrammar = ${JSON.stringify(grammar, null, \"  \")};\n</script>\n`;\n    const initLogic = `\n<script>\n    var diagramsDiv = document.getElementById(\"diagrams\");\n    main.drawDiagramsFromSerializedGrammar(serializedGrammar, diagramsDiv);\n</script>\n`;\n    return (header + cssHtml + scripts + diagramsDiv + serializedGrammar + initLogic);\n}\n//# sourceMappingURL=render_public.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL2RpYWdyYW1zL3JlbmRlcl9wdWJsaWMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0M7QUFDakMsNkNBQTZDLCtDQUErQyxnREFBTyxDQUFDLG1EQUFtRCxnREFBTyxDQUFDLDJCQUEyQixJQUFJO0FBQ3JNO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCLElBQUk7QUFDbkM7QUFDQTtBQUNBLGVBQWUsYUFBYTtBQUM1QixlQUFlLGFBQWE7QUFDNUIsZUFBZSxhQUFhO0FBQzVCLGVBQWUsYUFBYTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2FsZXhhbmRlci5ub2JsZS9hcGV4LXRvb2xib3gvbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliL3NyYy9kaWFncmFtcy9yZW5kZXJfcHVibGljLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZFUlNJT04gfSBmcm9tIFwiLi4vdmVyc2lvbi5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN5bnRheERpYWdyYW1zQ29kZShncmFtbWFyLCB7IHJlc291cmNlQmFzZSA9IGBodHRwczovL3VucGtnLmNvbS9jaGV2cm90YWluQCR7VkVSU0lPTn0vZGlhZ3JhbXMvYCwgY3NzID0gYGh0dHBzOi8vdW5wa2cuY29tL2NoZXZyb3RhaW5AJHtWRVJTSU9OfS9kaWFncmFtcy9kaWFncmFtcy5jc3NgLCB9ID0ge30pIHtcbiAgICBjb25zdCBoZWFkZXIgPSBgXG48IS0tIFRoaXMgaXMgYSBnZW5lcmF0ZWQgZmlsZSAtLT5cbjwhRE9DVFlQRSBodG1sPlxuPG1ldGEgY2hhcnNldD1cInV0Zi04XCI+XG48c3R5bGU+XG4gIGJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IGhzbCgzMCwgMjAlLCA5NSUpXG4gIH1cbjwvc3R5bGU+XG5cbmA7XG4gICAgY29uc3QgY3NzSHRtbCA9IGBcbjxsaW5rIHJlbD0nc3R5bGVzaGVldCcgaHJlZj0nJHtjc3N9Jz5cbmA7XG4gICAgY29uc3Qgc2NyaXB0cyA9IGBcbjxzY3JpcHQgc3JjPScke3Jlc291cmNlQmFzZX12ZW5kb3IvcmFpbHJvYWQtZGlhZ3JhbXMuanMnPjwvc2NyaXB0PlxuPHNjcmlwdCBzcmM9JyR7cmVzb3VyY2VCYXNlfXNyYy9kaWFncmFtc19idWlsZGVyLmpzJz48L3NjcmlwdD5cbjxzY3JpcHQgc3JjPScke3Jlc291cmNlQmFzZX1zcmMvZGlhZ3JhbXNfYmVoYXZpb3IuanMnPjwvc2NyaXB0PlxuPHNjcmlwdCBzcmM9JyR7cmVzb3VyY2VCYXNlfXNyYy9tYWluLmpzJz48L3NjcmlwdD5cbmA7XG4gICAgY29uc3QgZGlhZ3JhbXNEaXYgPSBgXG48ZGl2IGlkPVwiZGlhZ3JhbXNcIiBhbGlnbj1cImNlbnRlclwiPjwvZGl2PiAgICBcbmA7XG4gICAgY29uc3Qgc2VyaWFsaXplZEdyYW1tYXIgPSBgXG48c2NyaXB0PlxuICAgIHdpbmRvdy5zZXJpYWxpemVkR3JhbW1hciA9ICR7SlNPTi5zdHJpbmdpZnkoZ3JhbW1hciwgbnVsbCwgXCIgIFwiKX07XG48L3NjcmlwdD5cbmA7XG4gICAgY29uc3QgaW5pdExvZ2ljID0gYFxuPHNjcmlwdD5cbiAgICB2YXIgZGlhZ3JhbXNEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRpYWdyYW1zXCIpO1xuICAgIG1haW4uZHJhd0RpYWdyYW1zRnJvbVNlcmlhbGl6ZWRHcmFtbWFyKHNlcmlhbGl6ZWRHcmFtbWFyLCBkaWFncmFtc0Rpdik7XG48L3NjcmlwdD5cbmA7XG4gICAgcmV0dXJuIChoZWFkZXIgKyBjc3NIdG1sICsgc2NyaXB0cyArIGRpYWdyYW1zRGl2ICsgc2VyaWFsaXplZEdyYW1tYXIgKyBpbml0TG9naWMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVuZGVyX3B1YmxpYy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/diagrams/render_public.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/lang/lang_extensions.js":
/*!*****************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/lang/lang_extensions.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defineNameProp: () => (/* binding */ defineNameProp)\n/* harmony export */ });\nconst NAME = \"name\";\nfunction defineNameProp(obj, nameValue) {\n    Object.defineProperty(obj, NAME, {\n        enumerable: false,\n        configurable: true,\n        writable: false,\n        value: nameValue,\n    });\n}\n//# sourceMappingURL=lang_extensions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL2xhbmcvbGFuZ19leHRlbnNpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYWxleGFuZGVyLm5vYmxlL2FwZXgtdG9vbGJveC9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL2xhbmcvbGFuZ19leHRlbnNpb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE5BTUUgPSBcIm5hbWVcIjtcbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVOYW1lUHJvcChvYmosIG5hbWVWYWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIE5BTUUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogbmFtZVZhbHVlLFxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGFuZ19leHRlbnNpb25zLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/lang/lang_extensions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/constants.js":
/*!************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/constants.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IN: () => (/* binding */ IN)\n/* harmony export */ });\n// TODO: can this be removed? where is it used?\nconst IN = \"_~IN~_\";\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDTztBQUNQIiwic291cmNlcyI6WyIvVXNlcnMvYWxleGFuZGVyLm5vYmxlL2FwZXgtdG9vbGJveC9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2NvbnN0YW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUT0RPOiBjYW4gdGhpcyBiZSByZW1vdmVkPyB3aGVyZSBpcyBpdCB1c2VkP1xuZXhwb3J0IGNvbnN0IElOID0gXCJffklOfl9cIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/cst/cst.js":
/*!**********************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/cst/cst.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addNoneTerminalToCst: () => (/* binding */ addNoneTerminalToCst),\n/* harmony export */   addTerminalToCst: () => (/* binding */ addTerminalToCst),\n/* harmony export */   setNodeLocationFull: () => (/* binding */ setNodeLocationFull),\n/* harmony export */   setNodeLocationOnlyOffset: () => (/* binding */ setNodeLocationOnlyOffset)\n/* harmony export */ });\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nfunction setNodeLocationOnlyOffset(currNodeLocation, newLocationInfo) {\n    // First (valid) update for this cst node\n    if (isNaN(currNodeLocation.startOffset) === true) {\n        // assumption1: Token location information is either NaN or a valid number\n        // assumption2: Token location information is fully valid if it exist\n        // (both start/end offsets exist and are numbers).\n        currNodeLocation.startOffset = newLocationInfo.startOffset;\n        currNodeLocation.endOffset = newLocationInfo.endOffset;\n    }\n    // Once the startOffset has been updated with a valid number it should never receive\n    // any farther updates as the Token vector is sorted.\n    // We still have to check this this condition for every new possible location info\n    // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n    else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n        currNodeLocation.endOffset = newLocationInfo.endOffset;\n    }\n}\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nfunction setNodeLocationFull(currNodeLocation, newLocationInfo) {\n    // First (valid) update for this cst node\n    if (isNaN(currNodeLocation.startOffset) === true) {\n        // assumption1: Token location information is either NaN or a valid number\n        // assumption2: Token location information is fully valid if it exist\n        // (all start/end props exist and are numbers).\n        currNodeLocation.startOffset = newLocationInfo.startOffset;\n        currNodeLocation.startColumn = newLocationInfo.startColumn;\n        currNodeLocation.startLine = newLocationInfo.startLine;\n        currNodeLocation.endOffset = newLocationInfo.endOffset;\n        currNodeLocation.endColumn = newLocationInfo.endColumn;\n        currNodeLocation.endLine = newLocationInfo.endLine;\n    }\n    // Once the start props has been updated with a valid number it should never receive\n    // any farther updates as the Token vector is sorted.\n    // We still have to check this this condition for every new possible location info\n    // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n    else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n        currNodeLocation.endOffset = newLocationInfo.endOffset;\n        currNodeLocation.endColumn = newLocationInfo.endColumn;\n        currNodeLocation.endLine = newLocationInfo.endLine;\n    }\n}\nfunction addTerminalToCst(node, token, tokenTypeName) {\n    if (node.children[tokenTypeName] === undefined) {\n        node.children[tokenTypeName] = [token];\n    }\n    else {\n        node.children[tokenTypeName].push(token);\n    }\n}\nfunction addNoneTerminalToCst(node, ruleName, ruleResult) {\n    if (node.children[ruleName] === undefined) {\n        node.children[ruleName] = [ruleResult];\n    }\n    else {\n        node.children[ruleName].push(ruleResult);\n    }\n}\n//# sourceMappingURL=cst.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2NzdC9jc3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbGV4YW5kZXIubm9ibGUvYXBleC10b29sYm94L25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYi9zcmMvcGFyc2UvY3N0L2NzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgbm9kZUxvY2F0aW9uIHRyYWNraW5nIGlzIG5vdCBlZmZpY2llbnQgYW5kIHNob3VsZCBvbmx5IGJlIHVzZWRcbiAqIHdoZW4gZXJyb3IgcmVjb3ZlcnkgaXMgZW5hYmxlZCBvciB0aGUgVG9rZW4gVmVjdG9yIGNvbnRhaW5zIHZpcnR1YWwgVG9rZW5zXG4gKiAoZS5nLCBQeXRob24gSW5kZW50L091dGRlbnQpXG4gKiBBcyBpdCBleGVjdXRlcyB0aGUgY2FsY3VsYXRpb24gZm9yIGV2ZXJ5IHNpbmdsZSB0ZXJtaW5hbC9ub25UZXJtaW5hbFxuICogYW5kIGRvZXMgbm90IHJlbHkgb24gdGhlIGZhY3QgdGhlIHRva2VuIHZlY3RvciBpcyAqKnNvcnRlZCoqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXROb2RlTG9jYXRpb25Pbmx5T2Zmc2V0KGN1cnJOb2RlTG9jYXRpb24sIG5ld0xvY2F0aW9uSW5mbykge1xuICAgIC8vIEZpcnN0ICh2YWxpZCkgdXBkYXRlIGZvciB0aGlzIGNzdCBub2RlXG4gICAgaWYgKGlzTmFOKGN1cnJOb2RlTG9jYXRpb24uc3RhcnRPZmZzZXQpID09PSB0cnVlKSB7XG4gICAgICAgIC8vIGFzc3VtcHRpb24xOiBUb2tlbiBsb2NhdGlvbiBpbmZvcm1hdGlvbiBpcyBlaXRoZXIgTmFOIG9yIGEgdmFsaWQgbnVtYmVyXG4gICAgICAgIC8vIGFzc3VtcHRpb24yOiBUb2tlbiBsb2NhdGlvbiBpbmZvcm1hdGlvbiBpcyBmdWxseSB2YWxpZCBpZiBpdCBleGlzdFxuICAgICAgICAvLyAoYm90aCBzdGFydC9lbmQgb2Zmc2V0cyBleGlzdCBhbmQgYXJlIG51bWJlcnMpLlxuICAgICAgICBjdXJyTm9kZUxvY2F0aW9uLnN0YXJ0T2Zmc2V0ID0gbmV3TG9jYXRpb25JbmZvLnN0YXJ0T2Zmc2V0O1xuICAgICAgICBjdXJyTm9kZUxvY2F0aW9uLmVuZE9mZnNldCA9IG5ld0xvY2F0aW9uSW5mby5lbmRPZmZzZXQ7XG4gICAgfVxuICAgIC8vIE9uY2UgdGhlIHN0YXJ0T2Zmc2V0IGhhcyBiZWVuIHVwZGF0ZWQgd2l0aCBhIHZhbGlkIG51bWJlciBpdCBzaG91bGQgbmV2ZXIgcmVjZWl2ZVxuICAgIC8vIGFueSBmYXJ0aGVyIHVwZGF0ZXMgYXMgdGhlIFRva2VuIHZlY3RvciBpcyBzb3J0ZWQuXG4gICAgLy8gV2Ugc3RpbGwgaGF2ZSB0byBjaGVjayB0aGlzIHRoaXMgY29uZGl0aW9uIGZvciBldmVyeSBuZXcgcG9zc2libGUgbG9jYXRpb24gaW5mb1xuICAgIC8vIGJlY2F1c2Ugd2l0aCBlcnJvciByZWNvdmVyeSBlbmFibGVkIHdlIG1heSBlbmNvdW50ZXIgaW52YWxpZCB0b2tlbnMgKE5hTiBsb2NhdGlvbiBwcm9wcylcbiAgICBlbHNlIGlmIChjdXJyTm9kZUxvY2F0aW9uLmVuZE9mZnNldCA8IG5ld0xvY2F0aW9uSW5mby5lbmRPZmZzZXQgPT09IHRydWUpIHtcbiAgICAgICAgY3Vyck5vZGVMb2NhdGlvbi5lbmRPZmZzZXQgPSBuZXdMb2NhdGlvbkluZm8uZW5kT2Zmc2V0O1xuICAgIH1cbn1cbi8qKlxuICogVGhpcyBub2RlTG9jYXRpb24gdHJhY2tpbmcgaXMgbm90IGVmZmljaWVudCBhbmQgc2hvdWxkIG9ubHkgYmUgdXNlZFxuICogd2hlbiBlcnJvciByZWNvdmVyeSBpcyBlbmFibGVkIG9yIHRoZSBUb2tlbiBWZWN0b3IgY29udGFpbnMgdmlydHVhbCBUb2tlbnNcbiAqIChlLmcsIFB5dGhvbiBJbmRlbnQvT3V0ZGVudClcbiAqIEFzIGl0IGV4ZWN1dGVzIHRoZSBjYWxjdWxhdGlvbiBmb3IgZXZlcnkgc2luZ2xlIHRlcm1pbmFsL25vblRlcm1pbmFsXG4gKiBhbmQgZG9lcyBub3QgcmVseSBvbiB0aGUgZmFjdCB0aGUgdG9rZW4gdmVjdG9yIGlzICoqc29ydGVkKipcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldE5vZGVMb2NhdGlvbkZ1bGwoY3Vyck5vZGVMb2NhdGlvbiwgbmV3TG9jYXRpb25JbmZvKSB7XG4gICAgLy8gRmlyc3QgKHZhbGlkKSB1cGRhdGUgZm9yIHRoaXMgY3N0IG5vZGVcbiAgICBpZiAoaXNOYU4oY3Vyck5vZGVMb2NhdGlvbi5zdGFydE9mZnNldCkgPT09IHRydWUpIHtcbiAgICAgICAgLy8gYXNzdW1wdGlvbjE6IFRva2VuIGxvY2F0aW9uIGluZm9ybWF0aW9uIGlzIGVpdGhlciBOYU4gb3IgYSB2YWxpZCBudW1iZXJcbiAgICAgICAgLy8gYXNzdW1wdGlvbjI6IFRva2VuIGxvY2F0aW9uIGluZm9ybWF0aW9uIGlzIGZ1bGx5IHZhbGlkIGlmIGl0IGV4aXN0XG4gICAgICAgIC8vIChhbGwgc3RhcnQvZW5kIHByb3BzIGV4aXN0IGFuZCBhcmUgbnVtYmVycykuXG4gICAgICAgIGN1cnJOb2RlTG9jYXRpb24uc3RhcnRPZmZzZXQgPSBuZXdMb2NhdGlvbkluZm8uc3RhcnRPZmZzZXQ7XG4gICAgICAgIGN1cnJOb2RlTG9jYXRpb24uc3RhcnRDb2x1bW4gPSBuZXdMb2NhdGlvbkluZm8uc3RhcnRDb2x1bW47XG4gICAgICAgIGN1cnJOb2RlTG9jYXRpb24uc3RhcnRMaW5lID0gbmV3TG9jYXRpb25JbmZvLnN0YXJ0TGluZTtcbiAgICAgICAgY3Vyck5vZGVMb2NhdGlvbi5lbmRPZmZzZXQgPSBuZXdMb2NhdGlvbkluZm8uZW5kT2Zmc2V0O1xuICAgICAgICBjdXJyTm9kZUxvY2F0aW9uLmVuZENvbHVtbiA9IG5ld0xvY2F0aW9uSW5mby5lbmRDb2x1bW47XG4gICAgICAgIGN1cnJOb2RlTG9jYXRpb24uZW5kTGluZSA9IG5ld0xvY2F0aW9uSW5mby5lbmRMaW5lO1xuICAgIH1cbiAgICAvLyBPbmNlIHRoZSBzdGFydCBwcm9wcyBoYXMgYmVlbiB1cGRhdGVkIHdpdGggYSB2YWxpZCBudW1iZXIgaXQgc2hvdWxkIG5ldmVyIHJlY2VpdmVcbiAgICAvLyBhbnkgZmFydGhlciB1cGRhdGVzIGFzIHRoZSBUb2tlbiB2ZWN0b3IgaXMgc29ydGVkLlxuICAgIC8vIFdlIHN0aWxsIGhhdmUgdG8gY2hlY2sgdGhpcyB0aGlzIGNvbmRpdGlvbiBmb3IgZXZlcnkgbmV3IHBvc3NpYmxlIGxvY2F0aW9uIGluZm9cbiAgICAvLyBiZWNhdXNlIHdpdGggZXJyb3IgcmVjb3ZlcnkgZW5hYmxlZCB3ZSBtYXkgZW5jb3VudGVyIGludmFsaWQgdG9rZW5zIChOYU4gbG9jYXRpb24gcHJvcHMpXG4gICAgZWxzZSBpZiAoY3Vyck5vZGVMb2NhdGlvbi5lbmRPZmZzZXQgPCBuZXdMb2NhdGlvbkluZm8uZW5kT2Zmc2V0ID09PSB0cnVlKSB7XG4gICAgICAgIGN1cnJOb2RlTG9jYXRpb24uZW5kT2Zmc2V0ID0gbmV3TG9jYXRpb25JbmZvLmVuZE9mZnNldDtcbiAgICAgICAgY3Vyck5vZGVMb2NhdGlvbi5lbmRDb2x1bW4gPSBuZXdMb2NhdGlvbkluZm8uZW5kQ29sdW1uO1xuICAgICAgICBjdXJyTm9kZUxvY2F0aW9uLmVuZExpbmUgPSBuZXdMb2NhdGlvbkluZm8uZW5kTGluZTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gYWRkVGVybWluYWxUb0NzdChub2RlLCB0b2tlbiwgdG9rZW5UeXBlTmFtZSkge1xuICAgIGlmIChub2RlLmNoaWxkcmVuW3Rva2VuVHlwZU5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbm9kZS5jaGlsZHJlblt0b2tlblR5cGVOYW1lXSA9IFt0b2tlbl07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBub2RlLmNoaWxkcmVuW3Rva2VuVHlwZU5hbWVdLnB1c2godG9rZW4pO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBhZGROb25lVGVybWluYWxUb0NzdChub2RlLCBydWxlTmFtZSwgcnVsZVJlc3VsdCkge1xuICAgIGlmIChub2RlLmNoaWxkcmVuW3J1bGVOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5vZGUuY2hpbGRyZW5bcnVsZU5hbWVdID0gW3J1bGVSZXN1bHRdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbm9kZS5jaGlsZHJlbltydWxlTmFtZV0ucHVzaChydWxlUmVzdWx0KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jc3QuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/cst/cst.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/cst/cst_visitor.js":
/*!******************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/cst/cst_visitor.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CstVisitorDefinitionError: () => (/* binding */ CstVisitorDefinitionError),\n/* harmony export */   createBaseSemanticVisitorConstructor: () => (/* binding */ createBaseSemanticVisitorConstructor),\n/* harmony export */   createBaseVisitorConstructorWithDefaults: () => (/* binding */ createBaseVisitorConstructorWithDefaults),\n/* harmony export */   defaultVisit: () => (/* binding */ defaultVisit),\n/* harmony export */   validateMissingCstMethods: () => (/* binding */ validateMissingCstMethods),\n/* harmony export */   validateVisitor: () => (/* binding */ validateVisitor)\n/* harmony export */ });\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/keys.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isArray.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isUndefined.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/map.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/filter.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isFunction.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/compact.js\");\n/* harmony import */ var _lang_lang_extensions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lang/lang_extensions.js */ \"(ssr)/./node_modules/chevrotain/lib/src/lang/lang_extensions.js\");\n\n\nfunction defaultVisit(ctx, param) {\n    const childrenNames = (0,lodash_es__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(ctx);\n    const childrenNamesLength = childrenNames.length;\n    for (let i = 0; i < childrenNamesLength; i++) {\n        const currChildName = childrenNames[i];\n        const currChildArray = ctx[currChildName];\n        const currChildArrayLength = currChildArray.length;\n        for (let j = 0; j < currChildArrayLength; j++) {\n            const currChild = currChildArray[j];\n            // distinction between Tokens Children and CstNode children\n            if (currChild.tokenTypeIdx === undefined) {\n                this[currChild.name](currChild.children, param);\n            }\n        }\n    }\n    // defaultVisit does not support generic out param\n}\nfunction createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n    const derivedConstructor = function () { };\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    (0,_lang_lang_extensions_js__WEBPACK_IMPORTED_MODULE_0__.defineNameProp)(derivedConstructor, grammarName + \"BaseSemantics\");\n    const semanticProto = {\n        visit: function (cstNode, param) {\n            // enables writing more concise visitor methods when CstNode has only a single child\n            if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(cstNode)) {\n                // A CST Node's children dictionary can never have empty arrays as values\n                // If a key is defined there will be at least one element in the corresponding value array.\n                cstNode = cstNode[0];\n            }\n            // enables passing optional CstNodes concisely.\n            if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(cstNode)) {\n                return undefined;\n            }\n            return this[cstNode.name](cstNode.children, param);\n        },\n        validateVisitor: function () {\n            const semanticDefinitionErrors = validateVisitor(this, ruleNames);\n            if (!(0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(semanticDefinitionErrors)) {\n                const errorMessages = (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(semanticDefinitionErrors, (currDefError) => currDefError.msg);\n                throw Error(`Errors Detected in CST Visitor <${this.constructor.name}>:\\n\\t` +\n                    `${errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")}`);\n            }\n        },\n    };\n    derivedConstructor.prototype = semanticProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    derivedConstructor._RULE_NAMES = ruleNames;\n    return derivedConstructor;\n}\nfunction createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n    const derivedConstructor = function () { };\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    (0,_lang_lang_extensions_js__WEBPACK_IMPORTED_MODULE_0__.defineNameProp)(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n    const withDefaultsProto = Object.create(baseConstructor.prototype);\n    (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(ruleNames, (ruleName) => {\n        withDefaultsProto[ruleName] = defaultVisit;\n    });\n    derivedConstructor.prototype = withDefaultsProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    return derivedConstructor;\n}\nvar CstVisitorDefinitionError;\n(function (CstVisitorDefinitionError) {\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n})(CstVisitorDefinitionError || (CstVisitorDefinitionError = {}));\nfunction validateVisitor(visitorInstance, ruleNames) {\n    const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n    return missingErrors;\n}\nfunction validateMissingCstMethods(visitorInstance, ruleNames) {\n    const missingRuleNames = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(ruleNames, (currRuleName) => {\n        return (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(visitorInstance[currRuleName]) === false;\n    });\n    const errors = (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(missingRuleNames, (currRuleName) => {\n        return {\n            msg: `Missing visitor method: <${currRuleName}> on ${(visitorInstance.constructor.name)} CST Visitor.`,\n            type: CstVisitorDefinitionError.MISSING_METHOD,\n            methodName: currRuleName,\n        };\n    });\n    return (0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(errors);\n}\n//# sourceMappingURL=cst_visitor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2NzdC9jc3RfdmlzaXRvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTRHO0FBQzdDO0FBQ3hEO0FBQ1AsMEJBQTBCLHFEQUFJO0FBQzlCO0FBQ0Esb0JBQW9CLHlCQUF5QjtBQUM3QztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsMEJBQTBCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHdFQUFjO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxREFBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHFEQUFXO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsaUJBQWlCLHFEQUFPO0FBQ3hCLHNDQUFzQyxxREFBRztBQUN6QywrREFBK0Qsc0JBQXNCO0FBQ3JGLHVCQUF1QixrREFBa0Q7QUFDekU7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksd0VBQWM7QUFDbEI7QUFDQSxJQUFJLHFEQUFPO0FBQ1g7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLENBQUMsOERBQThEO0FBQ3hEO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUCw2QkFBNkIscURBQU07QUFDbkMsZUFBZSxxREFBVTtBQUN6QixLQUFLO0FBQ0wsbUJBQW1CLHFEQUFHO0FBQ3RCO0FBQ0EsNkNBQTZDLGFBQWEsT0FBTyxvQ0FBb0M7QUFDckc7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFdBQVcscURBQU87QUFDbEI7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2FsZXhhbmRlci5ub2JsZS9hcGV4LXRvb2xib3gvbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliL3NyYy9wYXJzZS9jc3QvY3N0X3Zpc2l0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tcGFjdCwgZmlsdGVyLCBmb3JFYWNoLCBpc0FycmF5LCBpc0VtcHR5LCBpc0Z1bmN0aW9uLCBpc1VuZGVmaW5lZCwga2V5cywgbWFwLCB9IGZyb20gXCJsb2Rhc2gtZXNcIjtcbmltcG9ydCB7IGRlZmluZU5hbWVQcm9wIH0gZnJvbSBcIi4uLy4uL2xhbmcvbGFuZ19leHRlbnNpb25zLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFZpc2l0KGN0eCwgcGFyYW0pIHtcbiAgICBjb25zdCBjaGlsZHJlbk5hbWVzID0ga2V5cyhjdHgpO1xuICAgIGNvbnN0IGNoaWxkcmVuTmFtZXNMZW5ndGggPSBjaGlsZHJlbk5hbWVzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuTmFtZXNMZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjdXJyQ2hpbGROYW1lID0gY2hpbGRyZW5OYW1lc1tpXTtcbiAgICAgICAgY29uc3QgY3VyckNoaWxkQXJyYXkgPSBjdHhbY3VyckNoaWxkTmFtZV07XG4gICAgICAgIGNvbnN0IGN1cnJDaGlsZEFycmF5TGVuZ3RoID0gY3VyckNoaWxkQXJyYXkubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGN1cnJDaGlsZEFycmF5TGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJDaGlsZCA9IGN1cnJDaGlsZEFycmF5W2pdO1xuICAgICAgICAgICAgLy8gZGlzdGluY3Rpb24gYmV0d2VlbiBUb2tlbnMgQ2hpbGRyZW4gYW5kIENzdE5vZGUgY2hpbGRyZW5cbiAgICAgICAgICAgIGlmIChjdXJyQ2hpbGQudG9rZW5UeXBlSWR4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzW2N1cnJDaGlsZC5uYW1lXShjdXJyQ2hpbGQuY2hpbGRyZW4sIHBhcmFtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBkZWZhdWx0VmlzaXQgZG9lcyBub3Qgc3VwcG9ydCBnZW5lcmljIG91dCBwYXJhbVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJhc2VTZW1hbnRpY1Zpc2l0b3JDb25zdHJ1Y3RvcihncmFtbWFyTmFtZSwgcnVsZU5hbWVzKSB7XG4gICAgY29uc3QgZGVyaXZlZENvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIC8vIGNhbiBiZSBvdmVyd3JpdHRlbiBhY2NvcmRpbmcgdG86XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vXG4gICAgLy8gbmFtZT9yZWRpcmVjdGxvY2FsZT1lbi1VUyZyZWRpcmVjdHNsdWc9SmF2YVNjcmlwdCUyRlJlZmVyZW5jZSUyRkdsb2JhbF9PYmplY3RzJTJGRnVuY3Rpb24lMkZuYW1lXG4gICAgZGVmaW5lTmFtZVByb3AoZGVyaXZlZENvbnN0cnVjdG9yLCBncmFtbWFyTmFtZSArIFwiQmFzZVNlbWFudGljc1wiKTtcbiAgICBjb25zdCBzZW1hbnRpY1Byb3RvID0ge1xuICAgICAgICB2aXNpdDogZnVuY3Rpb24gKGNzdE5vZGUsIHBhcmFtKSB7XG4gICAgICAgICAgICAvLyBlbmFibGVzIHdyaXRpbmcgbW9yZSBjb25jaXNlIHZpc2l0b3IgbWV0aG9kcyB3aGVuIENzdE5vZGUgaGFzIG9ubHkgYSBzaW5nbGUgY2hpbGRcbiAgICAgICAgICAgIGlmIChpc0FycmF5KGNzdE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgLy8gQSBDU1QgTm9kZSdzIGNoaWxkcmVuIGRpY3Rpb25hcnkgY2FuIG5ldmVyIGhhdmUgZW1wdHkgYXJyYXlzIGFzIHZhbHVlc1xuICAgICAgICAgICAgICAgIC8vIElmIGEga2V5IGlzIGRlZmluZWQgdGhlcmUgd2lsbCBiZSBhdCBsZWFzdCBvbmUgZWxlbWVudCBpbiB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZSBhcnJheS5cbiAgICAgICAgICAgICAgICBjc3ROb2RlID0gY3N0Tm9kZVswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVuYWJsZXMgcGFzc2luZyBvcHRpb25hbCBDc3ROb2RlcyBjb25jaXNlbHkuXG4gICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQoY3N0Tm9kZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXNbY3N0Tm9kZS5uYW1lXShjc3ROb2RlLmNoaWxkcmVuLCBwYXJhbSk7XG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRlVmlzaXRvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3Qgc2VtYW50aWNEZWZpbml0aW9uRXJyb3JzID0gdmFsaWRhdGVWaXNpdG9yKHRoaXMsIHJ1bGVOYW1lcyk7XG4gICAgICAgICAgICBpZiAoIWlzRW1wdHkoc2VtYW50aWNEZWZpbml0aW9uRXJyb3JzKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZXMgPSBtYXAoc2VtYW50aWNEZWZpbml0aW9uRXJyb3JzLCAoY3VyckRlZkVycm9yKSA9PiBjdXJyRGVmRXJyb3IubXNnKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihgRXJyb3JzIERldGVjdGVkIGluIENTVCBWaXNpdG9yIDwke3RoaXMuY29uc3RydWN0b3IubmFtZX0+OlxcblxcdGAgK1xuICAgICAgICAgICAgICAgICAgICBgJHtlcnJvck1lc3NhZ2VzLmpvaW4oXCJcXG5cXG5cIikucmVwbGFjZSgvXFxuL2csIFwiXFxuXFx0XCIpfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH07XG4gICAgZGVyaXZlZENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IHNlbWFudGljUHJvdG87XG4gICAgZGVyaXZlZENvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGRlcml2ZWRDb25zdHJ1Y3RvcjtcbiAgICBkZXJpdmVkQ29uc3RydWN0b3IuX1JVTEVfTkFNRVMgPSBydWxlTmFtZXM7XG4gICAgcmV0dXJuIGRlcml2ZWRDb25zdHJ1Y3Rvcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCYXNlVmlzaXRvckNvbnN0cnVjdG9yV2l0aERlZmF1bHRzKGdyYW1tYXJOYW1lLCBydWxlTmFtZXMsIGJhc2VDb25zdHJ1Y3Rvcikge1xuICAgIGNvbnN0IGRlcml2ZWRDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAvLyBjYW4gYmUgb3ZlcndyaXR0ZW4gYWNjb3JkaW5nIHRvOlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0Z1bmN0aW9uL1xuICAgIC8vIG5hbWU/cmVkaXJlY3Rsb2NhbGU9ZW4tVVMmcmVkaXJlY3RzbHVnPUphdmFTY3JpcHQlMkZSZWZlcmVuY2UlMkZHbG9iYWxfT2JqZWN0cyUyRkZ1bmN0aW9uJTJGbmFtZVxuICAgIGRlZmluZU5hbWVQcm9wKGRlcml2ZWRDb25zdHJ1Y3RvciwgZ3JhbW1hck5hbWUgKyBcIkJhc2VTZW1hbnRpY3NXaXRoRGVmYXVsdHNcIik7XG4gICAgY29uc3Qgd2l0aERlZmF1bHRzUHJvdG8gPSBPYmplY3QuY3JlYXRlKGJhc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGUpO1xuICAgIGZvckVhY2gocnVsZU5hbWVzLCAocnVsZU5hbWUpID0+IHtcbiAgICAgICAgd2l0aERlZmF1bHRzUHJvdG9bcnVsZU5hbWVdID0gZGVmYXVsdFZpc2l0O1xuICAgIH0pO1xuICAgIGRlcml2ZWRDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSB3aXRoRGVmYXVsdHNQcm90bztcbiAgICBkZXJpdmVkQ29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gZGVyaXZlZENvbnN0cnVjdG9yO1xuICAgIHJldHVybiBkZXJpdmVkQ29uc3RydWN0b3I7XG59XG5leHBvcnQgdmFyIENzdFZpc2l0b3JEZWZpbml0aW9uRXJyb3I7XG4oZnVuY3Rpb24gKENzdFZpc2l0b3JEZWZpbml0aW9uRXJyb3IpIHtcbiAgICBDc3RWaXNpdG9yRGVmaW5pdGlvbkVycm9yW0NzdFZpc2l0b3JEZWZpbml0aW9uRXJyb3JbXCJSRURVTkRBTlRfTUVUSE9EXCJdID0gMF0gPSBcIlJFRFVOREFOVF9NRVRIT0RcIjtcbiAgICBDc3RWaXNpdG9yRGVmaW5pdGlvbkVycm9yW0NzdFZpc2l0b3JEZWZpbml0aW9uRXJyb3JbXCJNSVNTSU5HX01FVEhPRFwiXSA9IDFdID0gXCJNSVNTSU5HX01FVEhPRFwiO1xufSkoQ3N0VmlzaXRvckRlZmluaXRpb25FcnJvciB8fCAoQ3N0VmlzaXRvckRlZmluaXRpb25FcnJvciA9IHt9KSk7XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVWaXNpdG9yKHZpc2l0b3JJbnN0YW5jZSwgcnVsZU5hbWVzKSB7XG4gICAgY29uc3QgbWlzc2luZ0Vycm9ycyA9IHZhbGlkYXRlTWlzc2luZ0NzdE1ldGhvZHModmlzaXRvckluc3RhbmNlLCBydWxlTmFtZXMpO1xuICAgIHJldHVybiBtaXNzaW5nRXJyb3JzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlTWlzc2luZ0NzdE1ldGhvZHModmlzaXRvckluc3RhbmNlLCBydWxlTmFtZXMpIHtcbiAgICBjb25zdCBtaXNzaW5nUnVsZU5hbWVzID0gZmlsdGVyKHJ1bGVOYW1lcywgKGN1cnJSdWxlTmFtZSkgPT4ge1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbih2aXNpdG9ySW5zdGFuY2VbY3VyclJ1bGVOYW1lXSkgPT09IGZhbHNlO1xuICAgIH0pO1xuICAgIGNvbnN0IGVycm9ycyA9IG1hcChtaXNzaW5nUnVsZU5hbWVzLCAoY3VyclJ1bGVOYW1lKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtc2c6IGBNaXNzaW5nIHZpc2l0b3IgbWV0aG9kOiA8JHtjdXJyUnVsZU5hbWV9PiBvbiAkeyh2aXNpdG9ySW5zdGFuY2UuY29uc3RydWN0b3IubmFtZSl9IENTVCBWaXNpdG9yLmAsXG4gICAgICAgICAgICB0eXBlOiBDc3RWaXNpdG9yRGVmaW5pdGlvbkVycm9yLk1JU1NJTkdfTUVUSE9ELFxuICAgICAgICAgICAgbWV0aG9kTmFtZTogY3VyclJ1bGVOYW1lLFxuICAgICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiBjb21wYWN0KGVycm9ycyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jc3RfdmlzaXRvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/cst/cst_visitor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/errors_public.js":
/*!****************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/errors_public.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultGrammarResolverErrorProvider: () => (/* binding */ defaultGrammarResolverErrorProvider),\n/* harmony export */   defaultGrammarValidatorErrorProvider: () => (/* binding */ defaultGrammarValidatorErrorProvider),\n/* harmony export */   defaultParserErrorProvider: () => (/* binding */ defaultParserErrorProvider)\n/* harmony export */ });\n/* harmony import */ var _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scan/tokens_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens_public.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/head.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/reduce.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/map.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n\n\n\nconst defaultParserErrorProvider = {\n    buildMismatchTokenMessage({ expected, actual, previous, ruleName }) {\n        const hasLabel = (0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.hasTokenLabel)(expected);\n        const expectedMsg = hasLabel\n            ? `--> ${(0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.tokenLabel)(expected)} <--`\n            : `token of type --> ${expected.name} <--`;\n        const msg = `Expecting ${expectedMsg} but found --> '${actual.image}' <--`;\n        return msg;\n    },\n    buildNotAllInputParsedMessage({ firstRedundant, ruleName }) {\n        return \"Redundant input, expecting EOF but found: \" + firstRedundant.image;\n    },\n    buildNoViableAltMessage({ expectedPathsPerAlt, actual, previous, customUserDescription, ruleName, }) {\n        const errPrefix = \"Expecting: \";\n        // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n        const actualText = (0,lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(actual).image;\n        const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n        if (customUserDescription) {\n            return errPrefix + customUserDescription + errSuffix;\n        }\n        else {\n            const allLookAheadPaths = (0,lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(expectedPathsPerAlt, (result, currAltPaths) => result.concat(currAltPaths), []);\n            const nextValidTokenSequences = (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(allLookAheadPaths, (currPath) => `[${(0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(currPath, (currTokenType) => (0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.tokenLabel)(currTokenType)).join(\", \")}]`);\n            const nextValidSequenceItems = (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(nextValidTokenSequences, (itemMsg, idx) => `  ${idx + 1}. ${itemMsg}`);\n            const calculatedDescription = `one of these possible Token sequences:\\n${nextValidSequenceItems.join(\"\\n\")}`;\n            return errPrefix + calculatedDescription + errSuffix;\n        }\n    },\n    buildEarlyExitMessage({ expectedIterationPaths, actual, customUserDescription, ruleName, }) {\n        const errPrefix = \"Expecting: \";\n        // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n        const actualText = (0,lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(actual).image;\n        const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n        if (customUserDescription) {\n            return errPrefix + customUserDescription + errSuffix;\n        }\n        else {\n            const nextValidTokenSequences = (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(expectedIterationPaths, (currPath) => `[${(0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(currPath, (currTokenType) => (0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.tokenLabel)(currTokenType)).join(\",\")}]`);\n            const calculatedDescription = `expecting at least one iteration which starts with one of these possible Token sequences::\\n  ` +\n                `<${nextValidTokenSequences.join(\" ,\")}>`;\n            return errPrefix + calculatedDescription + errSuffix;\n        }\n    },\n};\nObject.freeze(defaultParserErrorProvider);\nconst defaultGrammarResolverErrorProvider = {\n    buildRuleNotFoundError(topLevelRule, undefinedRule) {\n        const msg = \"Invalid grammar, reference to a rule which is not defined: ->\" +\n            undefinedRule.nonTerminalName +\n            \"<-\\n\" +\n            \"inside top level rule: ->\" +\n            topLevelRule.name +\n            \"<-\";\n        return msg;\n    },\n};\nconst defaultGrammarValidatorErrorProvider = {\n    buildDuplicateFoundError(topLevelRule, duplicateProds) {\n        function getExtraProductionArgument(prod) {\n            if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.Terminal) {\n                return prod.terminalType.name;\n            }\n            else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.NonTerminal) {\n                return prod.nonTerminalName;\n            }\n            else {\n                return \"\";\n            }\n        }\n        const topLevelName = topLevelRule.name;\n        const duplicateProd = (0,lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(duplicateProds);\n        const index = duplicateProd.idx;\n        const dslName = (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.getProductionDslName)(duplicateProd);\n        const extraArgument = getExtraProductionArgument(duplicateProd);\n        const hasExplicitIndex = index > 0;\n        let msg = `->${dslName}${hasExplicitIndex ? index : \"\"}<- ${extraArgument ? `with argument: ->${extraArgument}<-` : \"\"}\n                  appears more than once (${duplicateProds.length} times) in the top level rule: ->${topLevelName}<-.                  \n                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  `;\n        // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...\n        msg = msg.replace(/[ \\t]+/g, \" \");\n        msg = msg.replace(/\\s\\s+/g, \"\\n\");\n        return msg;\n    },\n    buildNamespaceConflictError(rule) {\n        const errMsg = `Namespace conflict found in grammar.\\n` +\n            `The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <${rule.name}>.\\n` +\n            `To resolve this make sure each Terminal and Non-Terminal names are unique\\n` +\n            `This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\\n` +\n            `and Non-Terminal names start with a lower case letter.`;\n        return errMsg;\n    },\n    buildAlternationPrefixAmbiguityError(options) {\n        const pathMsg = (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(options.prefixPath, (currTok) => (0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.tokenLabel)(currTok)).join(\", \");\n        const occurrence = options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n        const errMsg = `Ambiguous alternatives: <${options.ambiguityIndices.join(\" ,\")}> due to common lookahead prefix\\n` +\n            `in <OR${occurrence}> inside <${options.topLevelRule.name}> Rule,\\n` +\n            `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n` +\n            `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\\n` +\n            `For Further details.`;\n        return errMsg;\n    },\n    buildAlternationAmbiguityError(options) {\n        const pathMsg = (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(options.prefixPath, (currtok) => (0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.tokenLabel)(currtok)).join(\", \");\n        const occurrence = options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n        let currMessage = `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\" ,\")}> in <OR${occurrence}>` +\n            ` inside <${options.topLevelRule.name}> Rule,\\n` +\n            `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`;\n        currMessage =\n            currMessage +\n                `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\n                `For Further details.`;\n        return currMessage;\n    },\n    buildEmptyRepetitionError(options) {\n        let dslName = (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.getProductionDslName)(options.repetition);\n        if (options.repetition.idx !== 0) {\n            dslName += options.repetition.idx;\n        }\n        const errMsg = `The repetition <${dslName}> within Rule <${options.topLevelRule.name}> can never consume any tokens.\\n` +\n            `This could lead to an infinite loop.`;\n        return errMsg;\n    },\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildTokenNameError(options) {\n        /* istanbul ignore next */\n        return \"deprecated\";\n    },\n    buildEmptyAlternationError(options) {\n        const errMsg = `Ambiguous empty alternative: <${options.emptyChoiceIdx + 1}>` +\n            ` in <OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n` +\n            `Only the last alternative may be an empty alternative.`;\n        return errMsg;\n    },\n    buildTooManyAlternativesError(options) {\n        const errMsg = `An Alternation cannot have more than 256 alternatives:\\n` +\n            `<OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n has ${options.alternation.definition.length + 1} alternatives.`;\n        return errMsg;\n    },\n    buildLeftRecursionError(options) {\n        const ruleName = options.topLevelRule.name;\n        const pathNames = (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(options.leftRecursionPath, (currRule) => currRule.name);\n        const leftRecursivePath = `${ruleName} --> ${pathNames\n            .concat([ruleName])\n            .join(\" --> \")}`;\n        const errMsg = `Left Recursion found in grammar.\\n` +\n            `rule: <${ruleName}> can be invoked from itself (directly or indirectly)\\n` +\n            `without consuming any Tokens. The grammar path that causes this is: \\n ${leftRecursivePath}\\n` +\n            ` To fix this refactor your grammar to remove the left recursion.\\n` +\n            `see: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.`;\n        return errMsg;\n    },\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildInvalidRuleNameError(options) {\n        /* istanbul ignore next */\n        return \"deprecated\";\n    },\n    buildDuplicateRuleNameError(options) {\n        let ruleName;\n        if (options.topLevelRule instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.Rule) {\n            ruleName = options.topLevelRule.name;\n        }\n        else {\n            ruleName = options.topLevelRule;\n        }\n        const errMsg = `Duplicate definition, rule: ->${ruleName}<- is already defined in the grammar: ->${options.grammarName}<-`;\n        return errMsg;\n    },\n};\n//# sourceMappingURL=errors_public.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/errors_public.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/exceptions_public.js":
/*!********************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/exceptions_public.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EarlyExitException: () => (/* binding */ EarlyExitException),\n/* harmony export */   MismatchedTokenException: () => (/* binding */ MismatchedTokenException),\n/* harmony export */   NoViableAltException: () => (/* binding */ NoViableAltException),\n/* harmony export */   NotAllInputParsedException: () => (/* binding */ NotAllInputParsedException),\n/* harmony export */   isRecognitionException: () => (/* binding */ isRecognitionException)\n/* harmony export */ });\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/includes.js\");\n\nconst MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nconst NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nconst EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nconst NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\nconst RECOGNITION_EXCEPTION_NAMES = [\n    MISMATCHED_TOKEN_EXCEPTION,\n    NO_VIABLE_ALT_EXCEPTION,\n    EARLY_EXIT_EXCEPTION,\n    NOT_ALL_INPUT_PARSED_EXCEPTION,\n];\nObject.freeze(RECOGNITION_EXCEPTION_NAMES);\n// hacks to bypass no support for custom Errors in javascript/typescript\nfunction isRecognitionException(error) {\n    // can't do instanceof on hacked custom js exceptions\n    return (0,lodash_es__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\nclass RecognitionException extends Error {\n    constructor(message, token) {\n        super(message);\n        this.token = token;\n        this.resyncedTokens = [];\n        // fix prototype chain when typescript target is ES5\n        Object.setPrototypeOf(this, new.target.prototype);\n        /* istanbul ignore next - V8 workaround to remove constructor from stacktrace when typescript target is ES5 */\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n    }\n}\nclass MismatchedTokenException extends RecognitionException {\n    constructor(message, token, previousToken) {\n        super(message, token);\n        this.previousToken = previousToken;\n        this.name = MISMATCHED_TOKEN_EXCEPTION;\n    }\n}\nclass NoViableAltException extends RecognitionException {\n    constructor(message, token, previousToken) {\n        super(message, token);\n        this.previousToken = previousToken;\n        this.name = NO_VIABLE_ALT_EXCEPTION;\n    }\n}\nclass NotAllInputParsedException extends RecognitionException {\n    constructor(message, token) {\n        super(message, token);\n        this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n    }\n}\nclass EarlyExitException extends RecognitionException {\n    constructor(message, token, previousToken) {\n        super(message, token);\n        this.previousToken = previousToken;\n        this.name = EARLY_EXIT_EXCEPTION;\n    }\n}\n//# sourceMappingURL=exceptions_public.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2V4Y2VwdGlvbnNfcHVibGljLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsV0FBVyxxREFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbGV4YW5kZXIubm9ibGUvYXBleC10b29sYm94L25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYi9zcmMvcGFyc2UvZXhjZXB0aW9uc19wdWJsaWMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5jbHVkZXMgfSBmcm9tIFwibG9kYXNoLWVzXCI7XG5jb25zdCBNSVNNQVRDSEVEX1RPS0VOX0VYQ0VQVElPTiA9IFwiTWlzbWF0Y2hlZFRva2VuRXhjZXB0aW9uXCI7XG5jb25zdCBOT19WSUFCTEVfQUxUX0VYQ0VQVElPTiA9IFwiTm9WaWFibGVBbHRFeGNlcHRpb25cIjtcbmNvbnN0IEVBUkxZX0VYSVRfRVhDRVBUSU9OID0gXCJFYXJseUV4aXRFeGNlcHRpb25cIjtcbmNvbnN0IE5PVF9BTExfSU5QVVRfUEFSU0VEX0VYQ0VQVElPTiA9IFwiTm90QWxsSW5wdXRQYXJzZWRFeGNlcHRpb25cIjtcbmNvbnN0IFJFQ09HTklUSU9OX0VYQ0VQVElPTl9OQU1FUyA9IFtcbiAgICBNSVNNQVRDSEVEX1RPS0VOX0VYQ0VQVElPTixcbiAgICBOT19WSUFCTEVfQUxUX0VYQ0VQVElPTixcbiAgICBFQVJMWV9FWElUX0VYQ0VQVElPTixcbiAgICBOT1RfQUxMX0lOUFVUX1BBUlNFRF9FWENFUFRJT04sXG5dO1xuT2JqZWN0LmZyZWV6ZShSRUNPR05JVElPTl9FWENFUFRJT05fTkFNRVMpO1xuLy8gaGFja3MgdG8gYnlwYXNzIG5vIHN1cHBvcnQgZm9yIGN1c3RvbSBFcnJvcnMgaW4gamF2YXNjcmlwdC90eXBlc2NyaXB0XG5leHBvcnQgZnVuY3Rpb24gaXNSZWNvZ25pdGlvbkV4Y2VwdGlvbihlcnJvcikge1xuICAgIC8vIGNhbid0IGRvIGluc3RhbmNlb2Ygb24gaGFja2VkIGN1c3RvbSBqcyBleGNlcHRpb25zXG4gICAgcmV0dXJuIGluY2x1ZGVzKFJFQ09HTklUSU9OX0VYQ0VQVElPTl9OQU1FUywgZXJyb3IubmFtZSk7XG59XG5jbGFzcyBSZWNvZ25pdGlvbkV4Y2VwdGlvbiBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCB0b2tlbikge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy50b2tlbiA9IHRva2VuO1xuICAgICAgICB0aGlzLnJlc3luY2VkVG9rZW5zID0gW107XG4gICAgICAgIC8vIGZpeCBwcm90b3R5cGUgY2hhaW4gd2hlbiB0eXBlc2NyaXB0IHRhcmdldCBpcyBFUzVcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIG5ldy50YXJnZXQucHJvdG90eXBlKTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgLSBWOCB3b3JrYXJvdW5kIHRvIHJlbW92ZSBjb25zdHJ1Y3RvciBmcm9tIHN0YWNrdHJhY2Ugd2hlbiB0eXBlc2NyaXB0IHRhcmdldCBpcyBFUzUgKi9cbiAgICAgICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBNaXNtYXRjaGVkVG9rZW5FeGNlcHRpb24gZXh0ZW5kcyBSZWNvZ25pdGlvbkV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgdG9rZW4sIHByZXZpb3VzVG9rZW4pIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgdG9rZW4pO1xuICAgICAgICB0aGlzLnByZXZpb3VzVG9rZW4gPSBwcmV2aW91c1Rva2VuO1xuICAgICAgICB0aGlzLm5hbWUgPSBNSVNNQVRDSEVEX1RPS0VOX0VYQ0VQVElPTjtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTm9WaWFibGVBbHRFeGNlcHRpb24gZXh0ZW5kcyBSZWNvZ25pdGlvbkV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgdG9rZW4sIHByZXZpb3VzVG9rZW4pIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgdG9rZW4pO1xuICAgICAgICB0aGlzLnByZXZpb3VzVG9rZW4gPSBwcmV2aW91c1Rva2VuO1xuICAgICAgICB0aGlzLm5hbWUgPSBOT19WSUFCTEVfQUxUX0VYQ0VQVElPTjtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTm90QWxsSW5wdXRQYXJzZWRFeGNlcHRpb24gZXh0ZW5kcyBSZWNvZ25pdGlvbkV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgdG9rZW4pIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgdG9rZW4pO1xuICAgICAgICB0aGlzLm5hbWUgPSBOT1RfQUxMX0lOUFVUX1BBUlNFRF9FWENFUFRJT047XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEVhcmx5RXhpdEV4Y2VwdGlvbiBleHRlbmRzIFJlY29nbml0aW9uRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCB0b2tlbiwgcHJldmlvdXNUb2tlbikge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCB0b2tlbik7XG4gICAgICAgIHRoaXMucHJldmlvdXNUb2tlbiA9IHByZXZpb3VzVG9rZW47XG4gICAgICAgIHRoaXMubmFtZSA9IEVBUkxZX0VYSVRfRVhDRVBUSU9OO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4Y2VwdGlvbnNfcHVibGljLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/exceptions_public.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/checks.js":
/*!*****************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/grammar/checks.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OccurrenceValidationCollector: () => (/* binding */ OccurrenceValidationCollector),\n/* harmony export */   RepetitionCollector: () => (/* binding */ RepetitionCollector),\n/* harmony export */   checkPrefixAlternativesAmbiguities: () => (/* binding */ checkPrefixAlternativesAmbiguities),\n/* harmony export */   getFirstNoneTerminal: () => (/* binding */ getFirstNoneTerminal),\n/* harmony export */   identifyProductionForDuplicates: () => (/* binding */ identifyProductionForDuplicates),\n/* harmony export */   validateAmbiguousAlternationAlternatives: () => (/* binding */ validateAmbiguousAlternationAlternatives),\n/* harmony export */   validateEmptyOrAlternative: () => (/* binding */ validateEmptyOrAlternative),\n/* harmony export */   validateGrammar: () => (/* binding */ validateGrammar),\n/* harmony export */   validateLookahead: () => (/* binding */ validateLookahead),\n/* harmony export */   validateNoLeftRecursion: () => (/* binding */ validateNoLeftRecursion),\n/* harmony export */   validateRuleDoesNotAlreadyExist: () => (/* binding */ validateRuleDoesNotAlreadyExist),\n/* harmony export */   validateRuleIsOverridden: () => (/* binding */ validateRuleIsOverridden),\n/* harmony export */   validateSomeNonEmptyLookaheadPath: () => (/* binding */ validateSomeNonEmptyLookaheadPath),\n/* harmony export */   validateTooManyAlts: () => (/* binding */ validateTooManyAlts)\n/* harmony export */ });\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/map.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/flatMap.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/groupBy.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/pickBy.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/values.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/head.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/reduce.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/includes.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/difference.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/clone.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/flatten.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/drop.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/dropRight.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/reject.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/compact.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/filter.js\");\n/* harmony import */ var _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n/* harmony import */ var _lookahead_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lookahead.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/lookahead.js\");\n/* harmony import */ var _interpreter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interpreter.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/interpreter.js\");\n/* harmony import */ var _scan_tokens_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../scan/tokens.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens.js\");\n\n\n\n\n\n\nfunction validateLookahead(options) {\n    const lookaheadValidationErrorMessages = options.lookaheadStrategy.validate({\n        rules: options.rules,\n        tokenTypes: options.tokenTypes,\n        grammarName: options.grammarName,\n    });\n    return (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(lookaheadValidationErrorMessages, (errorMessage) => (Object.assign({ type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.CUSTOM_LOOKAHEAD_VALIDATION }, errorMessage)));\n}\nfunction validateGrammar(topLevels, tokenTypes, errMsgProvider, grammarName) {\n    const duplicateErrors = (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(topLevels, (currTopLevel) => validateDuplicateProductions(currTopLevel, errMsgProvider));\n    const termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider);\n    const tooManyAltsErrors = (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(topLevels, (curRule) => validateTooManyAlts(curRule, errMsgProvider));\n    const duplicateRulesError = (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(topLevels, (curRule) => validateRuleDoesNotAlreadyExist(curRule, topLevels, grammarName, errMsgProvider));\n    return duplicateErrors.concat(termsNamespaceConflictErrors, tooManyAltsErrors, duplicateRulesError);\n}\nfunction validateDuplicateProductions(topLevelRule, errMsgProvider) {\n    const collectorVisitor = new OccurrenceValidationCollector();\n    topLevelRule.accept(collectorVisitor);\n    const allRuleProductions = collectorVisitor.allProductions;\n    const productionGroups = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(allRuleProductions, identifyProductionForDuplicates);\n    const duplicates = (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(productionGroups, (currGroup) => {\n        return currGroup.length > 1;\n    });\n    const errors = (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])((0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(duplicates), (currDuplicates) => {\n        const firstProd = (0,lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(currDuplicates);\n        const msg = errMsgProvider.buildDuplicateFoundError(topLevelRule, currDuplicates);\n        const dslName = (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.getProductionDslName)(firstProd);\n        const defError = {\n            message: msg,\n            type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n            ruleName: topLevelRule.name,\n            dslName: dslName,\n            occurrence: firstProd.idx,\n        };\n        const param = getExtraProductionArgument(firstProd);\n        if (param) {\n            defError.parameter = param;\n        }\n        return defError;\n    });\n    return errors;\n}\nfunction identifyProductionForDuplicates(prod) {\n    return `${(0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.getProductionDslName)(prod)}_#_${prod.idx}_#_${getExtraProductionArgument(prod)}`;\n}\nfunction getExtraProductionArgument(prod) {\n    if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.Terminal) {\n        return prod.terminalType.name;\n    }\n    else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.NonTerminal) {\n        return prod.nonTerminalName;\n    }\n    else {\n        return \"\";\n    }\n}\nclass OccurrenceValidationCollector extends _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.GAstVisitor {\n    constructor() {\n        super(...arguments);\n        this.allProductions = [];\n    }\n    visitNonTerminal(subrule) {\n        this.allProductions.push(subrule);\n    }\n    visitOption(option) {\n        this.allProductions.push(option);\n    }\n    visitRepetitionWithSeparator(manySep) {\n        this.allProductions.push(manySep);\n    }\n    visitRepetitionMandatory(atLeastOne) {\n        this.allProductions.push(atLeastOne);\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n        this.allProductions.push(atLeastOneSep);\n    }\n    visitRepetition(many) {\n        this.allProductions.push(many);\n    }\n    visitAlternation(or) {\n        this.allProductions.push(or);\n    }\n    visitTerminal(terminal) {\n        this.allProductions.push(terminal);\n    }\n}\nfunction validateRuleDoesNotAlreadyExist(rule, allRules, className, errMsgProvider) {\n    const errors = [];\n    const occurrences = (0,lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(allRules, (result, curRule) => {\n        if (curRule.name === rule.name) {\n            return result + 1;\n        }\n        return result;\n    }, 0);\n    if (occurrences > 1) {\n        const errMsg = errMsgProvider.buildDuplicateRuleNameError({\n            topLevelRule: rule,\n            grammarName: className,\n        });\n        errors.push({\n            message: errMsg,\n            type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n            ruleName: rule.name,\n        });\n    }\n    return errors;\n}\n// TODO: is there anyway to get only the rule names of rules inherited from the super grammars?\n// This is not part of the IGrammarErrorProvider because the validation cannot be performed on\n// The grammar structure, only at runtime.\nfunction validateRuleIsOverridden(ruleName, definedRulesNames, className) {\n    const errors = [];\n    let errMsg;\n    if (!(0,lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(definedRulesNames, ruleName)) {\n        errMsg =\n            `Invalid rule override, rule: ->${ruleName}<- cannot be overridden in the grammar: ->${className}<-` +\n                `as it is not defined in any of the super grammars `;\n        errors.push({\n            message: errMsg,\n            type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n            ruleName: ruleName,\n        });\n    }\n    return errors;\n}\nfunction validateNoLeftRecursion(topRule, currRule, errMsgProvider, path = []) {\n    const errors = [];\n    const nextNonTerminals = getFirstNoneTerminal(currRule.definition);\n    if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(nextNonTerminals)) {\n        return [];\n    }\n    else {\n        const ruleName = topRule.name;\n        const foundLeftRecursion = (0,lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(nextNonTerminals, topRule);\n        if (foundLeftRecursion) {\n            errors.push({\n                message: errMsgProvider.buildLeftRecursionError({\n                    topLevelRule: topRule,\n                    leftRecursionPath: path,\n                }),\n                type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.LEFT_RECURSION,\n                ruleName: ruleName,\n            });\n        }\n        // we are only looking for cyclic paths leading back to the specific topRule\n        // other cyclic paths are ignored, we still need this difference to avoid infinite loops...\n        const validNextSteps = (0,lodash_es__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(nextNonTerminals, path.concat([topRule]));\n        const errorsFromNextSteps = (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(validNextSteps, (currRefRule) => {\n            const newPath = (0,lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(path);\n            newPath.push(currRefRule);\n            return validateNoLeftRecursion(topRule, currRefRule, errMsgProvider, newPath);\n        });\n        return errors.concat(errorsFromNextSteps);\n    }\n}\nfunction getFirstNoneTerminal(definition) {\n    let result = [];\n    if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(definition)) {\n        return result;\n    }\n    const firstProd = (0,lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(definition);\n    /* istanbul ignore else */\n    if (firstProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.NonTerminal) {\n        result.push(firstProd.referencedRule);\n    }\n    else if (firstProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.Alternative ||\n        firstProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.Option ||\n        firstProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.RepetitionMandatory ||\n        firstProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.RepetitionMandatoryWithSeparator ||\n        firstProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.RepetitionWithSeparator ||\n        firstProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.Repetition) {\n        result = result.concat(getFirstNoneTerminal(firstProd.definition));\n    }\n    else if (firstProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.Alternation) {\n        // each sub definition in alternation is a FLAT\n        result = (0,lodash_es__WEBPACK_IMPORTED_MODULE_16__[\"default\"])((0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(firstProd.definition, (currSubDef) => getFirstNoneTerminal(currSubDef.definition)));\n    }\n    else if (firstProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.Terminal) {\n        // nothing to see, move along\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n    const isFirstOptional = (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.isOptionalProd)(firstProd);\n    const hasMore = definition.length > 1;\n    if (isFirstOptional && hasMore) {\n        const rest = (0,lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(definition);\n        return result.concat(getFirstNoneTerminal(rest));\n    }\n    else {\n        return result;\n    }\n}\nclass OrCollector extends _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.GAstVisitor {\n    constructor() {\n        super(...arguments);\n        this.alternations = [];\n    }\n    visitAlternation(node) {\n        this.alternations.push(node);\n    }\n}\nfunction validateEmptyOrAlternative(topLevelRule, errMsgProvider) {\n    const orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    const ors = orCollector.alternations;\n    const errors = (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(ors, (currOr) => {\n        const exceptLast = (0,lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(currOr.definition);\n        return (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(exceptLast, (currAlternative, currAltIdx) => {\n            const possibleFirstInAlt = (0,_interpreter_js__WEBPACK_IMPORTED_MODULE_3__.nextPossibleTokensAfter)([currAlternative], [], _scan_tokens_js__WEBPACK_IMPORTED_MODULE_4__.tokenStructuredMatcher, 1);\n            if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(possibleFirstInAlt)) {\n                return [\n                    {\n                        message: errMsgProvider.buildEmptyAlternationError({\n                            topLevelRule: topLevelRule,\n                            alternation: currOr,\n                            emptyChoiceIdx: currAltIdx,\n                        }),\n                        type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n                        ruleName: topLevelRule.name,\n                        occurrence: currOr.idx,\n                        alternative: currAltIdx + 1,\n                    },\n                ];\n            }\n            else {\n                return [];\n            }\n        });\n    });\n    return errors;\n}\nfunction validateAmbiguousAlternationAlternatives(topLevelRule, globalMaxLookahead, errMsgProvider) {\n    const orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    let ors = orCollector.alternations;\n    // New Handling of ignoring ambiguities\n    // - https://github.com/chevrotain/chevrotain/issues/869\n    ors = (0,lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(ors, (currOr) => currOr.ignoreAmbiguities === true);\n    const errors = (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(ors, (currOr) => {\n        const currOccurrence = currOr.idx;\n        const actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;\n        const alternatives = (0,_lookahead_js__WEBPACK_IMPORTED_MODULE_2__.getLookaheadPathsForOr)(currOccurrence, topLevelRule, actualMaxLookahead, currOr);\n        const altsAmbiguityErrors = checkAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n        const altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n        return altsAmbiguityErrors.concat(altsPrefixAmbiguityErrors);\n    });\n    return errors;\n}\nclass RepetitionCollector extends _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.GAstVisitor {\n    constructor() {\n        super(...arguments);\n        this.allProductions = [];\n    }\n    visitRepetitionWithSeparator(manySep) {\n        this.allProductions.push(manySep);\n    }\n    visitRepetitionMandatory(atLeastOne) {\n        this.allProductions.push(atLeastOne);\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n        this.allProductions.push(atLeastOneSep);\n    }\n    visitRepetition(many) {\n        this.allProductions.push(many);\n    }\n}\nfunction validateTooManyAlts(topLevelRule, errMsgProvider) {\n    const orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    const ors = orCollector.alternations;\n    const errors = (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(ors, (currOr) => {\n        if (currOr.definition.length > 255) {\n            return [\n                {\n                    message: errMsgProvider.buildTooManyAlternativesError({\n                        topLevelRule: topLevelRule,\n                        alternation: currOr,\n                    }),\n                    type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.TOO_MANY_ALTS,\n                    ruleName: topLevelRule.name,\n                    occurrence: currOr.idx,\n                },\n            ];\n        }\n        else {\n            return [];\n        }\n    });\n    return errors;\n}\nfunction validateSomeNonEmptyLookaheadPath(topLevelRules, maxLookahead, errMsgProvider) {\n    const errors = [];\n    (0,lodash_es__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(topLevelRules, (currTopRule) => {\n        const collectorVisitor = new RepetitionCollector();\n        currTopRule.accept(collectorVisitor);\n        const allRuleProductions = collectorVisitor.allProductions;\n        (0,lodash_es__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(allRuleProductions, (currProd) => {\n            const prodType = (0,_lookahead_js__WEBPACK_IMPORTED_MODULE_2__.getProdType)(currProd);\n            const actualMaxLookahead = currProd.maxLookahead || maxLookahead;\n            const currOccurrence = currProd.idx;\n            const paths = (0,_lookahead_js__WEBPACK_IMPORTED_MODULE_2__.getLookaheadPathsForOptionalProd)(currOccurrence, currTopRule, prodType, actualMaxLookahead);\n            const pathsInsideProduction = paths[0];\n            if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])((0,lodash_es__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(pathsInsideProduction))) {\n                const errMsg = errMsgProvider.buildEmptyRepetitionError({\n                    topLevelRule: currTopRule,\n                    repetition: currProd,\n                });\n                errors.push({\n                    message: errMsg,\n                    type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n                    ruleName: currTopRule.name,\n                });\n            }\n        });\n    });\n    return errors;\n}\nfunction checkAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    const foundAmbiguousPaths = [];\n    const identicalAmbiguities = (0,lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(alternatives, (result, currAlt, currAltIdx) => {\n        // ignore (skip) ambiguities with this alternative\n        if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n            return result;\n        }\n        (0,lodash_es__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(currAlt, (currPath) => {\n            const altsCurrPathAppearsIn = [currAltIdx];\n            (0,lodash_es__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(alternatives, (currOtherAlt, currOtherAltIdx) => {\n                if (currAltIdx !== currOtherAltIdx &&\n                    (0,_lookahead_js__WEBPACK_IMPORTED_MODULE_2__.containsPath)(currOtherAlt, currPath) &&\n                    // ignore (skip) ambiguities with this \"other\" alternative\n                    alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true) {\n                    altsCurrPathAppearsIn.push(currOtherAltIdx);\n                }\n            });\n            if (altsCurrPathAppearsIn.length > 1 &&\n                !(0,_lookahead_js__WEBPACK_IMPORTED_MODULE_2__.containsPath)(foundAmbiguousPaths, currPath)) {\n                foundAmbiguousPaths.push(currPath);\n                result.push({\n                    alts: altsCurrPathAppearsIn,\n                    path: currPath,\n                });\n            }\n        });\n        return result;\n    }, []);\n    const currErrors = (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(identicalAmbiguities, (currAmbDescriptor) => {\n        const ambgIndices = (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(currAmbDescriptor.alts, (currAltIdx) => currAltIdx + 1);\n        const currMessage = errMsgProvider.buildAlternationAmbiguityError({\n            topLevelRule: rule,\n            alternation: alternation,\n            ambiguityIndices: ambgIndices,\n            prefixPath: currAmbDescriptor.path,\n        });\n        return {\n            message: currMessage,\n            type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n            ruleName: rule.name,\n            occurrence: alternation.idx,\n            alternatives: currAmbDescriptor.alts,\n        };\n    });\n    return currErrors;\n}\nfunction checkPrefixAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    // flatten\n    const pathsAndIndices = (0,lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(alternatives, (result, currAlt, idx) => {\n        const currPathsAndIdx = (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(currAlt, (currPath) => {\n            return { idx: idx, path: currPath };\n        });\n        return result.concat(currPathsAndIdx);\n    }, []);\n    const errors = (0,lodash_es__WEBPACK_IMPORTED_MODULE_21__[\"default\"])((0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(pathsAndIndices, (currPathAndIdx) => {\n        const alternativeGast = alternation.definition[currPathAndIdx.idx];\n        // ignore (skip) ambiguities with this alternative\n        if (alternativeGast.ignoreAmbiguities === true) {\n            return [];\n        }\n        const targetIdx = currPathAndIdx.idx;\n        const targetPath = currPathAndIdx.path;\n        const prefixAmbiguitiesPathsAndIndices = (0,lodash_es__WEBPACK_IMPORTED_MODULE_22__[\"default\"])(pathsAndIndices, (searchPathAndIdx) => {\n            // prefix ambiguity can only be created from lower idx (higher priority) path\n            return (\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !==\n                true &&\n                searchPathAndIdx.idx < targetIdx &&\n                // checking for strict prefix because identical lookaheads\n                // will be be detected using a different validation.\n                (0,_lookahead_js__WEBPACK_IMPORTED_MODULE_2__.isStrictPrefixOfPath)(searchPathAndIdx.path, targetPath));\n        });\n        const currPathPrefixErrors = (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(prefixAmbiguitiesPathsAndIndices, (currAmbPathAndIdx) => {\n            const ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];\n            const occurrence = alternation.idx === 0 ? \"\" : alternation.idx;\n            const message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n                topLevelRule: rule,\n                alternation: alternation,\n                ambiguityIndices: ambgIndices,\n                prefixPath: currAmbPathAndIdx.path,\n            });\n            return {\n                message: message,\n                type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n                ruleName: rule.name,\n                occurrence: occurrence,\n                alternatives: ambgIndices,\n            };\n        });\n        return currPathPrefixErrors;\n    }));\n    return errors;\n}\nfunction checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider) {\n    const errors = [];\n    const tokenNames = (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(tokenTypes, (currToken) => currToken.name);\n    (0,lodash_es__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(topLevels, (currRule) => {\n        const currRuleName = currRule.name;\n        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(tokenNames, currRuleName)) {\n            const errMsg = errMsgProvider.buildNamespaceConflictError(currRule);\n            errors.push({\n                message: errMsg,\n                type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n                ruleName: currRuleName,\n            });\n        }\n    });\n    return errors;\n}\n//# sourceMappingURL=checks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/checks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/first.js":
/*!****************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/grammar/first.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   first: () => (/* binding */ first),\n/* harmony export */   firstForBranching: () => (/* binding */ firstForBranching),\n/* harmony export */   firstForSequence: () => (/* binding */ firstForSequence),\n/* harmony export */   firstForTerminal: () => (/* binding */ firstForTerminal)\n/* harmony export */ });\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/uniq.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/map.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/flatten.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n\n\nfunction first(prod) {\n    /* istanbul ignore else */\n    if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.NonTerminal) {\n        // this could in theory cause infinite loops if\n        // (1) prod A refs prod B.\n        // (2) prod B refs prod A\n        // (3) AB can match the empty set\n        // in other words a cycle where everything is optional so the first will keep\n        // looking ahead for the next optional part and will never exit\n        // currently there is no safeguard for this unique edge case because\n        // (1) not sure a grammar in which this can happen is useful for anything (productive)\n        return first(prod.referencedRule);\n    }\n    else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Terminal) {\n        return firstForTerminal(prod);\n    }\n    else if ((0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.isSequenceProd)(prod)) {\n        return firstForSequence(prod);\n    }\n    else if ((0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.isBranchingProd)(prod)) {\n        return firstForBranching(prod);\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction firstForSequence(prod) {\n    let firstSet = [];\n    const seq = prod.definition;\n    let nextSubProdIdx = 0;\n    let hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n    let currSubProd;\n    // so we enter the loop at least once (if the definition is not empty\n    let isLastInnerProdOptional = true;\n    // scan a sequence until it's end or until we have found a NONE optional production in it\n    while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n        currSubProd = seq[nextSubProdIdx];\n        isLastInnerProdOptional = (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.isOptionalProd)(currSubProd);\n        firstSet = firstSet.concat(first(currSubProd));\n        nextSubProdIdx = nextSubProdIdx + 1;\n        hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n    }\n    return (0,lodash_es__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(firstSet);\n}\nfunction firstForBranching(prod) {\n    const allAlternativesFirsts = (0,lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(prod.definition, (innerProd) => {\n        return first(innerProd);\n    });\n    return (0,lodash_es__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(allAlternativesFirsts));\n}\nfunction firstForTerminal(terminal) {\n    return [terminal.terminalType];\n}\n//# sourceMappingURL=first.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2dyYW1tYXIvZmlyc3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBK0M7QUFDNEQ7QUFDcEc7QUFDUDtBQUNBLHdCQUF3Qix5REFBVztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixzREFBUTtBQUNyQztBQUNBO0FBQ0EsYUFBYSxnRUFBYztBQUMzQjtBQUNBO0FBQ0EsYUFBYSxpRUFBZTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGdFQUFjO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxxREFBSTtBQUNmO0FBQ087QUFDUCxrQ0FBa0MscURBQUc7QUFDckM7QUFDQSxLQUFLO0FBQ0wsV0FBVyxxREFBSSxDQUFDLHFEQUFPO0FBQ3ZCO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbGV4YW5kZXIubm9ibGUvYXBleC10b29sYm94L25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYi9zcmMvcGFyc2UvZ3JhbW1hci9maXJzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmbGF0dGVuLCBtYXAsIHVuaXEgfSBmcm9tIFwibG9kYXNoLWVzXCI7XG5pbXBvcnQgeyBpc0JyYW5jaGluZ1Byb2QsIGlzT3B0aW9uYWxQcm9kLCBpc1NlcXVlbmNlUHJvZCwgTm9uVGVybWluYWwsIFRlcm1pbmFsLCB9IGZyb20gXCJAY2hldnJvdGFpbi9nYXN0XCI7XG5leHBvcnQgZnVuY3Rpb24gZmlyc3QocHJvZCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2QgaW5zdGFuY2VvZiBOb25UZXJtaW5hbCkge1xuICAgICAgICAvLyB0aGlzIGNvdWxkIGluIHRoZW9yeSBjYXVzZSBpbmZpbml0ZSBsb29wcyBpZlxuICAgICAgICAvLyAoMSkgcHJvZCBBIHJlZnMgcHJvZCBCLlxuICAgICAgICAvLyAoMikgcHJvZCBCIHJlZnMgcHJvZCBBXG4gICAgICAgIC8vICgzKSBBQiBjYW4gbWF0Y2ggdGhlIGVtcHR5IHNldFxuICAgICAgICAvLyBpbiBvdGhlciB3b3JkcyBhIGN5Y2xlIHdoZXJlIGV2ZXJ5dGhpbmcgaXMgb3B0aW9uYWwgc28gdGhlIGZpcnN0IHdpbGwga2VlcFxuICAgICAgICAvLyBsb29raW5nIGFoZWFkIGZvciB0aGUgbmV4dCBvcHRpb25hbCBwYXJ0IGFuZCB3aWxsIG5ldmVyIGV4aXRcbiAgICAgICAgLy8gY3VycmVudGx5IHRoZXJlIGlzIG5vIHNhZmVndWFyZCBmb3IgdGhpcyB1bmlxdWUgZWRnZSBjYXNlIGJlY2F1c2VcbiAgICAgICAgLy8gKDEpIG5vdCBzdXJlIGEgZ3JhbW1hciBpbiB3aGljaCB0aGlzIGNhbiBoYXBwZW4gaXMgdXNlZnVsIGZvciBhbnl0aGluZyAocHJvZHVjdGl2ZSlcbiAgICAgICAgcmV0dXJuIGZpcnN0KHByb2QucmVmZXJlbmNlZFJ1bGUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChwcm9kIGluc3RhbmNlb2YgVGVybWluYWwpIHtcbiAgICAgICAgcmV0dXJuIGZpcnN0Rm9yVGVybWluYWwocHJvZCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzU2VxdWVuY2VQcm9kKHByb2QpKSB7XG4gICAgICAgIHJldHVybiBmaXJzdEZvclNlcXVlbmNlKHByb2QpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0JyYW5jaGluZ1Byb2QocHJvZCkpIHtcbiAgICAgICAgcmV0dXJuIGZpcnN0Rm9yQnJhbmNoaW5nKHByb2QpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJub24gZXhoYXVzdGl2ZSBtYXRjaFwiKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZmlyc3RGb3JTZXF1ZW5jZShwcm9kKSB7XG4gICAgbGV0IGZpcnN0U2V0ID0gW107XG4gICAgY29uc3Qgc2VxID0gcHJvZC5kZWZpbml0aW9uO1xuICAgIGxldCBuZXh0U3ViUHJvZElkeCA9IDA7XG4gICAgbGV0IGhhc0lubmVyUHJvZHNSZW1haW5pbmcgPSBzZXEubGVuZ3RoID4gbmV4dFN1YlByb2RJZHg7XG4gICAgbGV0IGN1cnJTdWJQcm9kO1xuICAgIC8vIHNvIHdlIGVudGVyIHRoZSBsb29wIGF0IGxlYXN0IG9uY2UgKGlmIHRoZSBkZWZpbml0aW9uIGlzIG5vdCBlbXB0eVxuICAgIGxldCBpc0xhc3RJbm5lclByb2RPcHRpb25hbCA9IHRydWU7XG4gICAgLy8gc2NhbiBhIHNlcXVlbmNlIHVudGlsIGl0J3MgZW5kIG9yIHVudGlsIHdlIGhhdmUgZm91bmQgYSBOT05FIG9wdGlvbmFsIHByb2R1Y3Rpb24gaW4gaXRcbiAgICB3aGlsZSAoaGFzSW5uZXJQcm9kc1JlbWFpbmluZyAmJiBpc0xhc3RJbm5lclByb2RPcHRpb25hbCkge1xuICAgICAgICBjdXJyU3ViUHJvZCA9IHNlcVtuZXh0U3ViUHJvZElkeF07XG4gICAgICAgIGlzTGFzdElubmVyUHJvZE9wdGlvbmFsID0gaXNPcHRpb25hbFByb2QoY3VyclN1YlByb2QpO1xuICAgICAgICBmaXJzdFNldCA9IGZpcnN0U2V0LmNvbmNhdChmaXJzdChjdXJyU3ViUHJvZCkpO1xuICAgICAgICBuZXh0U3ViUHJvZElkeCA9IG5leHRTdWJQcm9kSWR4ICsgMTtcbiAgICAgICAgaGFzSW5uZXJQcm9kc1JlbWFpbmluZyA9IHNlcS5sZW5ndGggPiBuZXh0U3ViUHJvZElkeDtcbiAgICB9XG4gICAgcmV0dXJuIHVuaXEoZmlyc3RTZXQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0Rm9yQnJhbmNoaW5nKHByb2QpIHtcbiAgICBjb25zdCBhbGxBbHRlcm5hdGl2ZXNGaXJzdHMgPSBtYXAocHJvZC5kZWZpbml0aW9uLCAoaW5uZXJQcm9kKSA9PiB7XG4gICAgICAgIHJldHVybiBmaXJzdChpbm5lclByb2QpO1xuICAgIH0pO1xuICAgIHJldHVybiB1bmlxKGZsYXR0ZW4oYWxsQWx0ZXJuYXRpdmVzRmlyc3RzKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZmlyc3RGb3JUZXJtaW5hbCh0ZXJtaW5hbCkge1xuICAgIHJldHVybiBbdGVybWluYWwudGVybWluYWxUeXBlXTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpcnN0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/first.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/follow.js":
/*!*****************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/grammar/follow.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResyncFollowsWalker: () => (/* binding */ ResyncFollowsWalker),\n/* harmony export */   buildBetweenProdsFollowPrefix: () => (/* binding */ buildBetweenProdsFollowPrefix),\n/* harmony export */   buildInProdFollowPrefix: () => (/* binding */ buildInProdFollowPrefix),\n/* harmony export */   computeAllProdsFollows: () => (/* binding */ computeAllProdsFollows)\n/* harmony export */ });\n/* harmony import */ var _rest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rest.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/rest.js\");\n/* harmony import */ var _first_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./first.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/first.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/assign.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/constants.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n\n\n\n\n\n// This ResyncFollowsWalker computes all of the follows required for RESYNC\n// (skipping reference production).\nclass ResyncFollowsWalker extends _rest_js__WEBPACK_IMPORTED_MODULE_0__.RestWalker {\n    constructor(topProd) {\n        super();\n        this.topProd = topProd;\n        this.follows = {};\n    }\n    startWalking() {\n        this.walk(this.topProd);\n        return this.follows;\n    }\n    walkTerminal(terminal, currRest, prevRest) {\n        // do nothing! just like in the public sector after 13:00\n    }\n    walkProdRef(refProd, currRest, prevRest) {\n        const followName = buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) +\n            this.topProd.name;\n        const fullRest = currRest.concat(prevRest);\n        const restProd = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__.Alternative({ definition: fullRest });\n        const t_in_topProd_follows = (0,_first_js__WEBPACK_IMPORTED_MODULE_1__.first)(restProd);\n        this.follows[followName] = t_in_topProd_follows;\n    }\n}\nfunction computeAllProdsFollows(topProductions) {\n    const reSyncFollows = {};\n    (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(topProductions, (topProd) => {\n        const currRefsFollow = new ResyncFollowsWalker(topProd).startWalking();\n        (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(reSyncFollows, currRefsFollow);\n    });\n    return reSyncFollows;\n}\nfunction buildBetweenProdsFollowPrefix(inner, occurenceInParent) {\n    return inner.name + occurenceInParent + _constants_js__WEBPACK_IMPORTED_MODULE_2__.IN;\n}\nfunction buildInProdFollowPrefix(terminal) {\n    const terminalName = terminal.terminalType.name;\n    return terminalName + terminal.idx + _constants_js__WEBPACK_IMPORTED_MODULE_2__.IN;\n}\n//# sourceMappingURL=follow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2dyYW1tYXIvZm9sbG93LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBdUM7QUFDSjtBQUNTO0FBQ1A7QUFDVTtBQUMvQztBQUNBO0FBQ08sa0NBQWtDLGdEQUFVO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHlEQUFXLEdBQUcsc0JBQXNCO0FBQ2pFLHFDQUFxQyxnREFBSztBQUMxQztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsSUFBSSxxREFBTztBQUNYO0FBQ0EsUUFBUSxxREFBTTtBQUNkLEtBQUs7QUFDTDtBQUNBO0FBQ087QUFDUCw0Q0FBNEMsNkNBQUU7QUFDOUM7QUFDTztBQUNQO0FBQ0EseUNBQXlDLDZDQUFFO0FBQzNDO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbGV4YW5kZXIubm9ibGUvYXBleC10b29sYm94L25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYi9zcmMvcGFyc2UvZ3JhbW1hci9mb2xsb3cuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVzdFdhbGtlciB9IGZyb20gXCIuL3Jlc3QuanNcIjtcbmltcG9ydCB7IGZpcnN0IH0gZnJvbSBcIi4vZmlyc3QuanNcIjtcbmltcG9ydCB7IGFzc2lnbiwgZm9yRWFjaCB9IGZyb20gXCJsb2Rhc2gtZXNcIjtcbmltcG9ydCB7IElOIH0gZnJvbSBcIi4uL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHsgQWx0ZXJuYXRpdmUgfSBmcm9tIFwiQGNoZXZyb3RhaW4vZ2FzdFwiO1xuLy8gVGhpcyBSZXN5bmNGb2xsb3dzV2Fsa2VyIGNvbXB1dGVzIGFsbCBvZiB0aGUgZm9sbG93cyByZXF1aXJlZCBmb3IgUkVTWU5DXG4vLyAoc2tpcHBpbmcgcmVmZXJlbmNlIHByb2R1Y3Rpb24pLlxuZXhwb3J0IGNsYXNzIFJlc3luY0ZvbGxvd3NXYWxrZXIgZXh0ZW5kcyBSZXN0V2Fsa2VyIHtcbiAgICBjb25zdHJ1Y3Rvcih0b3BQcm9kKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudG9wUHJvZCA9IHRvcFByb2Q7XG4gICAgICAgIHRoaXMuZm9sbG93cyA9IHt9O1xuICAgIH1cbiAgICBzdGFydFdhbGtpbmcoKSB7XG4gICAgICAgIHRoaXMud2Fsayh0aGlzLnRvcFByb2QpO1xuICAgICAgICByZXR1cm4gdGhpcy5mb2xsb3dzO1xuICAgIH1cbiAgICB3YWxrVGVybWluYWwodGVybWluYWwsIGN1cnJSZXN0LCBwcmV2UmVzdCkge1xuICAgICAgICAvLyBkbyBub3RoaW5nISBqdXN0IGxpa2UgaW4gdGhlIHB1YmxpYyBzZWN0b3IgYWZ0ZXIgMTM6MDBcbiAgICB9XG4gICAgd2Fsa1Byb2RSZWYocmVmUHJvZCwgY3VyclJlc3QsIHByZXZSZXN0KSB7XG4gICAgICAgIGNvbnN0IGZvbGxvd05hbWUgPSBidWlsZEJldHdlZW5Qcm9kc0ZvbGxvd1ByZWZpeChyZWZQcm9kLnJlZmVyZW5jZWRSdWxlLCByZWZQcm9kLmlkeCkgK1xuICAgICAgICAgICAgdGhpcy50b3BQcm9kLm5hbWU7XG4gICAgICAgIGNvbnN0IGZ1bGxSZXN0ID0gY3VyclJlc3QuY29uY2F0KHByZXZSZXN0KTtcbiAgICAgICAgY29uc3QgcmVzdFByb2QgPSBuZXcgQWx0ZXJuYXRpdmUoeyBkZWZpbml0aW9uOiBmdWxsUmVzdCB9KTtcbiAgICAgICAgY29uc3QgdF9pbl90b3BQcm9kX2ZvbGxvd3MgPSBmaXJzdChyZXN0UHJvZCk7XG4gICAgICAgIHRoaXMuZm9sbG93c1tmb2xsb3dOYW1lXSA9IHRfaW5fdG9wUHJvZF9mb2xsb3dzO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlQWxsUHJvZHNGb2xsb3dzKHRvcFByb2R1Y3Rpb25zKSB7XG4gICAgY29uc3QgcmVTeW5jRm9sbG93cyA9IHt9O1xuICAgIGZvckVhY2godG9wUHJvZHVjdGlvbnMsICh0b3BQcm9kKSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJSZWZzRm9sbG93ID0gbmV3IFJlc3luY0ZvbGxvd3NXYWxrZXIodG9wUHJvZCkuc3RhcnRXYWxraW5nKCk7XG4gICAgICAgIGFzc2lnbihyZVN5bmNGb2xsb3dzLCBjdXJyUmVmc0ZvbGxvdyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlU3luY0ZvbGxvd3M7XG59XG5leHBvcnQgZnVuY3Rpb24gYnVpbGRCZXR3ZWVuUHJvZHNGb2xsb3dQcmVmaXgoaW5uZXIsIG9jY3VyZW5jZUluUGFyZW50KSB7XG4gICAgcmV0dXJuIGlubmVyLm5hbWUgKyBvY2N1cmVuY2VJblBhcmVudCArIElOO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkSW5Qcm9kRm9sbG93UHJlZml4KHRlcm1pbmFsKSB7XG4gICAgY29uc3QgdGVybWluYWxOYW1lID0gdGVybWluYWwudGVybWluYWxUeXBlLm5hbWU7XG4gICAgcmV0dXJuIHRlcm1pbmFsTmFtZSArIHRlcm1pbmFsLmlkeCArIElOO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9sbG93LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/follow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/gast/gast_resolver_public.js":
/*!************************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/grammar/gast/gast_resolver_public.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveGrammar: () => (/* binding */ resolveGrammar),\n/* harmony export */   validateGrammar: () => (/* binding */ validateGrammar)\n/* harmony export */ });\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/defaults.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var _resolver_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resolver.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/resolver.js\");\n/* harmony import */ var _checks_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../checks.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/checks.js\");\n/* harmony import */ var _errors_public_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../errors_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/errors_public.js\");\n\n\n\n\nfunction resolveGrammar(options) {\n    const actualOptions = (0,lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(options, {\n        errMsgProvider: _errors_public_js__WEBPACK_IMPORTED_MODULE_2__.defaultGrammarResolverErrorProvider,\n    });\n    const topRulesTable = {};\n    (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(options.rules, (rule) => {\n        topRulesTable[rule.name] = rule;\n    });\n    return (0,_resolver_js__WEBPACK_IMPORTED_MODULE_0__.resolveGrammar)(topRulesTable, actualOptions.errMsgProvider);\n}\nfunction validateGrammar(options) {\n    options = (0,lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(options, {\n        errMsgProvider: _errors_public_js__WEBPACK_IMPORTED_MODULE_2__.defaultGrammarValidatorErrorProvider,\n    });\n    return (0,_checks_js__WEBPACK_IMPORTED_MODULE_1__.validateGrammar)(options.rules, options.tokenTypes, options.errMsgProvider, options.grammarName);\n}\n//# sourceMappingURL=gast_resolver_public.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2dyYW1tYXIvZ2FzdC9nYXN0X3Jlc29sdmVyX3B1YmxpYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQThDO0FBQ3VCO0FBQ0E7QUFDK0M7QUFDN0c7QUFDUCwwQkFBMEIscURBQVE7QUFDbEMsd0JBQXdCLGtGQUFtQztBQUMzRCxLQUFLO0FBQ0w7QUFDQSxJQUFJLHFEQUFPO0FBQ1g7QUFDQSxLQUFLO0FBQ0wsV0FBVyw0REFBaUI7QUFDNUI7QUFDTztBQUNQLGNBQWMscURBQVE7QUFDdEIsd0JBQXdCLG1GQUFvQztBQUM1RCxLQUFLO0FBQ0wsV0FBVywyREFBa0I7QUFDN0I7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2FsZXhhbmRlci5ub2JsZS9hcGV4LXRvb2xib3gvbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliL3NyYy9wYXJzZS9ncmFtbWFyL2dhc3QvZ2FzdF9yZXNvbHZlcl9wdWJsaWMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmYXVsdHMsIGZvckVhY2ggfSBmcm9tIFwibG9kYXNoLWVzXCI7XG5pbXBvcnQgeyByZXNvbHZlR3JhbW1hciBhcyBvcmdSZXNvbHZlR3JhbW1hciB9IGZyb20gXCIuLi9yZXNvbHZlci5qc1wiO1xuaW1wb3J0IHsgdmFsaWRhdGVHcmFtbWFyIGFzIG9yZ1ZhbGlkYXRlR3JhbW1hciB9IGZyb20gXCIuLi9jaGVja3MuanNcIjtcbmltcG9ydCB7IGRlZmF1bHRHcmFtbWFyUmVzb2x2ZXJFcnJvclByb3ZpZGVyLCBkZWZhdWx0R3JhbW1hclZhbGlkYXRvckVycm9yUHJvdmlkZXIsIH0gZnJvbSBcIi4uLy4uL2Vycm9yc19wdWJsaWMuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlR3JhbW1hcihvcHRpb25zKSB7XG4gICAgY29uc3QgYWN0dWFsT3B0aW9ucyA9IGRlZmF1bHRzKG9wdGlvbnMsIHtcbiAgICAgICAgZXJyTXNnUHJvdmlkZXI6IGRlZmF1bHRHcmFtbWFyUmVzb2x2ZXJFcnJvclByb3ZpZGVyLFxuICAgIH0pO1xuICAgIGNvbnN0IHRvcFJ1bGVzVGFibGUgPSB7fTtcbiAgICBmb3JFYWNoKG9wdGlvbnMucnVsZXMsIChydWxlKSA9PiB7XG4gICAgICAgIHRvcFJ1bGVzVGFibGVbcnVsZS5uYW1lXSA9IHJ1bGU7XG4gICAgfSk7XG4gICAgcmV0dXJuIG9yZ1Jlc29sdmVHcmFtbWFyKHRvcFJ1bGVzVGFibGUsIGFjdHVhbE9wdGlvbnMuZXJyTXNnUHJvdmlkZXIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlR3JhbW1hcihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IGRlZmF1bHRzKG9wdGlvbnMsIHtcbiAgICAgICAgZXJyTXNnUHJvdmlkZXI6IGRlZmF1bHRHcmFtbWFyVmFsaWRhdG9yRXJyb3JQcm92aWRlcixcbiAgICB9KTtcbiAgICByZXR1cm4gb3JnVmFsaWRhdGVHcmFtbWFyKG9wdGlvbnMucnVsZXMsIG9wdGlvbnMudG9rZW5UeXBlcywgb3B0aW9ucy5lcnJNc2dQcm92aWRlciwgb3B0aW9ucy5ncmFtbWFyTmFtZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nYXN0X3Jlc29sdmVyX3B1YmxpYy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/gast/gast_resolver_public.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/interpreter.js":
/*!**********************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/grammar/interpreter.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractNextPossibleTokensWalker: () => (/* binding */ AbstractNextPossibleTokensWalker),\n/* harmony export */   AbstractNextTerminalAfterProductionWalker: () => (/* binding */ AbstractNextTerminalAfterProductionWalker),\n/* harmony export */   NextAfterTokenWalker: () => (/* binding */ NextAfterTokenWalker),\n/* harmony export */   NextTerminalAfterAtLeastOneSepWalker: () => (/* binding */ NextTerminalAfterAtLeastOneSepWalker),\n/* harmony export */   NextTerminalAfterAtLeastOneWalker: () => (/* binding */ NextTerminalAfterAtLeastOneWalker),\n/* harmony export */   NextTerminalAfterManySepWalker: () => (/* binding */ NextTerminalAfterManySepWalker),\n/* harmony export */   NextTerminalAfterManyWalker: () => (/* binding */ NextTerminalAfterManyWalker),\n/* harmony export */   nextPossibleTokensAfter: () => (/* binding */ nextPossibleTokensAfter),\n/* harmony export */   possiblePathsFrom: () => (/* binding */ possiblePathsFrom)\n/* harmony export */ });\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/clone.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/head.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/drop.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/last.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/dropRight.js\");\n/* harmony import */ var _first_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./first.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/first.js\");\n/* harmony import */ var _rest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rest.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/rest.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n\n\n\n\nclass AbstractNextPossibleTokensWalker extends _rest_js__WEBPACK_IMPORTED_MODULE_1__.RestWalker {\n    constructor(topProd, path) {\n        super();\n        this.topProd = topProd;\n        this.path = path;\n        this.possibleTokTypes = [];\n        this.nextProductionName = \"\";\n        this.nextProductionOccurrence = 0;\n        this.found = false;\n        this.isAtEndOfPath = false;\n    }\n    startWalking() {\n        this.found = false;\n        if (this.path.ruleStack[0] !== this.topProd.name) {\n            throw Error(\"The path does not start with the walker's top Rule!\");\n        }\n        // immutable for the win\n        this.ruleStack = (0,lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this.path.ruleStack).reverse(); // intelij bug requires assertion\n        this.occurrenceStack = (0,lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n        // already verified that the first production is valid, we now seek the 2nd production\n        this.ruleStack.pop();\n        this.occurrenceStack.pop();\n        this.updateExpectedNext();\n        this.walk(this.topProd);\n        return this.possibleTokTypes;\n    }\n    walk(prod, prevRest = []) {\n        // stop scanning once we found the path\n        if (!this.found) {\n            super.walk(prod, prevRest);\n        }\n    }\n    walkProdRef(refProd, currRest, prevRest) {\n        // found the next production, need to keep walking in it\n        if (refProd.referencedRule.name === this.nextProductionName &&\n            refProd.idx === this.nextProductionOccurrence) {\n            const fullRest = currRest.concat(prevRest);\n            this.updateExpectedNext();\n            this.walk(refProd.referencedRule, fullRest);\n        }\n    }\n    updateExpectedNext() {\n        // need to consume the Terminal\n        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this.ruleStack)) {\n            // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n            // really seeking is the last Terminal...\n            this.nextProductionName = \"\";\n            this.nextProductionOccurrence = 0;\n            this.isAtEndOfPath = true;\n        }\n        else {\n            this.nextProductionName = this.ruleStack.pop();\n            this.nextProductionOccurrence = this.occurrenceStack.pop();\n        }\n    }\n}\nclass NextAfterTokenWalker extends AbstractNextPossibleTokensWalker {\n    constructor(topProd, path) {\n        super(topProd, path);\n        this.path = path;\n        this.nextTerminalName = \"\";\n        this.nextTerminalOccurrence = 0;\n        this.nextTerminalName = this.path.lastTok.name;\n        this.nextTerminalOccurrence = this.path.lastTokOccurrence;\n    }\n    walkTerminal(terminal, currRest, prevRest) {\n        if (this.isAtEndOfPath &&\n            terminal.terminalType.name === this.nextTerminalName &&\n            terminal.idx === this.nextTerminalOccurrence &&\n            !this.found) {\n            const fullRest = currRest.concat(prevRest);\n            const restProd = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Alternative({ definition: fullRest });\n            this.possibleTokTypes = (0,_first_js__WEBPACK_IMPORTED_MODULE_0__.first)(restProd);\n            this.found = true;\n        }\n    }\n}\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\nclass AbstractNextTerminalAfterProductionWalker extends _rest_js__WEBPACK_IMPORTED_MODULE_1__.RestWalker {\n    constructor(topRule, occurrence) {\n        super();\n        this.topRule = topRule;\n        this.occurrence = occurrence;\n        this.result = {\n            token: undefined,\n            occurrence: undefined,\n            isEndOfRule: undefined,\n        };\n    }\n    startWalking() {\n        this.walk(this.topRule);\n        return this.result;\n    }\n}\nclass NextTerminalAfterManyWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkMany(manyProd, currRest, prevRest) {\n        if (manyProd.idx === this.occurrence) {\n            const firstAfterMany = (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterMany === undefined;\n            if (firstAfterMany instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Terminal) {\n                this.result.token = firstAfterMany.terminalType;\n                this.result.occurrence = firstAfterMany.idx;\n            }\n        }\n        else {\n            super.walkMany(manyProd, currRest, prevRest);\n        }\n    }\n}\nclass NextTerminalAfterManySepWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkManySep(manySepProd, currRest, prevRest) {\n        if (manySepProd.idx === this.occurrence) {\n            const firstAfterManySep = (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterManySep === undefined;\n            if (firstAfterManySep instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Terminal) {\n                this.result.token = firstAfterManySep.terminalType;\n                this.result.occurrence = firstAfterManySep.idx;\n            }\n        }\n        else {\n            super.walkManySep(manySepProd, currRest, prevRest);\n        }\n    }\n}\nclass NextTerminalAfterAtLeastOneWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n        if (atLeastOneProd.idx === this.occurrence) {\n            const firstAfterAtLeastOne = (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n            if (firstAfterAtLeastOne instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Terminal) {\n                this.result.token = firstAfterAtLeastOne.terminalType;\n                this.result.occurrence = firstAfterAtLeastOne.idx;\n            }\n        }\n        else {\n            super.walkAtLeastOne(atLeastOneProd, currRest, prevRest);\n        }\n    }\n}\n// TODO: reduce code duplication in the AfterWalkers\nclass NextTerminalAfterAtLeastOneSepWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest) {\n        if (atleastOneSepProd.idx === this.occurrence) {\n            const firstAfterfirstAfterAtLeastOneSep = (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n            if (firstAfterfirstAfterAtLeastOneSep instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Terminal) {\n                this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n                this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n            }\n        }\n        else {\n            super.walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest);\n        }\n    }\n}\nfunction possiblePathsFrom(targetDef, maxLength, currPath = []) {\n    // avoid side effects\n    currPath = (0,lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(currPath);\n    let result = [];\n    let i = 0;\n    // TODO: avoid inner funcs\n    function remainingPathWith(nextDef) {\n        return nextDef.concat((0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(targetDef, i + 1));\n    }\n    // TODO: avoid inner funcs\n    function getAlternativesForProd(definition) {\n        const alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath);\n        return result.concat(alternatives);\n    }\n    /**\n     * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n     * following (rest) of the targetDef.\n     *\n     * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n     * the optional production.\n     */\n    while (currPath.length < maxLength && i < targetDef.length) {\n        const prod = targetDef[i];\n        /* istanbul ignore else */\n        if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Alternative) {\n            return getAlternativesForProd(prod.definition);\n        }\n        else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.NonTerminal) {\n            return getAlternativesForProd(prod.definition);\n        }\n        else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Option) {\n            result = getAlternativesForProd(prod.definition);\n        }\n        else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.RepetitionMandatory) {\n            const newDef = prod.definition.concat([\n                new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Repetition({\n                    definition: prod.definition,\n                }),\n            ]);\n            return getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.RepetitionMandatoryWithSeparator) {\n            const newDef = [\n                new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Alternative({ definition: prod.definition }),\n                new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Repetition({\n                    definition: [new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Terminal({ terminalType: prod.separator })].concat(prod.definition),\n                }),\n            ];\n            return getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.RepetitionWithSeparator) {\n            const newDef = prod.definition.concat([\n                new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Repetition({\n                    definition: [new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Terminal({ terminalType: prod.separator })].concat(prod.definition),\n                }),\n            ]);\n            result = getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Repetition) {\n            const newDef = prod.definition.concat([\n                new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Repetition({\n                    definition: prod.definition,\n                }),\n            ]);\n            result = getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Alternation) {\n            (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(prod.definition, (currAlt) => {\n                // TODO: this is a limited check for empty alternatives\n                //   It would prevent a common case of infinite loops during parser initialization.\n                //   However **in-directly** empty alternatives may still cause issues.\n                if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(currAlt.definition) === false) {\n                    result = getAlternativesForProd(currAlt.definition);\n                }\n            });\n            return result;\n        }\n        else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Terminal) {\n            currPath.push(prod.terminalType);\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n        i++;\n    }\n    result.push({\n        partialPath: currPath,\n        suffixDef: (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(targetDef, i),\n    });\n    return result;\n}\nfunction nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {\n    const EXIT_NON_TERMINAL = \"EXIT_NONE_TERMINAL\";\n    // to avoid creating a new Array each time.\n    const EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n    const EXIT_ALTERNATIVE = \"EXIT_ALTERNATIVE\";\n    let foundCompletePath = false;\n    const tokenVectorLength = tokenVector.length;\n    const minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n    const result = [];\n    const possiblePaths = [];\n    possiblePaths.push({\n        idx: -1,\n        def: initialDef,\n        ruleStack: [],\n        occurrenceStack: [],\n    });\n    while (!(0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(possiblePaths)) {\n        const currPath = possiblePaths.pop();\n        // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n        if (currPath === EXIT_ALTERNATIVE) {\n            if (foundCompletePath &&\n                (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(possiblePaths).idx <= minimalAlternativesIndex) {\n                // remove irrelevant alternative\n                possiblePaths.pop();\n            }\n            continue;\n        }\n        const currDef = currPath.def;\n        const currIdx = currPath.idx;\n        const currRuleStack = currPath.ruleStack;\n        const currOccurrenceStack = currPath.occurrenceStack;\n        // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(currDef)) {\n            continue;\n        }\n        const prod = currDef[0];\n        /* istanbul ignore else */\n        if (prod === EXIT_NON_TERMINAL) {\n            const nextPath = {\n                idx: currIdx,\n                def: (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef),\n                ruleStack: (0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(currRuleStack),\n                occurrenceStack: (0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(currOccurrenceStack),\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Terminal) {\n            /* istanbul ignore else */\n            if (currIdx < tokenVectorLength - 1) {\n                const nextIdx = currIdx + 1;\n                const actualToken = tokenVector[nextIdx];\n                if (tokMatcher(actualToken, prod.terminalType)) {\n                    const nextPath = {\n                        idx: nextIdx,\n                        def: (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef),\n                        ruleStack: currRuleStack,\n                        occurrenceStack: currOccurrenceStack,\n                    };\n                    possiblePaths.push(nextPath);\n                }\n                // end of the line\n            }\n            else if (currIdx === tokenVectorLength - 1) {\n                // IGNORE ABOVE ELSE\n                result.push({\n                    nextTokenType: prod.terminalType,\n                    nextTokenOccurrence: prod.idx,\n                    ruleStack: currRuleStack,\n                    occurrenceStack: currOccurrenceStack,\n                });\n                foundCompletePath = true;\n            }\n            else {\n                throw Error(\"non exhaustive match\");\n            }\n        }\n        else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.NonTerminal) {\n            const newRuleStack = (0,lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(currRuleStack);\n            newRuleStack.push(prod.nonTerminalName);\n            const newOccurrenceStack = (0,lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(currOccurrenceStack);\n            newOccurrenceStack.push(prod.idx);\n            const nextPath = {\n                idx: currIdx,\n                def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef)),\n                ruleStack: newRuleStack,\n                occurrenceStack: newOccurrenceStack,\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Option) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            const nextPathWithout = {\n                idx: currIdx,\n                def: (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPathWithout);\n            // required marker to avoid backtracking paths whose higher priority alternatives already matched\n            possiblePaths.push(EXIT_ALTERNATIVE);\n            const nextPathWith = {\n                idx: currIdx,\n                def: prod.definition.concat((0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef)),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPathWith);\n        }\n        else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.RepetitionMandatory) {\n            // TODO:(THE NEW operators here take a while...) (convert once?)\n            const secondIteration = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Repetition({\n                definition: prod.definition,\n                idx: prod.idx,\n            });\n            const nextDef = prod.definition.concat([secondIteration], (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef));\n            const nextPath = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.RepetitionMandatoryWithSeparator) {\n            // TODO:(THE NEW operators here take a while...) (convert once?)\n            const separatorGast = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Terminal({\n                terminalType: prod.separator,\n            });\n            const secondIteration = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Repetition({\n                definition: [separatorGast].concat(prod.definition),\n                idx: prod.idx,\n            });\n            const nextDef = prod.definition.concat([secondIteration], (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef));\n            const nextPath = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.RepetitionWithSeparator) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            const nextPathWithout = {\n                idx: currIdx,\n                def: (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPathWithout);\n            // required marker to avoid backtracking paths whose higher priority alternatives already matched\n            possiblePaths.push(EXIT_ALTERNATIVE);\n            const separatorGast = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Terminal({\n                terminalType: prod.separator,\n            });\n            const nthRepetition = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Repetition({\n                definition: [separatorGast].concat(prod.definition),\n                idx: prod.idx,\n            });\n            const nextDef = prod.definition.concat([nthRepetition], (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef));\n            const nextPathWith = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPathWith);\n        }\n        else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Repetition) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            const nextPathWithout = {\n                idx: currIdx,\n                def: (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPathWithout);\n            // required marker to avoid backtracking paths whose higher priority alternatives already matched\n            possiblePaths.push(EXIT_ALTERNATIVE);\n            // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n            const nthRepetition = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Repetition({\n                definition: prod.definition,\n                idx: prod.idx,\n            });\n            const nextDef = prod.definition.concat([nthRepetition], (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef));\n            const nextPathWith = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPathWith);\n        }\n        else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Alternation) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            for (let i = prod.definition.length - 1; i >= 0; i--) {\n                const currAlt = prod.definition[i];\n                const currAltPath = {\n                    idx: currIdx,\n                    def: currAlt.definition.concat((0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef)),\n                    ruleStack: currRuleStack,\n                    occurrenceStack: currOccurrenceStack,\n                };\n                possiblePaths.push(currAltPath);\n                possiblePaths.push(EXIT_ALTERNATIVE);\n            }\n        }\n        else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Alternative) {\n            possiblePaths.push({\n                idx: currIdx,\n                def: prod.definition.concat((0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef)),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            });\n        }\n        else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Rule) {\n            // last because we should only encounter at most a single one of these per invocation.\n            possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack));\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n    }\n    return result;\n}\nfunction expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {\n    const newRuleStack = (0,lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(currRuleStack);\n    newRuleStack.push(topRule.name);\n    const newCurrOccurrenceStack = (0,lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(currOccurrenceStack);\n    // top rule is always assumed to have been called with occurrence index 1\n    newCurrOccurrenceStack.push(1);\n    return {\n        idx: currIdx,\n        def: topRule.definition,\n        ruleStack: newRuleStack,\n        occurrenceStack: newCurrOccurrenceStack,\n    };\n}\n//# sourceMappingURL=interpreter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/interpreter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/keys.js":
/*!***************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/grammar/keys.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AT_LEAST_ONE_IDX: () => (/* binding */ AT_LEAST_ONE_IDX),\n/* harmony export */   AT_LEAST_ONE_SEP_IDX: () => (/* binding */ AT_LEAST_ONE_SEP_IDX),\n/* harmony export */   BITS_FOR_ALT_IDX: () => (/* binding */ BITS_FOR_ALT_IDX),\n/* harmony export */   BITS_FOR_METHOD_TYPE: () => (/* binding */ BITS_FOR_METHOD_TYPE),\n/* harmony export */   BITS_FOR_OCCURRENCE_IDX: () => (/* binding */ BITS_FOR_OCCURRENCE_IDX),\n/* harmony export */   BITS_FOR_RULE_IDX: () => (/* binding */ BITS_FOR_RULE_IDX),\n/* harmony export */   MANY_IDX: () => (/* binding */ MANY_IDX),\n/* harmony export */   MANY_SEP_IDX: () => (/* binding */ MANY_SEP_IDX),\n/* harmony export */   OPTION_IDX: () => (/* binding */ OPTION_IDX),\n/* harmony export */   OR_IDX: () => (/* binding */ OR_IDX),\n/* harmony export */   getKeyForAutomaticLookahead: () => (/* binding */ getKeyForAutomaticLookahead)\n/* harmony export */ });\n// Lookahead keys are 32Bit integers in the form\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n// XXXX -> Occurrence Index bitmap.\n// YYYY -> DSL Method Type bitmap.\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n// TTTTTTTTT -> alternation alternative index bitmap\nconst BITS_FOR_METHOD_TYPE = 4;\nconst BITS_FOR_OCCURRENCE_IDX = 8;\nconst BITS_FOR_RULE_IDX = 12;\n// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.\nconst BITS_FOR_ALT_IDX = 8;\n// short string used as part of mapping keys.\n// being short improves the performance when composing KEYS for maps out of these\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\nconst OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;\nconst OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;\nconst MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;\nconst AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;\nconst MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;\nconst AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;\n// this actually returns a number, but it is always used as a string (object prop key)\nfunction getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) {\n    return occurrence | dslMethodIdx | ruleIdx;\n}\nconst BITS_START_FOR_ALT_IDX = 32 - BITS_FOR_ALT_IDX;\n//# sourceMappingURL=keys.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2dyYW1tYXIva2V5cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ0E7QUFDQTtBQUNQO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDUDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbGV4YW5kZXIubm9ibGUvYXBleC10b29sYm94L25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYi9zcmMvcGFyc2UvZ3JhbW1hci9rZXlzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIExvb2thaGVhZCBrZXlzIGFyZSAzMkJpdCBpbnRlZ2VycyBpbiB0aGUgZm9ybVxuLy8gVFRUVFRUVFQtWlpaWlpaWlpaWlpaLVlZWVktWFhYWFhYWFhcbi8vIFhYWFggLT4gT2NjdXJyZW5jZSBJbmRleCBiaXRtYXAuXG4vLyBZWVlZIC0+IERTTCBNZXRob2QgVHlwZSBiaXRtYXAuXG4vLyBaWlpaWlpaWlpaWlpaWlogLT4gUnVsZSBzaG9ydCBJbmRleCBiaXRtYXAuXG4vLyBUVFRUVFRUVFQgLT4gYWx0ZXJuYXRpb24gYWx0ZXJuYXRpdmUgaW5kZXggYml0bWFwXG5leHBvcnQgY29uc3QgQklUU19GT1JfTUVUSE9EX1RZUEUgPSA0O1xuZXhwb3J0IGNvbnN0IEJJVFNfRk9SX09DQ1VSUkVOQ0VfSURYID0gODtcbmV4cG9ydCBjb25zdCBCSVRTX0ZPUl9SVUxFX0lEWCA9IDEyO1xuLy8gVE9ETzogdmFsaWRhdGlvbiwgdGhpcyBtZWFucyB0aGF0IHRoZXJlIG1heSBhdCBtb3N0IDJeOCAtLT4gMjU2IGFsdGVybmF0aXZlcyBmb3IgYW4gYWx0ZXJuYXRpb24uXG5leHBvcnQgY29uc3QgQklUU19GT1JfQUxUX0lEWCA9IDg7XG4vLyBzaG9ydCBzdHJpbmcgdXNlZCBhcyBwYXJ0IG9mIG1hcHBpbmcga2V5cy5cbi8vIGJlaW5nIHNob3J0IGltcHJvdmVzIHRoZSBwZXJmb3JtYW5jZSB3aGVuIGNvbXBvc2luZyBLRVlTIGZvciBtYXBzIG91dCBvZiB0aGVzZVxuLy8gVGhlIDUgLSA4IGJpdHMgKDE2IHBvc3NpYmxlIHZhbHVlcywgYXJlIHJlc2VydmVkIGZvciB0aGUgRFNMIG1ldGhvZCBpbmRpY2VzKVxuZXhwb3J0IGNvbnN0IE9SX0lEWCA9IDEgPDwgQklUU19GT1JfT0NDVVJSRU5DRV9JRFg7XG5leHBvcnQgY29uc3QgT1BUSU9OX0lEWCA9IDIgPDwgQklUU19GT1JfT0NDVVJSRU5DRV9JRFg7XG5leHBvcnQgY29uc3QgTUFOWV9JRFggPSAzIDw8IEJJVFNfRk9SX09DQ1VSUkVOQ0VfSURYO1xuZXhwb3J0IGNvbnN0IEFUX0xFQVNUX09ORV9JRFggPSA0IDw8IEJJVFNfRk9SX09DQ1VSUkVOQ0VfSURYO1xuZXhwb3J0IGNvbnN0IE1BTllfU0VQX0lEWCA9IDUgPDwgQklUU19GT1JfT0NDVVJSRU5DRV9JRFg7XG5leHBvcnQgY29uc3QgQVRfTEVBU1RfT05FX1NFUF9JRFggPSA2IDw8IEJJVFNfRk9SX09DQ1VSUkVOQ0VfSURYO1xuLy8gdGhpcyBhY3R1YWxseSByZXR1cm5zIGEgbnVtYmVyLCBidXQgaXQgaXMgYWx3YXlzIHVzZWQgYXMgYSBzdHJpbmcgKG9iamVjdCBwcm9wIGtleSlcbmV4cG9ydCBmdW5jdGlvbiBnZXRLZXlGb3JBdXRvbWF0aWNMb29rYWhlYWQocnVsZUlkeCwgZHNsTWV0aG9kSWR4LCBvY2N1cnJlbmNlKSB7XG4gICAgcmV0dXJuIG9jY3VycmVuY2UgfCBkc2xNZXRob2RJZHggfCBydWxlSWR4O1xufVxuY29uc3QgQklUU19TVEFSVF9GT1JfQUxUX0lEWCA9IDMyIC0gQklUU19GT1JfQUxUX0lEWDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtleXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/keys.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/llk_lookahead.js":
/*!************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/grammar/llk_lookahead.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LLkLookaheadStrategy: () => (/* binding */ LLkLookaheadStrategy)\n/* harmony export */ });\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/flatMap.js\");\n/* harmony import */ var _errors_public_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/errors_public.js\");\n/* harmony import */ var _parser_parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n/* harmony import */ var _checks_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./checks.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/checks.js\");\n/* harmony import */ var _lookahead_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lookahead.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/lookahead.js\");\n\n\n\n\n\nclass LLkLookaheadStrategy {\n    constructor(options) {\n        var _a;\n        this.maxLookahead =\n            (_a = options === null || options === void 0 ? void 0 : options.maxLookahead) !== null && _a !== void 0 ? _a : _parser_parser_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_PARSER_CONFIG.maxLookahead;\n    }\n    validate(options) {\n        const leftRecursionErrors = this.validateNoLeftRecursion(options.rules);\n        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(leftRecursionErrors)) {\n            const emptyAltErrors = this.validateEmptyOrAlternatives(options.rules);\n            const ambiguousAltsErrors = this.validateAmbiguousAlternationAlternatives(options.rules, this.maxLookahead);\n            const emptyRepetitionErrors = this.validateSomeNonEmptyLookaheadPath(options.rules, this.maxLookahead);\n            const allErrors = [\n                ...leftRecursionErrors,\n                ...emptyAltErrors,\n                ...ambiguousAltsErrors,\n                ...emptyRepetitionErrors,\n            ];\n            return allErrors;\n        }\n        return leftRecursionErrors;\n    }\n    validateNoLeftRecursion(rules) {\n        return (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(rules, (currTopRule) => (0,_checks_js__WEBPACK_IMPORTED_MODULE_2__.validateNoLeftRecursion)(currTopRule, currTopRule, _errors_public_js__WEBPACK_IMPORTED_MODULE_0__.defaultGrammarValidatorErrorProvider));\n    }\n    validateEmptyOrAlternatives(rules) {\n        return (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(rules, (currTopRule) => (0,_checks_js__WEBPACK_IMPORTED_MODULE_2__.validateEmptyOrAlternative)(currTopRule, _errors_public_js__WEBPACK_IMPORTED_MODULE_0__.defaultGrammarValidatorErrorProvider));\n    }\n    validateAmbiguousAlternationAlternatives(rules, maxLookahead) {\n        return (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(rules, (currTopRule) => (0,_checks_js__WEBPACK_IMPORTED_MODULE_2__.validateAmbiguousAlternationAlternatives)(currTopRule, maxLookahead, _errors_public_js__WEBPACK_IMPORTED_MODULE_0__.defaultGrammarValidatorErrorProvider));\n    }\n    validateSomeNonEmptyLookaheadPath(rules, maxLookahead) {\n        return (0,_checks_js__WEBPACK_IMPORTED_MODULE_2__.validateSomeNonEmptyLookaheadPath)(rules, maxLookahead, _errors_public_js__WEBPACK_IMPORTED_MODULE_0__.defaultGrammarValidatorErrorProvider);\n    }\n    buildLookaheadForAlternation(options) {\n        return (0,_lookahead_js__WEBPACK_IMPORTED_MODULE_3__.buildLookaheadFuncForOr)(options.prodOccurrence, options.rule, options.maxLookahead, options.hasPredicates, options.dynamicTokensEnabled, _lookahead_js__WEBPACK_IMPORTED_MODULE_3__.buildAlternativesLookAheadFunc);\n    }\n    buildLookaheadForOptional(options) {\n        return (0,_lookahead_js__WEBPACK_IMPORTED_MODULE_3__.buildLookaheadFuncForOptionalProd)(options.prodOccurrence, options.rule, options.maxLookahead, options.dynamicTokensEnabled, (0,_lookahead_js__WEBPACK_IMPORTED_MODULE_3__.getProdType)(options.prodType), _lookahead_js__WEBPACK_IMPORTED_MODULE_3__.buildSingleAlternativeLookaheadFunction);\n    }\n}\n//# sourceMappingURL=llk_lookahead.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2dyYW1tYXIvbGxrX2xvb2thaGVhZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQTZDO0FBQzhCO0FBQ2Y7QUFDb0c7QUFDbUI7QUFDNUs7QUFDUDtBQUNBO0FBQ0E7QUFDQSwySEFBMkgsb0VBQXFCO0FBQ2hKO0FBQ0E7QUFDQTtBQUNBLFlBQVkscURBQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUscURBQU8seUJBQXlCLG1FQUF1QiwyQkFBMkIsbUZBQW9DO0FBQ3JJO0FBQ0E7QUFDQSxlQUFlLHFEQUFPLHlCQUF5QixzRUFBMEIsY0FBYyxtRkFBb0M7QUFDM0g7QUFDQTtBQUNBLGVBQWUscURBQU8seUJBQXlCLG9GQUF3Qyw0QkFBNEIsbUZBQW9DO0FBQ3ZKO0FBQ0E7QUFDQSxlQUFlLDZFQUFpQyxzQkFBc0IsbUZBQW9DO0FBQzFHO0FBQ0E7QUFDQSxlQUFlLHNFQUF1QixrSEFBa0gseUVBQThCO0FBQ3RMO0FBQ0E7QUFDQSxlQUFlLGdGQUFpQywyRkFBMkYsMERBQVcsb0JBQW9CLGtGQUF1QztBQUNqTjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbGV4YW5kZXIubm9ibGUvYXBleC10b29sYm94L25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYi9zcmMvcGFyc2UvZ3JhbW1hci9sbGtfbG9va2FoZWFkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZsYXRNYXAsIGlzRW1wdHkgfSBmcm9tIFwibG9kYXNoLWVzXCI7XG5pbXBvcnQgeyBkZWZhdWx0R3JhbW1hclZhbGlkYXRvckVycm9yUHJvdmlkZXIgfSBmcm9tIFwiLi4vZXJyb3JzX3B1YmxpYy5qc1wiO1xuaW1wb3J0IHsgREVGQVVMVF9QQVJTRVJfQ09ORklHIH0gZnJvbSBcIi4uL3BhcnNlci9wYXJzZXIuanNcIjtcbmltcG9ydCB7IHZhbGlkYXRlQW1iaWd1b3VzQWx0ZXJuYXRpb25BbHRlcm5hdGl2ZXMsIHZhbGlkYXRlRW1wdHlPckFsdGVybmF0aXZlLCB2YWxpZGF0ZU5vTGVmdFJlY3Vyc2lvbiwgdmFsaWRhdGVTb21lTm9uRW1wdHlMb29rYWhlYWRQYXRoLCB9IGZyb20gXCIuL2NoZWNrcy5qc1wiO1xuaW1wb3J0IHsgYnVpbGRBbHRlcm5hdGl2ZXNMb29rQWhlYWRGdW5jLCBidWlsZExvb2thaGVhZEZ1bmNGb3JPcHRpb25hbFByb2QsIGJ1aWxkTG9va2FoZWFkRnVuY0Zvck9yLCBidWlsZFNpbmdsZUFsdGVybmF0aXZlTG9va2FoZWFkRnVuY3Rpb24sIGdldFByb2RUeXBlLCB9IGZyb20gXCIuL2xvb2thaGVhZC5qc1wiO1xuZXhwb3J0IGNsYXNzIExMa0xvb2thaGVhZFN0cmF0ZWd5IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5tYXhMb29rYWhlYWQgPVxuICAgICAgICAgICAgKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1heExvb2thaGVhZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogREVGQVVMVF9QQVJTRVJfQ09ORklHLm1heExvb2thaGVhZDtcbiAgICB9XG4gICAgdmFsaWRhdGUob3B0aW9ucykge1xuICAgICAgICBjb25zdCBsZWZ0UmVjdXJzaW9uRXJyb3JzID0gdGhpcy52YWxpZGF0ZU5vTGVmdFJlY3Vyc2lvbihvcHRpb25zLnJ1bGVzKTtcbiAgICAgICAgaWYgKGlzRW1wdHkobGVmdFJlY3Vyc2lvbkVycm9ycykpIHtcbiAgICAgICAgICAgIGNvbnN0IGVtcHR5QWx0RXJyb3JzID0gdGhpcy52YWxpZGF0ZUVtcHR5T3JBbHRlcm5hdGl2ZXMob3B0aW9ucy5ydWxlcyk7XG4gICAgICAgICAgICBjb25zdCBhbWJpZ3VvdXNBbHRzRXJyb3JzID0gdGhpcy52YWxpZGF0ZUFtYmlndW91c0FsdGVybmF0aW9uQWx0ZXJuYXRpdmVzKG9wdGlvbnMucnVsZXMsIHRoaXMubWF4TG9va2FoZWFkKTtcbiAgICAgICAgICAgIGNvbnN0IGVtcHR5UmVwZXRpdGlvbkVycm9ycyA9IHRoaXMudmFsaWRhdGVTb21lTm9uRW1wdHlMb29rYWhlYWRQYXRoKG9wdGlvbnMucnVsZXMsIHRoaXMubWF4TG9va2FoZWFkKTtcbiAgICAgICAgICAgIGNvbnN0IGFsbEVycm9ycyA9IFtcbiAgICAgICAgICAgICAgICAuLi5sZWZ0UmVjdXJzaW9uRXJyb3JzLFxuICAgICAgICAgICAgICAgIC4uLmVtcHR5QWx0RXJyb3JzLFxuICAgICAgICAgICAgICAgIC4uLmFtYmlndW91c0FsdHNFcnJvcnMsXG4gICAgICAgICAgICAgICAgLi4uZW1wdHlSZXBldGl0aW9uRXJyb3JzLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHJldHVybiBhbGxFcnJvcnM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxlZnRSZWN1cnNpb25FcnJvcnM7XG4gICAgfVxuICAgIHZhbGlkYXRlTm9MZWZ0UmVjdXJzaW9uKHJ1bGVzKSB7XG4gICAgICAgIHJldHVybiBmbGF0TWFwKHJ1bGVzLCAoY3VyclRvcFJ1bGUpID0+IHZhbGlkYXRlTm9MZWZ0UmVjdXJzaW9uKGN1cnJUb3BSdWxlLCBjdXJyVG9wUnVsZSwgZGVmYXVsdEdyYW1tYXJWYWxpZGF0b3JFcnJvclByb3ZpZGVyKSk7XG4gICAgfVxuICAgIHZhbGlkYXRlRW1wdHlPckFsdGVybmF0aXZlcyhydWxlcykge1xuICAgICAgICByZXR1cm4gZmxhdE1hcChydWxlcywgKGN1cnJUb3BSdWxlKSA9PiB2YWxpZGF0ZUVtcHR5T3JBbHRlcm5hdGl2ZShjdXJyVG9wUnVsZSwgZGVmYXVsdEdyYW1tYXJWYWxpZGF0b3JFcnJvclByb3ZpZGVyKSk7XG4gICAgfVxuICAgIHZhbGlkYXRlQW1iaWd1b3VzQWx0ZXJuYXRpb25BbHRlcm5hdGl2ZXMocnVsZXMsIG1heExvb2thaGVhZCkge1xuICAgICAgICByZXR1cm4gZmxhdE1hcChydWxlcywgKGN1cnJUb3BSdWxlKSA9PiB2YWxpZGF0ZUFtYmlndW91c0FsdGVybmF0aW9uQWx0ZXJuYXRpdmVzKGN1cnJUb3BSdWxlLCBtYXhMb29rYWhlYWQsIGRlZmF1bHRHcmFtbWFyVmFsaWRhdG9yRXJyb3JQcm92aWRlcikpO1xuICAgIH1cbiAgICB2YWxpZGF0ZVNvbWVOb25FbXB0eUxvb2thaGVhZFBhdGgocnVsZXMsIG1heExvb2thaGVhZCkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGVTb21lTm9uRW1wdHlMb29rYWhlYWRQYXRoKHJ1bGVzLCBtYXhMb29rYWhlYWQsIGRlZmF1bHRHcmFtbWFyVmFsaWRhdG9yRXJyb3JQcm92aWRlcik7XG4gICAgfVxuICAgIGJ1aWxkTG9va2FoZWFkRm9yQWx0ZXJuYXRpb24ob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gYnVpbGRMb29rYWhlYWRGdW5jRm9yT3Iob3B0aW9ucy5wcm9kT2NjdXJyZW5jZSwgb3B0aW9ucy5ydWxlLCBvcHRpb25zLm1heExvb2thaGVhZCwgb3B0aW9ucy5oYXNQcmVkaWNhdGVzLCBvcHRpb25zLmR5bmFtaWNUb2tlbnNFbmFibGVkLCBidWlsZEFsdGVybmF0aXZlc0xvb2tBaGVhZEZ1bmMpO1xuICAgIH1cbiAgICBidWlsZExvb2thaGVhZEZvck9wdGlvbmFsKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGJ1aWxkTG9va2FoZWFkRnVuY0Zvck9wdGlvbmFsUHJvZChvcHRpb25zLnByb2RPY2N1cnJlbmNlLCBvcHRpb25zLnJ1bGUsIG9wdGlvbnMubWF4TG9va2FoZWFkLCBvcHRpb25zLmR5bmFtaWNUb2tlbnNFbmFibGVkLCBnZXRQcm9kVHlwZShvcHRpb25zLnByb2RUeXBlKSwgYnVpbGRTaW5nbGVBbHRlcm5hdGl2ZUxvb2thaGVhZEZ1bmN0aW9uKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sbGtfbG9va2FoZWFkLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/llk_lookahead.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/lookahead.js":
/*!********************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/grammar/lookahead.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PROD_TYPE: () => (/* binding */ PROD_TYPE),\n/* harmony export */   areTokenCategoriesNotUsed: () => (/* binding */ areTokenCategoriesNotUsed),\n/* harmony export */   buildAlternativesLookAheadFunc: () => (/* binding */ buildAlternativesLookAheadFunc),\n/* harmony export */   buildLookaheadFuncForOptionalProd: () => (/* binding */ buildLookaheadFuncForOptionalProd),\n/* harmony export */   buildLookaheadFuncForOr: () => (/* binding */ buildLookaheadFuncForOr),\n/* harmony export */   buildSingleAlternativeLookaheadFunction: () => (/* binding */ buildSingleAlternativeLookaheadFunction),\n/* harmony export */   containsPath: () => (/* binding */ containsPath),\n/* harmony export */   getLookaheadPaths: () => (/* binding */ getLookaheadPaths),\n/* harmony export */   getLookaheadPathsForOptionalProd: () => (/* binding */ getLookaheadPathsForOptionalProd),\n/* harmony export */   getLookaheadPathsForOr: () => (/* binding */ getLookaheadPathsForOr),\n/* harmony export */   getProdType: () => (/* binding */ getProdType),\n/* harmony export */   isStrictPrefixOfPath: () => (/* binding */ isStrictPrefixOfPath),\n/* harmony export */   lookAheadSequenceFromAlternatives: () => (/* binding */ lookAheadSequenceFromAlternatives)\n/* harmony export */ });\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/every.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/map.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/flatten.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/reduce.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var _interpreter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interpreter.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/interpreter.js\");\n/* harmony import */ var _rest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rest.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/rest.js\");\n/* harmony import */ var _scan_tokens_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../scan/tokens.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n\n\n\n\n\nvar PROD_TYPE;\n(function (PROD_TYPE) {\n    PROD_TYPE[PROD_TYPE[\"OPTION\"] = 0] = \"OPTION\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION\"] = 1] = \"REPETITION\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY\"] = 2] = \"REPETITION_MANDATORY\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY_WITH_SEPARATOR\"] = 3] = \"REPETITION_MANDATORY_WITH_SEPARATOR\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION_WITH_SEPARATOR\"] = 4] = \"REPETITION_WITH_SEPARATOR\";\n    PROD_TYPE[PROD_TYPE[\"ALTERNATION\"] = 5] = \"ALTERNATION\";\n})(PROD_TYPE || (PROD_TYPE = {}));\nfunction getProdType(prod) {\n    /* istanbul ignore else */\n    if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__.Option || prod === \"Option\") {\n        return PROD_TYPE.OPTION;\n    }\n    else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__.Repetition || prod === \"Repetition\") {\n        return PROD_TYPE.REPETITION;\n    }\n    else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__.RepetitionMandatory ||\n        prod === \"RepetitionMandatory\") {\n        return PROD_TYPE.REPETITION_MANDATORY;\n    }\n    else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__.RepetitionMandatoryWithSeparator ||\n        prod === \"RepetitionMandatoryWithSeparator\") {\n        return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n    }\n    else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__.RepetitionWithSeparator ||\n        prod === \"RepetitionWithSeparator\") {\n        return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n    }\n    else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__.Alternation || prod === \"Alternation\") {\n        return PROD_TYPE.ALTERNATION;\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction getLookaheadPaths(options) {\n    const { occurrence, rule, prodType, maxLookahead } = options;\n    const type = getProdType(prodType);\n    if (type === PROD_TYPE.ALTERNATION) {\n        return getLookaheadPathsForOr(occurrence, rule, maxLookahead);\n    }\n    else {\n        return getLookaheadPathsForOptionalProd(occurrence, rule, type, maxLookahead);\n    }\n}\nfunction buildLookaheadFuncForOr(occurrence, ruleGrammar, maxLookahead, hasPredicates, dynamicTokensEnabled, laFuncBuilder) {\n    const lookAheadPaths = getLookaheadPathsForOr(occurrence, ruleGrammar, maxLookahead);\n    const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n        ? _scan_tokens_js__WEBPACK_IMPORTED_MODULE_2__.tokenStructuredMatcherNoCategories\n        : _scan_tokens_js__WEBPACK_IMPORTED_MODULE_2__.tokenStructuredMatcher;\n    return laFuncBuilder(lookAheadPaths, hasPredicates, tokenMatcher, dynamicTokensEnabled);\n}\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */\nfunction buildLookaheadFuncForOptionalProd(occurrence, ruleGrammar, k, dynamicTokensEnabled, prodType, lookaheadBuilder) {\n    const lookAheadPaths = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k);\n    const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n        ? _scan_tokens_js__WEBPACK_IMPORTED_MODULE_2__.tokenStructuredMatcherNoCategories\n        : _scan_tokens_js__WEBPACK_IMPORTED_MODULE_2__.tokenStructuredMatcher;\n    return lookaheadBuilder(lookAheadPaths[0], tokenMatcher, dynamicTokensEnabled);\n}\nfunction buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {\n    const numOfAlts = alts.length;\n    const areAllOneTokenLookahead = (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(alts, (currAlt) => {\n        return (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(currAlt, (currPath) => {\n            return currPath.length === 1;\n        });\n    });\n    // This version takes into account the predicates as well.\n    if (hasPredicates) {\n        /**\n         * @returns {number} - The chosen alternative index\n         */\n        return function (orAlts) {\n            // unfortunately the predicates must be extracted every single time\n            // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n            // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n            const predicates = (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(orAlts, (currAlt) => currAlt.GATE);\n            for (let t = 0; t < numOfAlts; t++) {\n                const currAlt = alts[t];\n                const currNumOfPaths = currAlt.length;\n                const currPredicate = predicates[t];\n                if (currPredicate !== undefined && currPredicate.call(this) === false) {\n                    // if the predicate does not match there is no point in checking the paths\n                    continue;\n                }\n                nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n                    const currPath = currAlt[j];\n                    const currPathLength = currPath.length;\n                    for (let i = 0; i < currPathLength; i++) {\n                        const nextToken = this.LA(i + 1);\n                        if (tokenMatcher(nextToken, currPath[i]) === false) {\n                            // mismatch in current path\n                            // try the next pth\n                            continue nextPath;\n                        }\n                    }\n                    // found a full path that matches.\n                    // this will also work for an empty ALT as the loop will be skipped\n                    return t;\n                }\n                // none of the paths for the current alternative matched\n                // try the next alternative\n            }\n            // none of the alternatives could be matched\n            return undefined;\n        };\n    }\n    else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n        // optimized (common) case of all the lookaheads paths requiring only\n        // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n        const singleTokenAlts = (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(alts, (currAlt) => {\n            return (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currAlt);\n        });\n        const choiceToAlt = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(singleTokenAlts, (result, currAlt, idx) => {\n            (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(currAlt, (currTokType) => {\n                if (!(0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(result, currTokType.tokenTypeIdx)) {\n                    result[currTokType.tokenTypeIdx] = idx;\n                }\n                (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(currTokType.categoryMatches, (currExtendingType) => {\n                    if (!(0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(result, currExtendingType)) {\n                        result[currExtendingType] = idx;\n                    }\n                });\n            });\n            return result;\n        }, {});\n        /**\n         * @returns {number} - The chosen alternative index\n         */\n        return function () {\n            const nextToken = this.LA(1);\n            return choiceToAlt[nextToken.tokenTypeIdx];\n        };\n    }\n    else {\n        // optimized lookahead without needing to check the predicates at all.\n        // this causes code duplication which is intentional to improve performance.\n        /**\n         * @returns {number} - The chosen alternative index\n         */\n        return function () {\n            for (let t = 0; t < numOfAlts; t++) {\n                const currAlt = alts[t];\n                const currNumOfPaths = currAlt.length;\n                nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n                    const currPath = currAlt[j];\n                    const currPathLength = currPath.length;\n                    for (let i = 0; i < currPathLength; i++) {\n                        const nextToken = this.LA(i + 1);\n                        if (tokenMatcher(nextToken, currPath[i]) === false) {\n                            // mismatch in current path\n                            // try the next pth\n                            continue nextPath;\n                        }\n                    }\n                    // found a full path that matches.\n                    // this will also work for an empty ALT as the loop will be skipped\n                    return t;\n                }\n                // none of the paths for the current alternative matched\n                // try the next alternative\n            }\n            // none of the alternatives could be matched\n            return undefined;\n        };\n    }\n}\nfunction buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled) {\n    const areAllOneTokenLookahead = (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(alt, (currPath) => {\n        return currPath.length === 1;\n    });\n    const numOfPaths = alt.length;\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead.\n    if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n        const singleTokensTypes = (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(alt);\n        if (singleTokensTypes.length === 1 &&\n            (0,lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(singleTokensTypes[0].categoryMatches)) {\n            const expectedTokenType = singleTokensTypes[0];\n            const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx;\n            return function () {\n                return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey;\n            };\n        }\n        else {\n            const choiceToAlt = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(singleTokensTypes, (result, currTokType, idx) => {\n                result[currTokType.tokenTypeIdx] = true;\n                (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(currTokType.categoryMatches, (currExtendingType) => {\n                    result[currExtendingType] = true;\n                });\n                return result;\n            }, []);\n            return function () {\n                const nextToken = this.LA(1);\n                return choiceToAlt[nextToken.tokenTypeIdx] === true;\n            };\n        }\n    }\n    else {\n        return function () {\n            nextPath: for (let j = 0; j < numOfPaths; j++) {\n                const currPath = alt[j];\n                const currPathLength = currPath.length;\n                for (let i = 0; i < currPathLength; i++) {\n                    const nextToken = this.LA(i + 1);\n                    if (tokenMatcher(nextToken, currPath[i]) === false) {\n                        // mismatch in current path\n                        // try the next pth\n                        continue nextPath;\n                    }\n                }\n                // found a full path that matches.\n                return true;\n            }\n            // none of the paths matched\n            return false;\n        };\n    }\n}\nclass RestDefinitionFinderWalker extends _rest_js__WEBPACK_IMPORTED_MODULE_1__.RestWalker {\n    constructor(topProd, targetOccurrence, targetProdType) {\n        super();\n        this.topProd = topProd;\n        this.targetOccurrence = targetOccurrence;\n        this.targetProdType = targetProdType;\n    }\n    startWalking() {\n        this.walk(this.topProd);\n        return this.restDef;\n    }\n    checkIsTarget(node, expectedProdType, currRest, prevRest) {\n        if (node.idx === this.targetOccurrence &&\n            this.targetProdType === expectedProdType) {\n            this.restDef = currRest.concat(prevRest);\n            return true;\n        }\n        // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n        return false;\n    }\n    walkOption(optionProd, currRest, prevRest) {\n        if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n            super.walkOption(optionProd, currRest, prevRest);\n        }\n    }\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n        if (!this.checkIsTarget(atLeastOneProd, PROD_TYPE.REPETITION_MANDATORY, currRest, prevRest)) {\n            super.walkOption(atLeastOneProd, currRest, prevRest);\n        }\n    }\n    walkAtLeastOneSep(atLeastOneSepProd, currRest, prevRest) {\n        if (!this.checkIsTarget(atLeastOneSepProd, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currRest, prevRest)) {\n            super.walkOption(atLeastOneSepProd, currRest, prevRest);\n        }\n    }\n    walkMany(manyProd, currRest, prevRest) {\n        if (!this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)) {\n            super.walkOption(manyProd, currRest, prevRest);\n        }\n    }\n    walkManySep(manySepProd, currRest, prevRest) {\n        if (!this.checkIsTarget(manySepProd, PROD_TYPE.REPETITION_WITH_SEPARATOR, currRest, prevRest)) {\n            super.walkOption(manySepProd, currRest, prevRest);\n        }\n    }\n}\n/**\n * Returns the definition of a target production in a top level level rule.\n */\nclass InsideDefinitionFinderVisitor extends _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__.GAstVisitor {\n    constructor(targetOccurrence, targetProdType, targetRef) {\n        super();\n        this.targetOccurrence = targetOccurrence;\n        this.targetProdType = targetProdType;\n        this.targetRef = targetRef;\n        this.result = [];\n    }\n    checkIsTarget(node, expectedProdName) {\n        if (node.idx === this.targetOccurrence &&\n            this.targetProdType === expectedProdName &&\n            (this.targetRef === undefined || node === this.targetRef)) {\n            this.result = node.definition;\n        }\n    }\n    visitOption(node) {\n        this.checkIsTarget(node, PROD_TYPE.OPTION);\n    }\n    visitRepetition(node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION);\n    }\n    visitRepetitionMandatory(node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n    }\n    visitRepetitionMandatoryWithSeparator(node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n    }\n    visitRepetitionWithSeparator(node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n    }\n    visitAlternation(node) {\n        this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n    }\n}\nfunction initializeArrayOfArrays(size) {\n    const result = new Array(size);\n    for (let i = 0; i < size; i++) {\n        result[i] = [];\n    }\n    return result;\n}\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */\nfunction pathToHashKeys(path) {\n    let keys = [\"\"];\n    for (let i = 0; i < path.length; i++) {\n        const tokType = path[i];\n        const longerKeys = [];\n        for (let j = 0; j < keys.length; j++) {\n            const currShorterKey = keys[j];\n            longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n            for (let t = 0; t < tokType.categoryMatches.length; t++) {\n                const categoriesKeySuffix = \"_\" + tokType.categoryMatches[t];\n                longerKeys.push(currShorterKey + categoriesKeySuffix);\n            }\n        }\n        keys = longerKeys;\n    }\n    return keys;\n}\n/**\n * Imperative style due to being called from a hot spot\n */\nfunction isUniquePrefixHash(altKnownPathsKeys, searchPathKeys, idx) {\n    for (let currAltIdx = 0; currAltIdx < altKnownPathsKeys.length; currAltIdx++) {\n        // We only want to test vs the other alternatives\n        if (currAltIdx === idx) {\n            continue;\n        }\n        const otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n        for (let searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n            const searchKey = searchPathKeys[searchIdx];\n            if (otherAltKnownPathsKeys[searchKey] === true) {\n                return false;\n            }\n        }\n    }\n    // None of the SearchPathKeys were found in any of the other alternatives\n    return true;\n}\nfunction lookAheadSequenceFromAlternatives(altsDefs, k) {\n    const partialAlts = (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(altsDefs, (currAlt) => (0,_interpreter_js__WEBPACK_IMPORTED_MODULE_0__.possiblePathsFrom)([currAlt], 1));\n    const finalResult = initializeArrayOfArrays(partialAlts.length);\n    const altsHashes = (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(partialAlts, (currAltPaths) => {\n        const dict = {};\n        (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(currAltPaths, (item) => {\n            const keys = pathToHashKeys(item.partialPath);\n            (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(keys, (currKey) => {\n                dict[currKey] = true;\n            });\n        });\n        return dict;\n    });\n    let newData = partialAlts;\n    // maxLookahead loop\n    for (let pathLength = 1; pathLength <= k; pathLength++) {\n        const currDataset = newData;\n        newData = initializeArrayOfArrays(currDataset.length);\n        // alternatives loop\n        for (let altIdx = 0; altIdx < currDataset.length; altIdx++) {\n            const currAltPathsAndSuffixes = currDataset[altIdx];\n            // paths in current alternative loop\n            for (let currPathIdx = 0; currPathIdx < currAltPathsAndSuffixes.length; currPathIdx++) {\n                const currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n                const suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n                const prefixKeys = pathToHashKeys(currPathPrefix);\n                const isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);\n                // End of the line for this path.\n                if (isUnique || (0,lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(suffixDef) || currPathPrefix.length === k) {\n                    const currAltResult = finalResult[altIdx];\n                    // TODO: Can we implement a containsPath using Maps/Dictionaries?\n                    if (containsPath(currAltResult, currPathPrefix) === false) {\n                        currAltResult.push(currPathPrefix);\n                        // Update all new  keys for the current path.\n                        for (let j = 0; j < prefixKeys.length; j++) {\n                            const currKey = prefixKeys[j];\n                            altsHashes[altIdx][currKey] = true;\n                        }\n                    }\n                }\n                // Expand longer paths\n                else {\n                    const newPartialPathsAndSuffixes = (0,_interpreter_js__WEBPACK_IMPORTED_MODULE_0__.possiblePathsFrom)(suffixDef, pathLength + 1, currPathPrefix);\n                    newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);\n                    // Update keys for new known paths\n                    (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(newPartialPathsAndSuffixes, (item) => {\n                        const prefixKeys = pathToHashKeys(item.partialPath);\n                        (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(prefixKeys, (key) => {\n                            altsHashes[altIdx][key] = true;\n                        });\n                    });\n                }\n            }\n        }\n    }\n    return finalResult;\n}\nfunction getLookaheadPathsForOr(occurrence, ruleGrammar, k, orProd) {\n    const visitor = new InsideDefinitionFinderVisitor(occurrence, PROD_TYPE.ALTERNATION, orProd);\n    ruleGrammar.accept(visitor);\n    return lookAheadSequenceFromAlternatives(visitor.result, k);\n}\nfunction getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k) {\n    const insideDefVisitor = new InsideDefinitionFinderVisitor(occurrence, prodType);\n    ruleGrammar.accept(insideDefVisitor);\n    const insideDef = insideDefVisitor.result;\n    const afterDefWalker = new RestDefinitionFinderWalker(ruleGrammar, occurrence, prodType);\n    const afterDef = afterDefWalker.startWalking();\n    const insideFlat = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__.Alternative({ definition: insideDef });\n    const afterFlat = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__.Alternative({ definition: afterDef });\n    return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n}\nfunction containsPath(alternative, searchPath) {\n    compareOtherPath: for (let i = 0; i < alternative.length; i++) {\n        const otherPath = alternative[i];\n        if (otherPath.length !== searchPath.length) {\n            continue;\n        }\n        for (let j = 0; j < otherPath.length; j++) {\n            const searchTok = searchPath[j];\n            const otherTok = otherPath[j];\n            const matchingTokens = searchTok === otherTok ||\n                otherTok.categoryMatchesMap[searchTok.tokenTypeIdx] !== undefined;\n            if (matchingTokens === false) {\n                continue compareOtherPath;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nfunction isStrictPrefixOfPath(prefix, other) {\n    return (prefix.length < other.length &&\n        (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(prefix, (tokType, idx) => {\n            const otherTokType = other[idx];\n            return (tokType === otherTokType ||\n                otherTokType.categoryMatchesMap[tokType.tokenTypeIdx]);\n        }));\n}\nfunction areTokenCategoriesNotUsed(lookAheadPaths) {\n    return (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(lookAheadPaths, (singleAltPaths) => (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(singleAltPaths, (singlePath) => (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(singlePath, (token) => (0,lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(token.categoryMatches))));\n}\n//# sourceMappingURL=lookahead.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/lookahead.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/resolver.js":
/*!*******************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/grammar/resolver.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GastRefResolverVisitor: () => (/* binding */ GastRefResolverVisitor),\n/* harmony export */   resolveGrammar: () => (/* binding */ resolveGrammar)\n/* harmony export */ });\n/* harmony import */ var _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/values.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n\n\n\nfunction resolveGrammar(topLevels, errMsgProvider) {\n    const refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);\n    refResolver.resolveRefs();\n    return refResolver.errors;\n}\nclass GastRefResolverVisitor extends _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.GAstVisitor {\n    constructor(nameToTopRule, errMsgProvider) {\n        super();\n        this.nameToTopRule = nameToTopRule;\n        this.errMsgProvider = errMsgProvider;\n        this.errors = [];\n    }\n    resolveRefs() {\n        (0,lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])((0,lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this.nameToTopRule), (prod) => {\n            this.currTopLevel = prod;\n            prod.accept(this);\n        });\n    }\n    visitNonTerminal(node) {\n        const ref = this.nameToTopRule[node.nonTerminalName];\n        if (!ref) {\n            const msg = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, node);\n            this.errors.push({\n                message: msg,\n                type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,\n                ruleName: this.currTopLevel.name,\n                unresolvedRefName: node.nonTerminalName,\n            });\n        }\n        else {\n            node.referencedRule = ref;\n        }\n    }\n}\n//# sourceMappingURL=resolver.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2dyYW1tYXIvcmVzb2x2ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWlFO0FBQ3JCO0FBQ0c7QUFDeEM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPLHFDQUFxQyx5REFBVztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEscURBQU8sQ0FBQyxxREFBTTtBQUN0QjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHdFQUF5QjtBQUMvQztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYWxleGFuZGVyLm5vYmxlL2FwZXgtdG9vbGJveC9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2dyYW1tYXIvcmVzb2x2ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFyc2VyRGVmaW5pdGlvbkVycm9yVHlwZSwgfSBmcm9tIFwiLi4vcGFyc2VyL3BhcnNlci5qc1wiO1xuaW1wb3J0IHsgZm9yRWFjaCwgdmFsdWVzIH0gZnJvbSBcImxvZGFzaC1lc1wiO1xuaW1wb3J0IHsgR0FzdFZpc2l0b3IgfSBmcm9tIFwiQGNoZXZyb3RhaW4vZ2FzdFwiO1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVHcmFtbWFyKHRvcExldmVscywgZXJyTXNnUHJvdmlkZXIpIHtcbiAgICBjb25zdCByZWZSZXNvbHZlciA9IG5ldyBHYXN0UmVmUmVzb2x2ZXJWaXNpdG9yKHRvcExldmVscywgZXJyTXNnUHJvdmlkZXIpO1xuICAgIHJlZlJlc29sdmVyLnJlc29sdmVSZWZzKCk7XG4gICAgcmV0dXJuIHJlZlJlc29sdmVyLmVycm9ycztcbn1cbmV4cG9ydCBjbGFzcyBHYXN0UmVmUmVzb2x2ZXJWaXNpdG9yIGV4dGVuZHMgR0FzdFZpc2l0b3Ige1xuICAgIGNvbnN0cnVjdG9yKG5hbWVUb1RvcFJ1bGUsIGVyck1zZ1Byb3ZpZGVyKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubmFtZVRvVG9wUnVsZSA9IG5hbWVUb1RvcFJ1bGU7XG4gICAgICAgIHRoaXMuZXJyTXNnUHJvdmlkZXIgPSBlcnJNc2dQcm92aWRlcjtcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBbXTtcbiAgICB9XG4gICAgcmVzb2x2ZVJlZnMoKSB7XG4gICAgICAgIGZvckVhY2godmFsdWVzKHRoaXMubmFtZVRvVG9wUnVsZSksIChwcm9kKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmN1cnJUb3BMZXZlbCA9IHByb2Q7XG4gICAgICAgICAgICBwcm9kLmFjY2VwdCh0aGlzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHZpc2l0Tm9uVGVybWluYWwobm9kZSkge1xuICAgICAgICBjb25zdCByZWYgPSB0aGlzLm5hbWVUb1RvcFJ1bGVbbm9kZS5ub25UZXJtaW5hbE5hbWVdO1xuICAgICAgICBpZiAoIXJlZikge1xuICAgICAgICAgICAgY29uc3QgbXNnID0gdGhpcy5lcnJNc2dQcm92aWRlci5idWlsZFJ1bGVOb3RGb3VuZEVycm9yKHRoaXMuY3VyclRvcExldmVsLCBub2RlKTtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1zZyxcbiAgICAgICAgICAgICAgICB0eXBlOiBQYXJzZXJEZWZpbml0aW9uRXJyb3JUeXBlLlVOUkVTT0xWRURfU1VCUlVMRV9SRUYsXG4gICAgICAgICAgICAgICAgcnVsZU5hbWU6IHRoaXMuY3VyclRvcExldmVsLm5hbWUsXG4gICAgICAgICAgICAgICAgdW5yZXNvbHZlZFJlZk5hbWU6IG5vZGUubm9uVGVybWluYWxOYW1lLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub2RlLnJlZmVyZW5jZWRSdWxlID0gcmVmO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzb2x2ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/resolver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/rest.js":
/*!***************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/grammar/rest.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RestWalker: () => (/* binding */ RestWalker)\n/* harmony export */ });\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/drop.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n\n\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\nclass RestWalker {\n    walk(prod, prevRest = []) {\n        (0,lodash_es__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(prod.definition, (subProd, index) => {\n            const currRest = (0,lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(prod.definition, index + 1);\n            /* istanbul ignore else */\n            if (subProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.NonTerminal) {\n                this.walkProdRef(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Terminal) {\n                this.walkTerminal(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Alternative) {\n                this.walkFlat(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Option) {\n                this.walkOption(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.RepetitionMandatory) {\n                this.walkAtLeastOne(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.RepetitionMandatoryWithSeparator) {\n                this.walkAtLeastOneSep(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.RepetitionWithSeparator) {\n                this.walkManySep(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Repetition) {\n                this.walkMany(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Alternation) {\n                this.walkOr(subProd, currRest, prevRest);\n            }\n            else {\n                throw Error(\"non exhaustive match\");\n            }\n        });\n    }\n    walkTerminal(terminal, currRest, prevRest) { }\n    walkProdRef(refProd, currRest, prevRest) { }\n    walkFlat(flatProd, currRest, prevRest) {\n        // ABCDEF => after the D the rest is EF\n        const fullOrRest = currRest.concat(prevRest);\n        this.walk(flatProd, fullOrRest);\n    }\n    walkOption(optionProd, currRest, prevRest) {\n        // ABC(DE)?F => after the (DE)? the rest is F\n        const fullOrRest = currRest.concat(prevRest);\n        this.walk(optionProd, fullOrRest);\n    }\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n        // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n        const fullAtLeastOneRest = [\n            new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Option({ definition: atLeastOneProd.definition }),\n        ].concat(currRest, prevRest);\n        this.walk(atLeastOneProd, fullAtLeastOneRest);\n    }\n    walkAtLeastOneSep(atLeastOneSepProd, currRest, prevRest) {\n        // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n        const fullAtLeastOneSepRest = restForRepetitionWithSeparator(atLeastOneSepProd, currRest, prevRest);\n        this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n    }\n    walkMany(manyProd, currRest, prevRest) {\n        // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n        const fullManyRest = [\n            new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Option({ definition: manyProd.definition }),\n        ].concat(currRest, prevRest);\n        this.walk(manyProd, fullManyRest);\n    }\n    walkManySep(manySepProd, currRest, prevRest) {\n        // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n        const fullManySepRest = restForRepetitionWithSeparator(manySepProd, currRest, prevRest);\n        this.walk(manySepProd, fullManySepRest);\n    }\n    walkOr(orProd, currRest, prevRest) {\n        // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n        const fullOrRest = currRest.concat(prevRest);\n        // walk all different alternatives\n        (0,lodash_es__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(orProd.definition, (alt) => {\n            // wrapping each alternative in a single definition wrapper\n            // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n            // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n            const prodWrapper = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Alternative({ definition: [alt] });\n            this.walk(prodWrapper, fullOrRest);\n        });\n    }\n}\nfunction restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {\n    const repSepRest = [\n        new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Option({\n            definition: [\n                new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Terminal({ terminalType: repSepProd.separator }),\n            ].concat(repSepProd.definition),\n        }),\n    ];\n    const fullRepSepRest = repSepRest.concat(currRest, prevRest);\n    return fullRepSepRest;\n}\n//# sourceMappingURL=rest.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2dyYW1tYXIvcmVzdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTBDO0FBQzhJO0FBQ3hMO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxRQUFRLHFEQUFPO0FBQ2YsNkJBQTZCLHFEQUFJO0FBQ2pDO0FBQ0EsbUNBQW1DLHlEQUFXO0FBQzlDO0FBQ0E7QUFDQSx3Q0FBd0Msc0RBQVE7QUFDaEQ7QUFDQTtBQUNBLHdDQUF3Qyx5REFBVztBQUNuRDtBQUNBO0FBQ0Esd0NBQXdDLG9EQUFNO0FBQzlDO0FBQ0E7QUFDQSx3Q0FBd0MsaUVBQW1CO0FBQzNEO0FBQ0E7QUFDQSx3Q0FBd0MsOEVBQWdDO0FBQ3hFO0FBQ0E7QUFDQSx3Q0FBd0MscUVBQXVCO0FBQy9EO0FBQ0E7QUFDQSx3Q0FBd0Msd0RBQVU7QUFDbEQ7QUFDQTtBQUNBLHdDQUF3Qyx5REFBVztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG9EQUFNLEdBQUcsdUNBQXVDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0RBQU0sR0FBRyxpQ0FBaUM7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxxREFBTztBQUNmO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyx5REFBVyxHQUFHLG1CQUFtQjtBQUNyRTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0RBQU07QUFDbEI7QUFDQSxvQkFBb0Isc0RBQVEsR0FBRyxvQ0FBb0M7QUFDbkU7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2FsZXhhbmRlci5ub2JsZS9hcGV4LXRvb2xib3gvbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliL3NyYy9wYXJzZS9ncmFtbWFyL3Jlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZHJvcCwgZm9yRWFjaCB9IGZyb20gXCJsb2Rhc2gtZXNcIjtcbmltcG9ydCB7IEFsdGVybmF0aW9uLCBBbHRlcm5hdGl2ZSwgTm9uVGVybWluYWwsIE9wdGlvbiwgUmVwZXRpdGlvbiwgUmVwZXRpdGlvbk1hbmRhdG9yeSwgUmVwZXRpdGlvbk1hbmRhdG9yeVdpdGhTZXBhcmF0b3IsIFJlcGV0aXRpb25XaXRoU2VwYXJhdG9yLCBUZXJtaW5hbCwgfSBmcm9tIFwiQGNoZXZyb3RhaW4vZ2FzdFwiO1xuLyoqXG4gKiAgQSBHcmFtbWFyIFdhbGtlciB0aGF0IGNvbXB1dGVzIHRoZSBcInJlbWFpbmluZ1wiIGdyYW1tYXIgXCJhZnRlclwiIGEgcHJvZHVjdGlvbnMgaW4gdGhlIGdyYW1tYXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZXN0V2Fsa2VyIHtcbiAgICB3YWxrKHByb2QsIHByZXZSZXN0ID0gW10pIHtcbiAgICAgICAgZm9yRWFjaChwcm9kLmRlZmluaXRpb24sIChzdWJQcm9kLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY3VyclJlc3QgPSBkcm9wKHByb2QuZGVmaW5pdGlvbiwgaW5kZXggKyAxKTtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgICBpZiAoc3ViUHJvZCBpbnN0YW5jZW9mIE5vblRlcm1pbmFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53YWxrUHJvZFJlZihzdWJQcm9kLCBjdXJyUmVzdCwgcHJldlJlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc3ViUHJvZCBpbnN0YW5jZW9mIFRlcm1pbmFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53YWxrVGVybWluYWwoc3ViUHJvZCwgY3VyclJlc3QsIHByZXZSZXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHN1YlByb2QgaW5zdGFuY2VvZiBBbHRlcm5hdGl2ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMud2Fsa0ZsYXQoc3ViUHJvZCwgY3VyclJlc3QsIHByZXZSZXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHN1YlByb2QgaW5zdGFuY2VvZiBPcHRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLndhbGtPcHRpb24oc3ViUHJvZCwgY3VyclJlc3QsIHByZXZSZXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHN1YlByb2QgaW5zdGFuY2VvZiBSZXBldGl0aW9uTWFuZGF0b3J5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy53YWxrQXRMZWFzdE9uZShzdWJQcm9kLCBjdXJyUmVzdCwgcHJldlJlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc3ViUHJvZCBpbnN0YW5jZW9mIFJlcGV0aXRpb25NYW5kYXRvcnlXaXRoU2VwYXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53YWxrQXRMZWFzdE9uZVNlcChzdWJQcm9kLCBjdXJyUmVzdCwgcHJldlJlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc3ViUHJvZCBpbnN0YW5jZW9mIFJlcGV0aXRpb25XaXRoU2VwYXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53YWxrTWFueVNlcChzdWJQcm9kLCBjdXJyUmVzdCwgcHJldlJlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc3ViUHJvZCBpbnN0YW5jZW9mIFJlcGV0aXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLndhbGtNYW55KHN1YlByb2QsIGN1cnJSZXN0LCBwcmV2UmVzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzdWJQcm9kIGluc3RhbmNlb2YgQWx0ZXJuYXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLndhbGtPcihzdWJQcm9kLCBjdXJyUmVzdCwgcHJldlJlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJub24gZXhoYXVzdGl2ZSBtYXRjaFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHdhbGtUZXJtaW5hbCh0ZXJtaW5hbCwgY3VyclJlc3QsIHByZXZSZXN0KSB7IH1cbiAgICB3YWxrUHJvZFJlZihyZWZQcm9kLCBjdXJyUmVzdCwgcHJldlJlc3QpIHsgfVxuICAgIHdhbGtGbGF0KGZsYXRQcm9kLCBjdXJyUmVzdCwgcHJldlJlc3QpIHtcbiAgICAgICAgLy8gQUJDREVGID0+IGFmdGVyIHRoZSBEIHRoZSByZXN0IGlzIEVGXG4gICAgICAgIGNvbnN0IGZ1bGxPclJlc3QgPSBjdXJyUmVzdC5jb25jYXQocHJldlJlc3QpO1xuICAgICAgICB0aGlzLndhbGsoZmxhdFByb2QsIGZ1bGxPclJlc3QpO1xuICAgIH1cbiAgICB3YWxrT3B0aW9uKG9wdGlvblByb2QsIGN1cnJSZXN0LCBwcmV2UmVzdCkge1xuICAgICAgICAvLyBBQkMoREUpP0YgPT4gYWZ0ZXIgdGhlIChERSk/IHRoZSByZXN0IGlzIEZcbiAgICAgICAgY29uc3QgZnVsbE9yUmVzdCA9IGN1cnJSZXN0LmNvbmNhdChwcmV2UmVzdCk7XG4gICAgICAgIHRoaXMud2FsayhvcHRpb25Qcm9kLCBmdWxsT3JSZXN0KTtcbiAgICB9XG4gICAgd2Fsa0F0TGVhc3RPbmUoYXRMZWFzdE9uZVByb2QsIGN1cnJSZXN0LCBwcmV2UmVzdCkge1xuICAgICAgICAvLyBBQkMoREUpK0YgPT4gYWZ0ZXIgdGhlIChERSkrIHRoZSByZXN0IGlzIChERSk/RlxuICAgICAgICBjb25zdCBmdWxsQXRMZWFzdE9uZVJlc3QgPSBbXG4gICAgICAgICAgICBuZXcgT3B0aW9uKHsgZGVmaW5pdGlvbjogYXRMZWFzdE9uZVByb2QuZGVmaW5pdGlvbiB9KSxcbiAgICAgICAgXS5jb25jYXQoY3VyclJlc3QsIHByZXZSZXN0KTtcbiAgICAgICAgdGhpcy53YWxrKGF0TGVhc3RPbmVQcm9kLCBmdWxsQXRMZWFzdE9uZVJlc3QpO1xuICAgIH1cbiAgICB3YWxrQXRMZWFzdE9uZVNlcChhdExlYXN0T25lU2VwUHJvZCwgY3VyclJlc3QsIHByZXZSZXN0KSB7XG4gICAgICAgIC8vIEFCQyBERSgsREUpKiBGID0+IGFmdGVyIHRoZSAoLERFKSsgdGhlIHJlc3QgaXMgKCxERSk/RlxuICAgICAgICBjb25zdCBmdWxsQXRMZWFzdE9uZVNlcFJlc3QgPSByZXN0Rm9yUmVwZXRpdGlvbldpdGhTZXBhcmF0b3IoYXRMZWFzdE9uZVNlcFByb2QsIGN1cnJSZXN0LCBwcmV2UmVzdCk7XG4gICAgICAgIHRoaXMud2FsayhhdExlYXN0T25lU2VwUHJvZCwgZnVsbEF0TGVhc3RPbmVTZXBSZXN0KTtcbiAgICB9XG4gICAgd2Fsa01hbnkobWFueVByb2QsIGN1cnJSZXN0LCBwcmV2UmVzdCkge1xuICAgICAgICAvLyBBQkMoREUpKkYgPT4gYWZ0ZXIgdGhlIChERSkqIHRoZSByZXN0IGlzIChERSk/RlxuICAgICAgICBjb25zdCBmdWxsTWFueVJlc3QgPSBbXG4gICAgICAgICAgICBuZXcgT3B0aW9uKHsgZGVmaW5pdGlvbjogbWFueVByb2QuZGVmaW5pdGlvbiB9KSxcbiAgICAgICAgXS5jb25jYXQoY3VyclJlc3QsIHByZXZSZXN0KTtcbiAgICAgICAgdGhpcy53YWxrKG1hbnlQcm9kLCBmdWxsTWFueVJlc3QpO1xuICAgIH1cbiAgICB3YWxrTWFueVNlcChtYW55U2VwUHJvZCwgY3VyclJlc3QsIHByZXZSZXN0KSB7XG4gICAgICAgIC8vIEFCQyAoREUoLERFKSopPyBGID0+IGFmdGVyIHRoZSAoLERFKSogdGhlIHJlc3QgaXMgKCxERSk/RlxuICAgICAgICBjb25zdCBmdWxsTWFueVNlcFJlc3QgPSByZXN0Rm9yUmVwZXRpdGlvbldpdGhTZXBhcmF0b3IobWFueVNlcFByb2QsIGN1cnJSZXN0LCBwcmV2UmVzdCk7XG4gICAgICAgIHRoaXMud2FsayhtYW55U2VwUHJvZCwgZnVsbE1hbnlTZXBSZXN0KTtcbiAgICB9XG4gICAgd2Fsa09yKG9yUHJvZCwgY3VyclJlc3QsIHByZXZSZXN0KSB7XG4gICAgICAgIC8vIEFCQyhEfEV8RilHID0+IHdoZW4gZmluZGluZyB0aGUgKER8RXxGKSB0aGUgcmVzdCBpcyBHXG4gICAgICAgIGNvbnN0IGZ1bGxPclJlc3QgPSBjdXJyUmVzdC5jb25jYXQocHJldlJlc3QpO1xuICAgICAgICAvLyB3YWxrIGFsbCBkaWZmZXJlbnQgYWx0ZXJuYXRpdmVzXG4gICAgICAgIGZvckVhY2gob3JQcm9kLmRlZmluaXRpb24sIChhbHQpID0+IHtcbiAgICAgICAgICAgIC8vIHdyYXBwaW5nIGVhY2ggYWx0ZXJuYXRpdmUgaW4gYSBzaW5nbGUgZGVmaW5pdGlvbiB3cmFwcGVyXG4gICAgICAgICAgICAvLyB0byBhdm9pZCBlcnJvcnMgaW4gY29tcHV0aW5nIHRoZSByZXN0IG9mIHRoYXQgYWx0ZXJuYXRpdmUgaW4gdGhlIGludm9jYXRpb24gdG8gY29tcHV0ZUluUHJvZEZvbGxvd3NcbiAgICAgICAgICAgIC8vIChvdGhlcndpc2UgZm9yIE9SKFthbHQxLGFsdDJdKSBhbHQyIHdpbGwgYmUgY29uc2lkZXJlZCBpbiAncmVzdCcgb2YgYWx0MVxuICAgICAgICAgICAgY29uc3QgcHJvZFdyYXBwZXIgPSBuZXcgQWx0ZXJuYXRpdmUoeyBkZWZpbml0aW9uOiBbYWx0XSB9KTtcbiAgICAgICAgICAgIHRoaXMud2Fsayhwcm9kV3JhcHBlciwgZnVsbE9yUmVzdCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlc3RGb3JSZXBldGl0aW9uV2l0aFNlcGFyYXRvcihyZXBTZXBQcm9kLCBjdXJyUmVzdCwgcHJldlJlc3QpIHtcbiAgICBjb25zdCByZXBTZXBSZXN0ID0gW1xuICAgICAgICBuZXcgT3B0aW9uKHtcbiAgICAgICAgICAgIGRlZmluaXRpb246IFtcbiAgICAgICAgICAgICAgICBuZXcgVGVybWluYWwoeyB0ZXJtaW5hbFR5cGU6IHJlcFNlcFByb2Quc2VwYXJhdG9yIH0pLFxuICAgICAgICAgICAgXS5jb25jYXQocmVwU2VwUHJvZC5kZWZpbml0aW9uKSxcbiAgICAgICAgfSksXG4gICAgXTtcbiAgICBjb25zdCBmdWxsUmVwU2VwUmVzdCA9IHJlcFNlcFJlc3QuY29uY2F0KGN1cnJSZXN0LCBwcmV2UmVzdCk7XG4gICAgcmV0dXJuIGZ1bGxSZXBTZXBSZXN0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzdC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/rest.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js":
/*!****************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/parser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CstParser: () => (/* binding */ CstParser),\n/* harmony export */   DEFAULT_PARSER_CONFIG: () => (/* binding */ DEFAULT_PARSER_CONFIG),\n/* harmony export */   DEFAULT_RULE_CONFIG: () => (/* binding */ DEFAULT_RULE_CONFIG),\n/* harmony export */   EMPTY_ALT: () => (/* binding */ EMPTY_ALT),\n/* harmony export */   END_OF_FILE: () => (/* binding */ END_OF_FILE),\n/* harmony export */   EmbeddedActionsParser: () => (/* binding */ EmbeddedActionsParser),\n/* harmony export */   Parser: () => (/* binding */ Parser),\n/* harmony export */   ParserDefinitionErrorType: () => (/* binding */ ParserDefinitionErrorType)\n/* harmony export */ });\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/values.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/map.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/clone.js\");\n/* harmony import */ var _chevrotain_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chevrotain/utils */ \"(ssr)/./node_modules/@chevrotain/utils/lib/src/api.js\");\n/* harmony import */ var _grammar_follow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grammar/follow.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/follow.js\");\n/* harmony import */ var _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../scan/tokens_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens_public.js\");\n/* harmony import */ var _errors_public_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../errors_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/errors_public.js\");\n/* harmony import */ var _grammar_gast_gast_resolver_public_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../grammar/gast/gast_resolver_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/gast/gast_resolver_public.js\");\n/* harmony import */ var _traits_recoverable_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./traits/recoverable.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/recoverable.js\");\n/* harmony import */ var _traits_looksahead_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./traits/looksahead.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/looksahead.js\");\n/* harmony import */ var _traits_tree_builder_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./traits/tree_builder.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/tree_builder.js\");\n/* harmony import */ var _traits_lexer_adapter_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./traits/lexer_adapter.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/lexer_adapter.js\");\n/* harmony import */ var _traits_recognizer_api_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./traits/recognizer_api.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/recognizer_api.js\");\n/* harmony import */ var _traits_recognizer_engine_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./traits/recognizer_engine.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/recognizer_engine.js\");\n/* harmony import */ var _traits_error_handler_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./traits/error_handler.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/error_handler.js\");\n/* harmony import */ var _traits_context_assist_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./traits/context_assist.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/context_assist.js\");\n/* harmony import */ var _traits_gast_recorder_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./traits/gast_recorder.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/gast_recorder.js\");\n/* harmony import */ var _traits_perf_tracer_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./traits/perf_tracer.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/perf_tracer.js\");\n/* harmony import */ var _utils_apply_mixins_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/apply_mixins.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/utils/apply_mixins.js\");\n/* harmony import */ var _grammar_checks_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../grammar/checks.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/checks.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst END_OF_FILE = (0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_2__.createTokenInstance)(_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_2__.EOF, \"\", NaN, NaN, NaN, NaN, NaN, NaN);\nObject.freeze(END_OF_FILE);\nconst DEFAULT_PARSER_CONFIG = Object.freeze({\n    recoveryEnabled: false,\n    maxLookahead: 3,\n    dynamicTokensEnabled: false,\n    outputCst: true,\n    errorMessageProvider: _errors_public_js__WEBPACK_IMPORTED_MODULE_3__.defaultParserErrorProvider,\n    nodeLocationTracking: \"none\",\n    traceInitPerf: false,\n    skipValidations: false,\n});\nconst DEFAULT_RULE_CONFIG = Object.freeze({\n    recoveryValueFunc: () => undefined,\n    resyncEnabled: true,\n});\nvar ParserDefinitionErrorType;\n(function (ParserDefinitionErrorType) {\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"INVALID_RULE_NAME\"] = 0] = \"INVALID_RULE_NAME\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"DUPLICATE_RULE_NAME\"] = 1] = \"DUPLICATE_RULE_NAME\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"INVALID_RULE_OVERRIDE\"] = 2] = \"INVALID_RULE_OVERRIDE\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"DUPLICATE_PRODUCTIONS\"] = 3] = \"DUPLICATE_PRODUCTIONS\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"UNRESOLVED_SUBRULE_REF\"] = 4] = \"UNRESOLVED_SUBRULE_REF\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"LEFT_RECURSION\"] = 5] = \"LEFT_RECURSION\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"NONE_LAST_EMPTY_ALT\"] = 6] = \"NONE_LAST_EMPTY_ALT\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"AMBIGUOUS_ALTS\"] = 7] = \"AMBIGUOUS_ALTS\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"CONFLICT_TOKENS_RULES_NAMESPACE\"] = 8] = \"CONFLICT_TOKENS_RULES_NAMESPACE\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"INVALID_TOKEN_NAME\"] = 9] = \"INVALID_TOKEN_NAME\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"NO_NON_EMPTY_LOOKAHEAD\"] = 10] = \"NO_NON_EMPTY_LOOKAHEAD\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"AMBIGUOUS_PREFIX_ALTS\"] = 11] = \"AMBIGUOUS_PREFIX_ALTS\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"TOO_MANY_ALTS\"] = 12] = \"TOO_MANY_ALTS\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"CUSTOM_LOOKAHEAD_VALIDATION\"] = 13] = \"CUSTOM_LOOKAHEAD_VALIDATION\";\n})(ParserDefinitionErrorType || (ParserDefinitionErrorType = {}));\nfunction EMPTY_ALT(value = undefined) {\n    return function () {\n        return value;\n    };\n}\nclass Parser {\n    /**\n     *  @deprecated use the **instance** method with the same name instead\n     */\n    static performSelfAnalysis(parserInstance) {\n        throw Error(\"The **static** `performSelfAnalysis` method has been deprecated.\" +\n            \"\\t\\nUse the **instance** method with the same name instead.\");\n    }\n    performSelfAnalysis() {\n        this.TRACE_INIT(\"performSelfAnalysis\", () => {\n            let defErrorsMsgs;\n            this.selfAnalysisDone = true;\n            const className = this.className;\n            this.TRACE_INIT(\"toFastProps\", () => {\n                // Without this voodoo magic the parser would be x3-x4 slower\n                // It seems it is better to invoke `toFastProperties` **before**\n                // Any manipulations of the `this` object done during the recording phase.\n                (0,_chevrotain_utils__WEBPACK_IMPORTED_MODULE_0__.toFastProperties)(this);\n            });\n            this.TRACE_INIT(\"Grammar Recording\", () => {\n                try {\n                    this.enableRecording();\n                    // Building the GAST\n                    (0,lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(this.definedRulesNames, (currRuleName) => {\n                        const wrappedRule = this[currRuleName];\n                        const originalGrammarAction = wrappedRule[\"originalGrammarAction\"];\n                        let recordedRuleGast;\n                        this.TRACE_INIT(`${currRuleName} Rule`, () => {\n                            recordedRuleGast = this.topLevelRuleRecord(currRuleName, originalGrammarAction);\n                        });\n                        this.gastProductionsCache[currRuleName] = recordedRuleGast;\n                    });\n                }\n                finally {\n                    this.disableRecording();\n                }\n            });\n            let resolverErrors = [];\n            this.TRACE_INIT(\"Grammar Resolving\", () => {\n                resolverErrors = (0,_grammar_gast_gast_resolver_public_js__WEBPACK_IMPORTED_MODULE_4__.resolveGrammar)({\n                    rules: (0,lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(this.gastProductionsCache),\n                });\n                this.definitionErrors = this.definitionErrors.concat(resolverErrors);\n            });\n            this.TRACE_INIT(\"Grammar Validations\", () => {\n                // only perform additional grammar validations IFF no resolving errors have occurred.\n                // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.\n                if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(resolverErrors) && this.skipValidations === false) {\n                    const validationErrors = (0,_grammar_gast_gast_resolver_public_js__WEBPACK_IMPORTED_MODULE_4__.validateGrammar)({\n                        rules: (0,lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(this.gastProductionsCache),\n                        tokenTypes: (0,lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(this.tokensMap),\n                        errMsgProvider: _errors_public_js__WEBPACK_IMPORTED_MODULE_3__.defaultGrammarValidatorErrorProvider,\n                        grammarName: className,\n                    });\n                    const lookaheadValidationErrors = (0,_grammar_checks_js__WEBPACK_IMPORTED_MODULE_16__.validateLookahead)({\n                        lookaheadStrategy: this.lookaheadStrategy,\n                        rules: (0,lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(this.gastProductionsCache),\n                        tokenTypes: (0,lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(this.tokensMap),\n                        grammarName: className,\n                    });\n                    this.definitionErrors = this.definitionErrors.concat(validationErrors, lookaheadValidationErrors);\n                }\n            });\n            // this analysis may fail if the grammar is not perfectly valid\n            if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(this.definitionErrors)) {\n                // The results of these computations are not needed unless error recovery is enabled.\n                if (this.recoveryEnabled) {\n                    this.TRACE_INIT(\"computeAllProdsFollows\", () => {\n                        const allFollows = (0,_grammar_follow_js__WEBPACK_IMPORTED_MODULE_1__.computeAllProdsFollows)((0,lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(this.gastProductionsCache));\n                        this.resyncFollows = allFollows;\n                    });\n                }\n                this.TRACE_INIT(\"ComputeLookaheadFunctions\", () => {\n                    var _a, _b;\n                    (_b = (_a = this.lookaheadStrategy).initialize) === null || _b === void 0 ? void 0 : _b.call(_a, {\n                        rules: (0,lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(this.gastProductionsCache),\n                    });\n                    this.preComputeLookaheadFunctions((0,lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(this.gastProductionsCache));\n                });\n            }\n            if (!Parser.DEFER_DEFINITION_ERRORS_HANDLING &&\n                !(0,lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(this.definitionErrors)) {\n                defErrorsMsgs = (0,lodash_es__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(this.definitionErrors, (defError) => defError.message);\n                throw new Error(`Parser Definition Errors detected:\\n ${defErrorsMsgs.join(\"\\n-------------------------------\\n\")}`);\n            }\n        });\n    }\n    constructor(tokenVocabulary, config) {\n        this.definitionErrors = [];\n        this.selfAnalysisDone = false;\n        const that = this;\n        that.initErrorHandler(config);\n        that.initLexerAdapter();\n        that.initLooksAhead(config);\n        that.initRecognizerEngine(tokenVocabulary, config);\n        that.initRecoverable(config);\n        that.initTreeBuilder(config);\n        that.initContentAssist();\n        that.initGastRecorder(config);\n        that.initPerformanceTracer(config);\n        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_21__[\"default\"])(config, \"ignoredIssues\")) {\n            throw new Error(\"The <ignoredIssues> IParserConfig property has been deprecated.\\n\\t\" +\n                \"Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\\n\\t\" +\n                \"See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\\n\\t\" +\n                \"For further details.\");\n        }\n        this.skipValidations = (0,lodash_es__WEBPACK_IMPORTED_MODULE_21__[\"default\"])(config, \"skipValidations\")\n            ? config.skipValidations // casting assumes the end user passing the correct type\n            : DEFAULT_PARSER_CONFIG.skipValidations;\n    }\n}\n// Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.\n// (normally during the parser's constructor).\n// This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,\n// for example: duplicate rule names, referencing an unresolved subrule, ect...\n// This flag should not be enabled during normal usage, it is used in special situations, for example when\n// needing to display the parser definition errors in some GUI(online playground).\nParser.DEFER_DEFINITION_ERRORS_HANDLING = false;\n(0,_utils_apply_mixins_js__WEBPACK_IMPORTED_MODULE_15__.applyMixins)(Parser, [\n    _traits_recoverable_js__WEBPACK_IMPORTED_MODULE_5__.Recoverable,\n    _traits_looksahead_js__WEBPACK_IMPORTED_MODULE_6__.LooksAhead,\n    _traits_tree_builder_js__WEBPACK_IMPORTED_MODULE_7__.TreeBuilder,\n    _traits_lexer_adapter_js__WEBPACK_IMPORTED_MODULE_8__.LexerAdapter,\n    _traits_recognizer_engine_js__WEBPACK_IMPORTED_MODULE_10__.RecognizerEngine,\n    _traits_recognizer_api_js__WEBPACK_IMPORTED_MODULE_9__.RecognizerApi,\n    _traits_error_handler_js__WEBPACK_IMPORTED_MODULE_11__.ErrorHandler,\n    _traits_context_assist_js__WEBPACK_IMPORTED_MODULE_12__.ContentAssist,\n    _traits_gast_recorder_js__WEBPACK_IMPORTED_MODULE_13__.GastRecorder,\n    _traits_perf_tracer_js__WEBPACK_IMPORTED_MODULE_14__.PerformanceTracer,\n]);\nclass CstParser extends Parser {\n    constructor(tokenVocabulary, config = DEFAULT_PARSER_CONFIG) {\n        const configClone = (0,lodash_es__WEBPACK_IMPORTED_MODULE_22__[\"default\"])(config);\n        configClone.outputCst = true;\n        super(tokenVocabulary, configClone);\n    }\n}\nclass EmbeddedActionsParser extends Parser {\n    constructor(tokenVocabulary, config = DEFAULT_PARSER_CONFIG) {\n        const configClone = (0,lodash_es__WEBPACK_IMPORTED_MODULE_22__[\"default\"])(config);\n        configClone.outputCst = false;\n        super(tokenVocabulary, configClone);\n    }\n}\n//# sourceMappingURL=parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/context_assist.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/traits/context_assist.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentAssist: () => (/* binding */ ContentAssist)\n/* harmony export */ });\n/* harmony import */ var _grammar_interpreter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../grammar/interpreter.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/interpreter.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isUndefined.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/head.js\");\n\n\nclass ContentAssist {\n    initContentAssist() { }\n    computeContentAssist(startRuleName, precedingInput) {\n        const startRuleGast = this.gastProductionsCache[startRuleName];\n        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(startRuleGast)) {\n            throw Error(`Rule ->${startRuleName}<- does not exist in this grammar.`);\n        }\n        return (0,_grammar_interpreter_js__WEBPACK_IMPORTED_MODULE_0__.nextPossibleTokensAfter)([startRuleGast], precedingInput, this.tokenMatcher, this.maxLookahead);\n    }\n    // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...\n    // TODO: should this be more explicitly part of the public API?\n    getNextPossibleTokenTypes(grammarPath) {\n        const topRuleName = (0,lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(grammarPath.ruleStack);\n        const gastProductions = this.getGAstProductions();\n        const topProduction = gastProductions[topRuleName];\n        const nextPossibleTokenTypes = new _grammar_interpreter_js__WEBPACK_IMPORTED_MODULE_0__.NextAfterTokenWalker(topProduction, grammarPath).startWalking();\n        return nextPossibleTokenTypes;\n    }\n}\n//# sourceMappingURL=context_assist.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL3BhcnNlci90cmFpdHMvY29udGV4dF9hc3Npc3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE4RjtBQUMvQztBQUN4QztBQUNQO0FBQ0E7QUFDQTtBQUNBLFlBQVkscURBQVc7QUFDdkIsa0NBQWtDLGNBQWM7QUFDaEQ7QUFDQSxlQUFlLGdGQUF1QjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixxREFBSztBQUNqQztBQUNBO0FBQ0EsMkNBQTJDLHlFQUFvQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2FsZXhhbmRlci5ub2JsZS9hcGV4LXRvb2xib3gvbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliL3NyYy9wYXJzZS9wYXJzZXIvdHJhaXRzL2NvbnRleHRfYXNzaXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRBZnRlclRva2VuV2Fsa2VyLCBuZXh0UG9zc2libGVUb2tlbnNBZnRlciwgfSBmcm9tIFwiLi4vLi4vZ3JhbW1hci9pbnRlcnByZXRlci5qc1wiO1xuaW1wb3J0IHsgZmlyc3QsIGlzVW5kZWZpbmVkIH0gZnJvbSBcImxvZGFzaC1lc1wiO1xuZXhwb3J0IGNsYXNzIENvbnRlbnRBc3Npc3Qge1xuICAgIGluaXRDb250ZW50QXNzaXN0KCkgeyB9XG4gICAgY29tcHV0ZUNvbnRlbnRBc3Npc3Qoc3RhcnRSdWxlTmFtZSwgcHJlY2VkaW5nSW5wdXQpIHtcbiAgICAgICAgY29uc3Qgc3RhcnRSdWxlR2FzdCA9IHRoaXMuZ2FzdFByb2R1Y3Rpb25zQ2FjaGVbc3RhcnRSdWxlTmFtZV07XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChzdGFydFJ1bGVHYXN0KSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFJ1bGUgLT4ke3N0YXJ0UnVsZU5hbWV9PC0gZG9lcyBub3QgZXhpc3QgaW4gdGhpcyBncmFtbWFyLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXh0UG9zc2libGVUb2tlbnNBZnRlcihbc3RhcnRSdWxlR2FzdF0sIHByZWNlZGluZ0lucHV0LCB0aGlzLnRva2VuTWF0Y2hlciwgdGhpcy5tYXhMb29rYWhlYWQpO1xuICAgIH1cbiAgICAvLyBUT0RPOiBzaG91bGQgdGhpcyBiZSBhIG1lbWJlciBtZXRob2Qgb3IgYSB1dGlsaXR5PyBpdCBkb2VzIG5vdCBoYXZlIGFueSBzdGF0ZSBvciB1c2FnZSBvZiAndGhpcycuLi5cbiAgICAvLyBUT0RPOiBzaG91bGQgdGhpcyBiZSBtb3JlIGV4cGxpY2l0bHkgcGFydCBvZiB0aGUgcHVibGljIEFQST9cbiAgICBnZXROZXh0UG9zc2libGVUb2tlblR5cGVzKGdyYW1tYXJQYXRoKSB7XG4gICAgICAgIGNvbnN0IHRvcFJ1bGVOYW1lID0gZmlyc3QoZ3JhbW1hclBhdGgucnVsZVN0YWNrKTtcbiAgICAgICAgY29uc3QgZ2FzdFByb2R1Y3Rpb25zID0gdGhpcy5nZXRHQXN0UHJvZHVjdGlvbnMoKTtcbiAgICAgICAgY29uc3QgdG9wUHJvZHVjdGlvbiA9IGdhc3RQcm9kdWN0aW9uc1t0b3BSdWxlTmFtZV07XG4gICAgICAgIGNvbnN0IG5leHRQb3NzaWJsZVRva2VuVHlwZXMgPSBuZXcgTmV4dEFmdGVyVG9rZW5XYWxrZXIodG9wUHJvZHVjdGlvbiwgZ3JhbW1hclBhdGgpLnN0YXJ0V2Fsa2luZygpO1xuICAgICAgICByZXR1cm4gbmV4dFBvc3NpYmxlVG9rZW5UeXBlcztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZXh0X2Fzc2lzdC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/context_assist.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/error_handler.js":
/*!******************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/traits/error_handler.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorHandler: () => (/* binding */ ErrorHandler)\n/* harmony export */ });\n/* harmony import */ var _exceptions_public_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../exceptions_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/exceptions_public.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/clone.js\");\n/* harmony import */ var _grammar_lookahead_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../grammar/lookahead.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/lookahead.js\");\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n\n\n\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nclass ErrorHandler {\n    initErrorHandler(config) {\n        this._errors = [];\n        this.errorMessageProvider = (0,lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(config, \"errorMessageProvider\")\n            ? config.errorMessageProvider // assumes end user provides the correct config value/type\n            : _parser_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PARSER_CONFIG.errorMessageProvider;\n    }\n    SAVE_ERROR(error) {\n        if ((0,_exceptions_public_js__WEBPACK_IMPORTED_MODULE_0__.isRecognitionException)(error)) {\n            error.context = {\n                ruleStack: this.getHumanReadableRuleStack(),\n                ruleOccurrenceStack: (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this.RULE_OCCURRENCE_STACK),\n            };\n            this._errors.push(error);\n            return error;\n        }\n        else {\n            throw Error(\"Trying to save an Error which is not a RecognitionException\");\n        }\n    }\n    get errors() {\n        return (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this._errors);\n    }\n    set errors(newErrors) {\n        this._errors = newErrors;\n    }\n    // TODO: consider caching the error message computed information\n    raiseEarlyExitException(occurrence, prodType, userDefinedErrMsg) {\n        const ruleName = this.getCurrRuleFullName();\n        const ruleGrammar = this.getGAstProductions()[ruleName];\n        const lookAheadPathsPerAlternative = (0,_grammar_lookahead_js__WEBPACK_IMPORTED_MODULE_1__.getLookaheadPathsForOptionalProd)(occurrence, ruleGrammar, prodType, this.maxLookahead);\n        const insideProdPaths = lookAheadPathsPerAlternative[0];\n        const actualTokens = [];\n        for (let i = 1; i <= this.maxLookahead; i++) {\n            actualTokens.push(this.LA(i));\n        }\n        const msg = this.errorMessageProvider.buildEarlyExitMessage({\n            expectedIterationPaths: insideProdPaths,\n            actual: actualTokens,\n            previous: this.LA(0),\n            customUserDescription: userDefinedErrMsg,\n            ruleName: ruleName,\n        });\n        throw this.SAVE_ERROR(new _exceptions_public_js__WEBPACK_IMPORTED_MODULE_0__.EarlyExitException(msg, this.LA(1), this.LA(0)));\n    }\n    // TODO: consider caching the error message computed information\n    raiseNoAltException(occurrence, errMsgTypes) {\n        const ruleName = this.getCurrRuleFullName();\n        const ruleGrammar = this.getGAstProductions()[ruleName];\n        // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n        const lookAheadPathsPerAlternative = (0,_grammar_lookahead_js__WEBPACK_IMPORTED_MODULE_1__.getLookaheadPathsForOr)(occurrence, ruleGrammar, this.maxLookahead);\n        const actualTokens = [];\n        for (let i = 1; i <= this.maxLookahead; i++) {\n            actualTokens.push(this.LA(i));\n        }\n        const previousToken = this.LA(0);\n        const errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n            expectedPathsPerAlt: lookAheadPathsPerAlternative,\n            actual: actualTokens,\n            previous: previousToken,\n            customUserDescription: errMsgTypes,\n            ruleName: this.getCurrRuleFullName(),\n        });\n        throw this.SAVE_ERROR(new _exceptions_public_js__WEBPACK_IMPORTED_MODULE_0__.NoViableAltException(errMsg, this.LA(1), previousToken));\n    }\n}\n//# sourceMappingURL=error_handler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL3BhcnNlci90cmFpdHMvZXJyb3JfaGFuZGxlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBK0c7QUFDeEU7QUFDZ0U7QUFDbEQ7QUFDckQ7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0Esb0NBQW9DLHFEQUFHO0FBQ3ZDO0FBQ0EsY0FBYyw2REFBcUI7QUFDbkM7QUFDQTtBQUNBLFlBQVksNkVBQXNCO0FBQ2xDO0FBQ0E7QUFDQSxxQ0FBcUMscURBQUs7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxxREFBSztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLHVGQUFnQztBQUM3RTtBQUNBO0FBQ0Esd0JBQXdCLHdCQUF3QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULGtDQUFrQyxxRUFBa0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLDZFQUFzQjtBQUNuRTtBQUNBLHdCQUF3Qix3QkFBd0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULGtDQUFrQyx1RUFBb0I7QUFDdEQ7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYWxleGFuZGVyLm5vYmxlL2FwZXgtdG9vbGJveC9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL3BhcnNlci90cmFpdHMvZXJyb3JfaGFuZGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFYXJseUV4aXRFeGNlcHRpb24sIGlzUmVjb2duaXRpb25FeGNlcHRpb24sIE5vVmlhYmxlQWx0RXhjZXB0aW9uLCB9IGZyb20gXCIuLi8uLi9leGNlcHRpb25zX3B1YmxpYy5qc1wiO1xuaW1wb3J0IHsgY2xvbmUsIGhhcyB9IGZyb20gXCJsb2Rhc2gtZXNcIjtcbmltcG9ydCB7IGdldExvb2thaGVhZFBhdGhzRm9yT3B0aW9uYWxQcm9kLCBnZXRMb29rYWhlYWRQYXRoc0Zvck9yLCB9IGZyb20gXCIuLi8uLi9ncmFtbWFyL2xvb2thaGVhZC5qc1wiO1xuaW1wb3J0IHsgREVGQVVMVF9QQVJTRVJfQ09ORklHIH0gZnJvbSBcIi4uL3BhcnNlci5qc1wiO1xuLyoqXG4gKiBUcmFpdCByZXNwb25zaWJsZSBmb3IgcnVudGltZSBwYXJzaW5nIGVycm9ycy5cbiAqL1xuZXhwb3J0IGNsYXNzIEVycm9ySGFuZGxlciB7XG4gICAgaW5pdEVycm9ySGFuZGxlcihjb25maWcpIHtcbiAgICAgICAgdGhpcy5fZXJyb3JzID0gW107XG4gICAgICAgIHRoaXMuZXJyb3JNZXNzYWdlUHJvdmlkZXIgPSBoYXMoY29uZmlnLCBcImVycm9yTWVzc2FnZVByb3ZpZGVyXCIpXG4gICAgICAgICAgICA/IGNvbmZpZy5lcnJvck1lc3NhZ2VQcm92aWRlciAvLyBhc3N1bWVzIGVuZCB1c2VyIHByb3ZpZGVzIHRoZSBjb3JyZWN0IGNvbmZpZyB2YWx1ZS90eXBlXG4gICAgICAgICAgICA6IERFRkFVTFRfUEFSU0VSX0NPTkZJRy5lcnJvck1lc3NhZ2VQcm92aWRlcjtcbiAgICB9XG4gICAgU0FWRV9FUlJPUihlcnJvcikge1xuICAgICAgICBpZiAoaXNSZWNvZ25pdGlvbkV4Y2VwdGlvbihlcnJvcikpIHtcbiAgICAgICAgICAgIGVycm9yLmNvbnRleHQgPSB7XG4gICAgICAgICAgICAgICAgcnVsZVN0YWNrOiB0aGlzLmdldEh1bWFuUmVhZGFibGVSdWxlU3RhY2soKSxcbiAgICAgICAgICAgICAgICBydWxlT2NjdXJyZW5jZVN0YWNrOiBjbG9uZSh0aGlzLlJVTEVfT0NDVVJSRU5DRV9TVEFDSyksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5fZXJyb3JzLnB1c2goZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJUcnlpbmcgdG8gc2F2ZSBhbiBFcnJvciB3aGljaCBpcyBub3QgYSBSZWNvZ25pdGlvbkV4Y2VwdGlvblwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgZXJyb3JzKCkge1xuICAgICAgICByZXR1cm4gY2xvbmUodGhpcy5fZXJyb3JzKTtcbiAgICB9XG4gICAgc2V0IGVycm9ycyhuZXdFcnJvcnMpIHtcbiAgICAgICAgdGhpcy5fZXJyb3JzID0gbmV3RXJyb3JzO1xuICAgIH1cbiAgICAvLyBUT0RPOiBjb25zaWRlciBjYWNoaW5nIHRoZSBlcnJvciBtZXNzYWdlIGNvbXB1dGVkIGluZm9ybWF0aW9uXG4gICAgcmFpc2VFYXJseUV4aXRFeGNlcHRpb24ob2NjdXJyZW5jZSwgcHJvZFR5cGUsIHVzZXJEZWZpbmVkRXJyTXNnKSB7XG4gICAgICAgIGNvbnN0IHJ1bGVOYW1lID0gdGhpcy5nZXRDdXJyUnVsZUZ1bGxOYW1lKCk7XG4gICAgICAgIGNvbnN0IHJ1bGVHcmFtbWFyID0gdGhpcy5nZXRHQXN0UHJvZHVjdGlvbnMoKVtydWxlTmFtZV07XG4gICAgICAgIGNvbnN0IGxvb2tBaGVhZFBhdGhzUGVyQWx0ZXJuYXRpdmUgPSBnZXRMb29rYWhlYWRQYXRoc0Zvck9wdGlvbmFsUHJvZChvY2N1cnJlbmNlLCBydWxlR3JhbW1hciwgcHJvZFR5cGUsIHRoaXMubWF4TG9va2FoZWFkKTtcbiAgICAgICAgY29uc3QgaW5zaWRlUHJvZFBhdGhzID0gbG9va0FoZWFkUGF0aHNQZXJBbHRlcm5hdGl2ZVswXTtcbiAgICAgICAgY29uc3QgYWN0dWFsVG9rZW5zID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHRoaXMubWF4TG9va2FoZWFkOyBpKyspIHtcbiAgICAgICAgICAgIGFjdHVhbFRva2Vucy5wdXNoKHRoaXMuTEEoaSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1zZyA9IHRoaXMuZXJyb3JNZXNzYWdlUHJvdmlkZXIuYnVpbGRFYXJseUV4aXRNZXNzYWdlKHtcbiAgICAgICAgICAgIGV4cGVjdGVkSXRlcmF0aW9uUGF0aHM6IGluc2lkZVByb2RQYXRocyxcbiAgICAgICAgICAgIGFjdHVhbDogYWN0dWFsVG9rZW5zLFxuICAgICAgICAgICAgcHJldmlvdXM6IHRoaXMuTEEoMCksXG4gICAgICAgICAgICBjdXN0b21Vc2VyRGVzY3JpcHRpb246IHVzZXJEZWZpbmVkRXJyTXNnLFxuICAgICAgICAgICAgcnVsZU5hbWU6IHJ1bGVOYW1lLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhyb3cgdGhpcy5TQVZFX0VSUk9SKG5ldyBFYXJseUV4aXRFeGNlcHRpb24obXNnLCB0aGlzLkxBKDEpLCB0aGlzLkxBKDApKSk7XG4gICAgfVxuICAgIC8vIFRPRE86IGNvbnNpZGVyIGNhY2hpbmcgdGhlIGVycm9yIG1lc3NhZ2UgY29tcHV0ZWQgaW5mb3JtYXRpb25cbiAgICByYWlzZU5vQWx0RXhjZXB0aW9uKG9jY3VycmVuY2UsIGVyck1zZ1R5cGVzKSB7XG4gICAgICAgIGNvbnN0IHJ1bGVOYW1lID0gdGhpcy5nZXRDdXJyUnVsZUZ1bGxOYW1lKCk7XG4gICAgICAgIGNvbnN0IHJ1bGVHcmFtbWFyID0gdGhpcy5nZXRHQXN0UHJvZHVjdGlvbnMoKVtydWxlTmFtZV07XG4gICAgICAgIC8vIFRPRE86IGdldExvb2thaGVhZFBhdGhzRm9yT3IgY2FuIGJlIHNsb3cgZm9yIGxhcmdlIGVub3VnaCBtYXhMb29rYWhlYWQgYW5kIGNlcnRhaW4gZ3JhbW1hcnMsIGNvbnNpZGVyIGNhY2hpbmcgP1xuICAgICAgICBjb25zdCBsb29rQWhlYWRQYXRoc1BlckFsdGVybmF0aXZlID0gZ2V0TG9va2FoZWFkUGF0aHNGb3JPcihvY2N1cnJlbmNlLCBydWxlR3JhbW1hciwgdGhpcy5tYXhMb29rYWhlYWQpO1xuICAgICAgICBjb25zdCBhY3R1YWxUb2tlbnMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gdGhpcy5tYXhMb29rYWhlYWQ7IGkrKykge1xuICAgICAgICAgICAgYWN0dWFsVG9rZW5zLnB1c2godGhpcy5MQShpKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJldmlvdXNUb2tlbiA9IHRoaXMuTEEoMCk7XG4gICAgICAgIGNvbnN0IGVyck1zZyA9IHRoaXMuZXJyb3JNZXNzYWdlUHJvdmlkZXIuYnVpbGROb1ZpYWJsZUFsdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgZXhwZWN0ZWRQYXRoc1BlckFsdDogbG9va0FoZWFkUGF0aHNQZXJBbHRlcm5hdGl2ZSxcbiAgICAgICAgICAgIGFjdHVhbDogYWN0dWFsVG9rZW5zLFxuICAgICAgICAgICAgcHJldmlvdXM6IHByZXZpb3VzVG9rZW4sXG4gICAgICAgICAgICBjdXN0b21Vc2VyRGVzY3JpcHRpb246IGVyck1zZ1R5cGVzLFxuICAgICAgICAgICAgcnVsZU5hbWU6IHRoaXMuZ2V0Q3VyclJ1bGVGdWxsTmFtZSgpLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhyb3cgdGhpcy5TQVZFX0VSUk9SKG5ldyBOb1ZpYWJsZUFsdEV4Y2VwdGlvbihlcnJNc2csIHRoaXMuTEEoMSksIHByZXZpb3VzVG9rZW4pKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcl9oYW5kbGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/error_handler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/gast_recorder.js":
/*!******************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/traits/gast_recorder.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GastRecorder: () => (/* binding */ GastRecorder)\n/* harmony export */ });\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/last.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isFunction.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isArray.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/some.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n/* harmony import */ var _scan_lexer_public_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../scan/lexer_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/lexer_public.js\");\n/* harmony import */ var _scan_tokens_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../scan/tokens.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens.js\");\n/* harmony import */ var _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../scan/tokens_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens_public.js\");\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n/* harmony import */ var _grammar_keys_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../grammar/keys.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/keys.js\");\n\n\n\n\n\n\n\nconst RECORDING_NULL_OBJECT = {\n    description: \"This Object indicates the Parser is during Recording Phase\",\n};\nObject.freeze(RECORDING_NULL_OBJECT);\nconst HANDLE_SEPARATOR = true;\nconst MAX_METHOD_IDX = Math.pow(2, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_5__.BITS_FOR_OCCURRENCE_IDX) - 1;\nconst RFT = (0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_3__.createToken)({ name: \"RECORDING_PHASE_TOKEN\", pattern: _scan_lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.Lexer.NA });\n(0,_scan_tokens_js__WEBPACK_IMPORTED_MODULE_2__.augmentTokenTypes)([RFT]);\nconst RECORDING_PHASE_TOKEN = (0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_3__.createTokenInstance)(RFT, \"This IToken indicates the Parser is in Recording Phase\\n\\t\" +\n    \"\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\", \n// Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n// cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n-1, -1, -1, -1, -1, -1);\nObject.freeze(RECORDING_PHASE_TOKEN);\nconst RECORDING_PHASE_CSTNODE = {\n    name: \"This CSTNode indicates the Parser is in Recording Phase\\n\\t\" +\n        \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n    children: {},\n};\n/**\n * This trait handles the creation of the GAST structure for Chevrotain Grammars\n */\nclass GastRecorder {\n    initGastRecorder(config) {\n        this.recordingProdStack = [];\n        this.RECORDING_PHASE = false;\n    }\n    enableRecording() {\n        this.RECORDING_PHASE = true;\n        this.TRACE_INIT(\"Enable Recording\", () => {\n            /**\n             * Warning Dark Voodoo Magic upcoming!\n             * We are \"replacing\" the public parsing DSL methods API\n             * With **new** alternative implementations on the Parser **instance**\n             *\n             * So far this is the only way I've found to avoid performance regressions during parsing time.\n             * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\n             *   implementations directly instead.\n             */\n            for (let i = 0; i < 10; i++) {\n                const idx = i > 0 ? i : \"\";\n                this[`CONSUME${idx}`] = function (arg1, arg2) {\n                    return this.consumeInternalRecord(arg1, i, arg2);\n                };\n                this[`SUBRULE${idx}`] = function (arg1, arg2) {\n                    return this.subruleInternalRecord(arg1, i, arg2);\n                };\n                this[`OPTION${idx}`] = function (arg1) {\n                    return this.optionInternalRecord(arg1, i);\n                };\n                this[`OR${idx}`] = function (arg1) {\n                    return this.orInternalRecord(arg1, i);\n                };\n                this[`MANY${idx}`] = function (arg1) {\n                    this.manyInternalRecord(i, arg1);\n                };\n                this[`MANY_SEP${idx}`] = function (arg1) {\n                    this.manySepFirstInternalRecord(i, arg1);\n                };\n                this[`AT_LEAST_ONE${idx}`] = function (arg1) {\n                    this.atLeastOneInternalRecord(i, arg1);\n                };\n                this[`AT_LEAST_ONE_SEP${idx}`] = function (arg1) {\n                    this.atLeastOneSepFirstInternalRecord(i, arg1);\n                };\n            }\n            // DSL methods with the idx(suffix) as an argument\n            this[`consume`] = function (idx, arg1, arg2) {\n                return this.consumeInternalRecord(arg1, idx, arg2);\n            };\n            this[`subrule`] = function (idx, arg1, arg2) {\n                return this.subruleInternalRecord(arg1, idx, arg2);\n            };\n            this[`option`] = function (idx, arg1) {\n                return this.optionInternalRecord(arg1, idx);\n            };\n            this[`or`] = function (idx, arg1) {\n                return this.orInternalRecord(arg1, idx);\n            };\n            this[`many`] = function (idx, arg1) {\n                this.manyInternalRecord(idx, arg1);\n            };\n            this[`atLeastOne`] = function (idx, arg1) {\n                this.atLeastOneInternalRecord(idx, arg1);\n            };\n            this.ACTION = this.ACTION_RECORD;\n            this.BACKTRACK = this.BACKTRACK_RECORD;\n            this.LA = this.LA_RECORD;\n        });\n    }\n    disableRecording() {\n        this.RECORDING_PHASE = false;\n        // By deleting these **instance** properties, any future invocation\n        // will be deferred to the original methods on the **prototype** object\n        // This seems to get rid of any incorrect optimizations that V8 may\n        // do during the recording phase.\n        this.TRACE_INIT(\"Deleting Recording methods\", () => {\n            const that = this;\n            for (let i = 0; i < 10; i++) {\n                const idx = i > 0 ? i : \"\";\n                delete that[`CONSUME${idx}`];\n                delete that[`SUBRULE${idx}`];\n                delete that[`OPTION${idx}`];\n                delete that[`OR${idx}`];\n                delete that[`MANY${idx}`];\n                delete that[`MANY_SEP${idx}`];\n                delete that[`AT_LEAST_ONE${idx}`];\n                delete that[`AT_LEAST_ONE_SEP${idx}`];\n            }\n            delete that[`consume`];\n            delete that[`subrule`];\n            delete that[`option`];\n            delete that[`or`];\n            delete that[`many`];\n            delete that[`atLeastOne`];\n            delete that.ACTION;\n            delete that.BACKTRACK;\n            delete that.LA;\n        });\n    }\n    //   Parser methods are called inside an ACTION?\n    //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n    // @ts-expect-error -- noop place holder\n    ACTION_RECORD(impl) {\n        // NO-OP during recording\n    }\n    // Executing backtracking logic will break our recording logic assumptions\n    BACKTRACK_RECORD(grammarRule, args) {\n        return () => true;\n    }\n    // LA is part of the official API and may be used for custom lookahead logic\n    // by end users who may forget to wrap it in ACTION or inside a GATE\n    LA_RECORD(howMuch) {\n        // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\n        // On LA return EOF at the end of the input so an infinite loop may occur.\n        return _parser_js__WEBPACK_IMPORTED_MODULE_4__.END_OF_FILE;\n    }\n    topLevelRuleRecord(name, def) {\n        try {\n            const newTopLevelRule = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Rule({ definition: [], name: name });\n            newTopLevelRule.name = name;\n            this.recordingProdStack.push(newTopLevelRule);\n            def.call(this);\n            this.recordingProdStack.pop();\n            return newTopLevelRule;\n        }\n        catch (originalError) {\n            if (originalError.KNOWN_RECORDER_ERROR !== true) {\n                try {\n                    originalError.message =\n                        originalError.message +\n                            '\\n\\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\\t' +\n                            \"https://chevrotain.io/docs/guide/internals.html#grammar-recording\";\n                }\n                catch (mutabilityError) {\n                    // We may not be able to modify the original error object\n                    throw originalError;\n                }\n            }\n            throw originalError;\n        }\n    }\n    // Implementation of parsing DSL\n    optionInternalRecord(actionORMethodDef, occurrence) {\n        return recordProd.call(this, _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Option, actionORMethodDef, occurrence);\n    }\n    atLeastOneInternalRecord(occurrence, actionORMethodDef) {\n        recordProd.call(this, _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.RepetitionMandatory, actionORMethodDef, occurrence);\n    }\n    atLeastOneSepFirstInternalRecord(occurrence, options) {\n        recordProd.call(this, _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.RepetitionMandatoryWithSeparator, options, occurrence, HANDLE_SEPARATOR);\n    }\n    manyInternalRecord(occurrence, actionORMethodDef) {\n        recordProd.call(this, _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Repetition, actionORMethodDef, occurrence);\n    }\n    manySepFirstInternalRecord(occurrence, options) {\n        recordProd.call(this, _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.RepetitionWithSeparator, options, occurrence, HANDLE_SEPARATOR);\n    }\n    orInternalRecord(altsOrOpts, occurrence) {\n        return recordOrProd.call(this, altsOrOpts, occurrence);\n    }\n    subruleInternalRecord(ruleToCall, occurrence, options) {\n        assertMethodIdxIsValid(occurrence);\n        if (!ruleToCall || (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(ruleToCall, \"ruleName\") === false) {\n            const error = new Error(`<SUBRULE${getIdxSuffix(occurrence)}> argument is invalid` +\n                ` expecting a Parser method reference but got: <${JSON.stringify(ruleToCall)}>` +\n                `\\n inside top level rule: <${this.recordingProdStack[0].name}>`);\n            error.KNOWN_RECORDER_ERROR = true;\n            throw error;\n        }\n        const prevProd = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(this.recordingProdStack);\n        const ruleName = ruleToCall.ruleName;\n        const newNoneTerminal = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.NonTerminal({\n            idx: occurrence,\n            nonTerminalName: ruleName,\n            label: options === null || options === void 0 ? void 0 : options.LABEL,\n            // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n            referencedRule: undefined,\n        });\n        prevProd.definition.push(newNoneTerminal);\n        return this.outputCst\n            ? RECORDING_PHASE_CSTNODE\n            : RECORDING_NULL_OBJECT;\n    }\n    consumeInternalRecord(tokType, occurrence, options) {\n        assertMethodIdxIsValid(occurrence);\n        if (!(0,_scan_tokens_js__WEBPACK_IMPORTED_MODULE_2__.hasShortKeyProperty)(tokType)) {\n            const error = new Error(`<CONSUME${getIdxSuffix(occurrence)}> argument is invalid` +\n                ` expecting a TokenType reference but got: <${JSON.stringify(tokType)}>` +\n                `\\n inside top level rule: <${this.recordingProdStack[0].name}>`);\n            error.KNOWN_RECORDER_ERROR = true;\n            throw error;\n        }\n        const prevProd = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(this.recordingProdStack);\n        const newNoneTerminal = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Terminal({\n            idx: occurrence,\n            terminalType: tokType,\n            label: options === null || options === void 0 ? void 0 : options.LABEL,\n        });\n        prevProd.definition.push(newNoneTerminal);\n        return RECORDING_PHASE_TOKEN;\n    }\n}\nfunction recordProd(prodConstructor, mainProdArg, occurrence, handleSep = false) {\n    assertMethodIdxIsValid(occurrence);\n    const prevProd = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(this.recordingProdStack);\n    const grammarAction = (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(mainProdArg) ? mainProdArg : mainProdArg.DEF;\n    const newProd = new prodConstructor({ definition: [], idx: occurrence });\n    if (handleSep) {\n        newProd.separator = mainProdArg.SEP;\n    }\n    if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(mainProdArg, \"MAX_LOOKAHEAD\")) {\n        newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n    }\n    this.recordingProdStack.push(newProd);\n    grammarAction.call(this);\n    prevProd.definition.push(newProd);\n    this.recordingProdStack.pop();\n    return RECORDING_NULL_OBJECT;\n}\nfunction recordOrProd(mainProdArg, occurrence) {\n    assertMethodIdxIsValid(occurrence);\n    const prevProd = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(this.recordingProdStack);\n    // Only an array of alternatives\n    const hasOptions = (0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(mainProdArg) === false;\n    const alts = hasOptions === false ? mainProdArg : mainProdArg.DEF;\n    const newOrProd = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Alternation({\n        definition: [],\n        idx: occurrence,\n        ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true,\n    });\n    if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(mainProdArg, \"MAX_LOOKAHEAD\")) {\n        newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n    }\n    const hasPredicates = (0,lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(alts, (currAlt) => (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(currAlt.GATE));\n    newOrProd.hasPredicates = hasPredicates;\n    prevProd.definition.push(newOrProd);\n    (0,lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(alts, (currAlt) => {\n        const currAltFlat = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Alternative({ definition: [] });\n        newOrProd.definition.push(currAltFlat);\n        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currAlt, \"IGNORE_AMBIGUITIES\")) {\n            currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES; // assumes end user provides the correct config value/type\n        }\n        // **implicit** ignoreAmbiguities due to usage of gate\n        else if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currAlt, \"GATE\")) {\n            currAltFlat.ignoreAmbiguities = true;\n        }\n        this.recordingProdStack.push(currAltFlat);\n        currAlt.ALT.call(this);\n        this.recordingProdStack.pop();\n    });\n    return RECORDING_NULL_OBJECT;\n}\nfunction getIdxSuffix(idx) {\n    return idx === 0 ? \"\" : `${idx}`;\n}\nfunction assertMethodIdxIsValid(idx) {\n    if (idx < 0 || idx > MAX_METHOD_IDX) {\n        const error = new Error(\n        // The stack trace will contain all the needed details\n        `Invalid DSL Method idx value: <${idx}>\\n\\t` +\n            `Idx value must be a none negative value smaller than ${MAX_METHOD_IDX + 1}`);\n        error.KNOWN_RECORDER_ERROR = true;\n        throw error;\n    }\n}\n//# sourceMappingURL=gast_recorder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/gast_recorder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/lexer_adapter.js":
/*!******************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/traits/lexer_adapter.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LexerAdapter: () => (/* binding */ LexerAdapter)\n/* harmony export */ });\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n\n/**\n * Trait responsible abstracting over the interaction with Lexer output (Token vector).\n *\n * This could be generalized to support other kinds of lexers, e.g.\n * - Just in Time Lexing / Lexer-Less parsing.\n * - Streaming Lexer.\n */\nclass LexerAdapter {\n    initLexerAdapter() {\n        this.tokVector = [];\n        this.tokVectorLength = 0;\n        this.currIdx = -1;\n    }\n    set input(newInput) {\n        // @ts-ignore - `this parameter` not supported in setters/getters\n        //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n        if (this.selfAnalysisDone !== true) {\n            throw Error(`Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.`);\n        }\n        // @ts-ignore - `this parameter` not supported in setters/getters\n        //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n        this.reset();\n        this.tokVector = newInput;\n        this.tokVectorLength = newInput.length;\n    }\n    get input() {\n        return this.tokVector;\n    }\n    // skips a token and returns the next token\n    SKIP_TOKEN() {\n        if (this.currIdx <= this.tokVector.length - 2) {\n            this.consumeToken();\n            return this.LA(1);\n        }\n        else {\n            return _parser_js__WEBPACK_IMPORTED_MODULE_0__.END_OF_FILE;\n        }\n    }\n    // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers\n    // or lexers dependent on parser context.\n    LA(howMuch) {\n        const soughtIdx = this.currIdx + howMuch;\n        if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {\n            return _parser_js__WEBPACK_IMPORTED_MODULE_0__.END_OF_FILE;\n        }\n        else {\n            return this.tokVector[soughtIdx];\n        }\n    }\n    consumeToken() {\n        this.currIdx++;\n    }\n    exportLexerState() {\n        return this.currIdx;\n    }\n    importLexerState(newState) {\n        this.currIdx = newState;\n    }\n    resetLexerState() {\n        this.currIdx = -1;\n    }\n    moveToTerminatedState() {\n        this.currIdx = this.tokVector.length - 1;\n    }\n    getLexerPosition() {\n        return this.exportLexerState();\n    }\n}\n//# sourceMappingURL=lexer_adapter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL3BhcnNlci90cmFpdHMvbGV4ZXJfYWRhcHRlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1EQUFXO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1EQUFXO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYWxleGFuZGVyLm5vYmxlL2FwZXgtdG9vbGJveC9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL3BhcnNlci90cmFpdHMvbGV4ZXJfYWRhcHRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFTkRfT0ZfRklMRSB9IGZyb20gXCIuLi9wYXJzZXIuanNcIjtcbi8qKlxuICogVHJhaXQgcmVzcG9uc2libGUgYWJzdHJhY3Rpbmcgb3ZlciB0aGUgaW50ZXJhY3Rpb24gd2l0aCBMZXhlciBvdXRwdXQgKFRva2VuIHZlY3RvcikuXG4gKlxuICogVGhpcyBjb3VsZCBiZSBnZW5lcmFsaXplZCB0byBzdXBwb3J0IG90aGVyIGtpbmRzIG9mIGxleGVycywgZS5nLlxuICogLSBKdXN0IGluIFRpbWUgTGV4aW5nIC8gTGV4ZXItTGVzcyBwYXJzaW5nLlxuICogLSBTdHJlYW1pbmcgTGV4ZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBMZXhlckFkYXB0ZXIge1xuICAgIGluaXRMZXhlckFkYXB0ZXIoKSB7XG4gICAgICAgIHRoaXMudG9rVmVjdG9yID0gW107XG4gICAgICAgIHRoaXMudG9rVmVjdG9yTGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5jdXJySWR4ID0gLTE7XG4gICAgfVxuICAgIHNldCBpbnB1dChuZXdJbnB1dCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlIC0gYHRoaXMgcGFyYW1ldGVyYCBub3Qgc3VwcG9ydGVkIGluIHNldHRlcnMvZ2V0dGVyc1xuICAgICAgICAvLyAgIC0gaHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svZnVuY3Rpb25zLmh0bWwjdGhpcy1wYXJhbWV0ZXJzXG4gICAgICAgIGlmICh0aGlzLnNlbGZBbmFseXNpc0RvbmUgIT09IHRydWUpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBNaXNzaW5nIDxwZXJmb3JtU2VsZkFuYWx5c2lzPiBpbnZvY2F0aW9uIGF0IHRoZSBlbmQgb2YgdGhlIFBhcnNlcidzIGNvbnN0cnVjdG9yLmApO1xuICAgICAgICB9XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgLSBgdGhpcyBwYXJhbWV0ZXJgIG5vdCBzdXBwb3J0ZWQgaW4gc2V0dGVycy9nZXR0ZXJzXG4gICAgICAgIC8vICAgLSBodHRwczovL3d3dy50eXBlc2NyaXB0bGFuZy5vcmcvZG9jcy9oYW5kYm9vay9mdW5jdGlvbnMuaHRtbCN0aGlzLXBhcmFtZXRlcnNcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB0aGlzLnRva1ZlY3RvciA9IG5ld0lucHV0O1xuICAgICAgICB0aGlzLnRva1ZlY3Rvckxlbmd0aCA9IG5ld0lucHV0Lmxlbmd0aDtcbiAgICB9XG4gICAgZ2V0IGlucHV0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b2tWZWN0b3I7XG4gICAgfVxuICAgIC8vIHNraXBzIGEgdG9rZW4gYW5kIHJldHVybnMgdGhlIG5leHQgdG9rZW5cbiAgICBTS0lQX1RPS0VOKCkge1xuICAgICAgICBpZiAodGhpcy5jdXJySWR4IDw9IHRoaXMudG9rVmVjdG9yLmxlbmd0aCAtIDIpIHtcbiAgICAgICAgICAgIHRoaXMuY29uc3VtZVRva2VuKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5MQSgxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBFTkRfT0ZfRklMRTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBMZXhlciAoYWNjZXNzaW5nIFRva2VuIHZlY3RvcikgcmVsYXRlZCBtZXRob2RzIHdoaWNoIGNhbiBiZSBvdmVycmlkZGVuIHRvIGltcGxlbWVudCBsYXp5IGxleGVyc1xuICAgIC8vIG9yIGxleGVycyBkZXBlbmRlbnQgb24gcGFyc2VyIGNvbnRleHQuXG4gICAgTEEoaG93TXVjaCkge1xuICAgICAgICBjb25zdCBzb3VnaHRJZHggPSB0aGlzLmN1cnJJZHggKyBob3dNdWNoO1xuICAgICAgICBpZiAoc291Z2h0SWR4IDwgMCB8fCB0aGlzLnRva1ZlY3Rvckxlbmd0aCA8PSBzb3VnaHRJZHgpIHtcbiAgICAgICAgICAgIHJldHVybiBFTkRfT0ZfRklMRTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRva1ZlY3Rvcltzb3VnaHRJZHhdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN1bWVUb2tlbigpIHtcbiAgICAgICAgdGhpcy5jdXJySWR4Kys7XG4gICAgfVxuICAgIGV4cG9ydExleGVyU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJJZHg7XG4gICAgfVxuICAgIGltcG9ydExleGVyU3RhdGUobmV3U3RhdGUpIHtcbiAgICAgICAgdGhpcy5jdXJySWR4ID0gbmV3U3RhdGU7XG4gICAgfVxuICAgIHJlc2V0TGV4ZXJTdGF0ZSgpIHtcbiAgICAgICAgdGhpcy5jdXJySWR4ID0gLTE7XG4gICAgfVxuICAgIG1vdmVUb1Rlcm1pbmF0ZWRTdGF0ZSgpIHtcbiAgICAgICAgdGhpcy5jdXJySWR4ID0gdGhpcy50b2tWZWN0b3IubGVuZ3RoIC0gMTtcbiAgICB9XG4gICAgZ2V0TGV4ZXJQb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXhwb3J0TGV4ZXJTdGF0ZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxleGVyX2FkYXB0ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/lexer_adapter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/looksahead.js":
/*!***************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/traits/looksahead.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LooksAhead: () => (/* binding */ LooksAhead),\n/* harmony export */   collectMethods: () => (/* binding */ collectMethods)\n/* harmony export */ });\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n/* harmony import */ var _grammar_keys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../grammar/keys.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/keys.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n/* harmony import */ var _grammar_llk_lookahead_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../grammar/llk_lookahead.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/llk_lookahead.js\");\n\n\n\n\n\n/**\n * Trait responsible for the lookahead related utilities and optimizations.\n */\nclass LooksAhead {\n    initLooksAhead(config) {\n        this.dynamicTokensEnabled = (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, \"dynamicTokensEnabled\")\n            ? config.dynamicTokensEnabled // assumes end user provides the correct config value/type\n            : _parser_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;\n        this.maxLookahead = (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, \"maxLookahead\")\n            ? config.maxLookahead // assumes end user provides the correct config value/type\n            : _parser_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PARSER_CONFIG.maxLookahead;\n        this.lookaheadStrategy = (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, \"lookaheadStrategy\")\n            ? config.lookaheadStrategy // assumes end user provides the correct config value/type\n            : new _grammar_llk_lookahead_js__WEBPACK_IMPORTED_MODULE_3__.LLkLookaheadStrategy({ maxLookahead: this.maxLookahead });\n        this.lookAheadFuncsCache = new Map();\n    }\n    preComputeLookaheadFunctions(rules) {\n        (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(rules, (currRule) => {\n            this.TRACE_INIT(`${currRule.name} Rule Lookahead`, () => {\n                const { alternation, repetition, option, repetitionMandatory, repetitionMandatoryWithSeparator, repetitionWithSeparator, } = collectMethods(currRule);\n                (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(alternation, (currProd) => {\n                    const prodIdx = currProd.idx === 0 ? \"\" : currProd.idx;\n                    this.TRACE_INIT(`${(0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.getProductionDslName)(currProd)}${prodIdx}`, () => {\n                        const laFunc = this.lookaheadStrategy.buildLookaheadForAlternation({\n                            prodOccurrence: currProd.idx,\n                            rule: currRule,\n                            maxLookahead: currProd.maxLookahead || this.maxLookahead,\n                            hasPredicates: currProd.hasPredicates,\n                            dynamicTokensEnabled: this.dynamicTokensEnabled,\n                        });\n                        const key = (0,_grammar_keys_js__WEBPACK_IMPORTED_MODULE_1__.getKeyForAutomaticLookahead)(this.fullRuleNameToShort[currRule.name], _grammar_keys_js__WEBPACK_IMPORTED_MODULE_1__.OR_IDX, currProd.idx);\n                        this.setLaFuncCache(key, laFunc);\n                    });\n                });\n                (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(repetition, (currProd) => {\n                    this.computeLookaheadFunc(currRule, currProd.idx, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_1__.MANY_IDX, \"Repetition\", currProd.maxLookahead, (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.getProductionDslName)(currProd));\n                });\n                (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(option, (currProd) => {\n                    this.computeLookaheadFunc(currRule, currProd.idx, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_1__.OPTION_IDX, \"Option\", currProd.maxLookahead, (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.getProductionDslName)(currProd));\n                });\n                (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(repetitionMandatory, (currProd) => {\n                    this.computeLookaheadFunc(currRule, currProd.idx, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_1__.AT_LEAST_ONE_IDX, \"RepetitionMandatory\", currProd.maxLookahead, (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.getProductionDslName)(currProd));\n                });\n                (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(repetitionMandatoryWithSeparator, (currProd) => {\n                    this.computeLookaheadFunc(currRule, currProd.idx, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_1__.AT_LEAST_ONE_SEP_IDX, \"RepetitionMandatoryWithSeparator\", currProd.maxLookahead, (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.getProductionDslName)(currProd));\n                });\n                (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(repetitionWithSeparator, (currProd) => {\n                    this.computeLookaheadFunc(currRule, currProd.idx, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_1__.MANY_SEP_IDX, \"RepetitionWithSeparator\", currProd.maxLookahead, (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.getProductionDslName)(currProd));\n                });\n            });\n        });\n    }\n    computeLookaheadFunc(rule, prodOccurrence, prodKey, prodType, prodMaxLookahead, dslMethodName) {\n        this.TRACE_INIT(`${dslMethodName}${prodOccurrence === 0 ? \"\" : prodOccurrence}`, () => {\n            const laFunc = this.lookaheadStrategy.buildLookaheadForOptional({\n                prodOccurrence,\n                rule,\n                maxLookahead: prodMaxLookahead || this.maxLookahead,\n                dynamicTokensEnabled: this.dynamicTokensEnabled,\n                prodType,\n            });\n            const key = (0,_grammar_keys_js__WEBPACK_IMPORTED_MODULE_1__.getKeyForAutomaticLookahead)(this.fullRuleNameToShort[rule.name], prodKey, prodOccurrence);\n            this.setLaFuncCache(key, laFunc);\n        });\n    }\n    // this actually returns a number, but it is always used as a string (object prop key)\n    getKeyForAutomaticLookahead(dslMethodIdx, occurrence) {\n        const currRuleShortName = this.getLastExplicitRuleShortName();\n        return (0,_grammar_keys_js__WEBPACK_IMPORTED_MODULE_1__.getKeyForAutomaticLookahead)(currRuleShortName, dslMethodIdx, occurrence);\n    }\n    getLaFuncFromCache(key) {\n        return this.lookAheadFuncsCache.get(key);\n    }\n    /* istanbul ignore next */\n    setLaFuncCache(key, value) {\n        this.lookAheadFuncsCache.set(key, value);\n    }\n}\nclass DslMethodsCollectorVisitor extends _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.GAstVisitor {\n    constructor() {\n        super(...arguments);\n        this.dslMethods = {\n            option: [],\n            alternation: [],\n            repetition: [],\n            repetitionWithSeparator: [],\n            repetitionMandatory: [],\n            repetitionMandatoryWithSeparator: [],\n        };\n    }\n    reset() {\n        this.dslMethods = {\n            option: [],\n            alternation: [],\n            repetition: [],\n            repetitionWithSeparator: [],\n            repetitionMandatory: [],\n            repetitionMandatoryWithSeparator: [],\n        };\n    }\n    visitOption(option) {\n        this.dslMethods.option.push(option);\n    }\n    visitRepetitionWithSeparator(manySep) {\n        this.dslMethods.repetitionWithSeparator.push(manySep);\n    }\n    visitRepetitionMandatory(atLeastOne) {\n        this.dslMethods.repetitionMandatory.push(atLeastOne);\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n        this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);\n    }\n    visitRepetition(many) {\n        this.dslMethods.repetition.push(many);\n    }\n    visitAlternation(or) {\n        this.dslMethods.alternation.push(or);\n    }\n}\nconst collectorVisitor = new DslMethodsCollectorVisitor();\nfunction collectMethods(rule) {\n    collectorVisitor.reset();\n    rule.accept(collectorVisitor);\n    const dslMethods = collectorVisitor.dslMethods;\n    // avoid uncleaned references\n    collectorVisitor.reset();\n    return dslMethods;\n}\n//# sourceMappingURL=looksahead.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/looksahead.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/perf_tracer.js":
/*!****************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/traits/perf_tracer.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PerformanceTracer: () => (/* binding */ PerformanceTracer)\n/* harmony export */ });\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var _chevrotain_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chevrotain/utils */ \"(ssr)/./node_modules/@chevrotain/utils/lib/src/api.js\");\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n\n\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nclass PerformanceTracer {\n    initPerformanceTracer(config) {\n        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(config, \"traceInitPerf\")) {\n            const userTraceInitPerf = config.traceInitPerf;\n            const traceIsNumber = typeof userTraceInitPerf === \"number\";\n            this.traceInitMaxIdent = traceIsNumber\n                ? userTraceInitPerf\n                : Infinity;\n            this.traceInitPerf = traceIsNumber\n                ? userTraceInitPerf > 0\n                : userTraceInitPerf; // assumes end user provides the correct config value/type\n        }\n        else {\n            this.traceInitMaxIdent = 0;\n            this.traceInitPerf = _parser_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_PARSER_CONFIG.traceInitPerf;\n        }\n        this.traceInitIndent = -1;\n    }\n    TRACE_INIT(phaseDesc, phaseImpl) {\n        // No need to optimize this using NOOP pattern because\n        // It is not called in a hot spot...\n        if (this.traceInitPerf === true) {\n            this.traceInitIndent++;\n            const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                console.log(`${indent}--> <${phaseDesc}>`);\n            }\n            const { time, value } = (0,_chevrotain_utils__WEBPACK_IMPORTED_MODULE_0__.timer)(phaseImpl);\n            /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n            const traceMethod = time > 10 ? console.warn : console.log;\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n            }\n            this.traceInitIndent--;\n            return value;\n        }\n        else {\n            return phaseImpl();\n        }\n    }\n}\n//# sourceMappingURL=perf_tracer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL3BhcnNlci90cmFpdHMvcGVyZl90cmFjZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFnQztBQUNVO0FBQ1c7QUFDckQ7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLFlBQVkscURBQUc7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsNkRBQXFCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLE9BQU8sT0FBTyxVQUFVO0FBQ3ZEO0FBQ0Esb0JBQW9CLGNBQWMsRUFBRSx3REFBSztBQUN6QztBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsT0FBTyxPQUFPLFVBQVUsVUFBVSxLQUFLO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYWxleGFuZGVyLm5vYmxlL2FwZXgtdG9vbGJveC9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL3BhcnNlci90cmFpdHMvcGVyZl90cmFjZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFzIH0gZnJvbSBcImxvZGFzaC1lc1wiO1xuaW1wb3J0IHsgdGltZXIgfSBmcm9tIFwiQGNoZXZyb3RhaW4vdXRpbHNcIjtcbmltcG9ydCB7IERFRkFVTFRfUEFSU0VSX0NPTkZJRyB9IGZyb20gXCIuLi9wYXJzZXIuanNcIjtcbi8qKlxuICogVHJhaXQgcmVzcG9uc2libGUgZm9yIHJ1bnRpbWUgcGFyc2luZyBlcnJvcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBQZXJmb3JtYW5jZVRyYWNlciB7XG4gICAgaW5pdFBlcmZvcm1hbmNlVHJhY2VyKGNvbmZpZykge1xuICAgICAgICBpZiAoaGFzKGNvbmZpZywgXCJ0cmFjZUluaXRQZXJmXCIpKSB7XG4gICAgICAgICAgICBjb25zdCB1c2VyVHJhY2VJbml0UGVyZiA9IGNvbmZpZy50cmFjZUluaXRQZXJmO1xuICAgICAgICAgICAgY29uc3QgdHJhY2VJc051bWJlciA9IHR5cGVvZiB1c2VyVHJhY2VJbml0UGVyZiA9PT0gXCJudW1iZXJcIjtcbiAgICAgICAgICAgIHRoaXMudHJhY2VJbml0TWF4SWRlbnQgPSB0cmFjZUlzTnVtYmVyXG4gICAgICAgICAgICAgICAgPyB1c2VyVHJhY2VJbml0UGVyZlxuICAgICAgICAgICAgICAgIDogSW5maW5pdHk7XG4gICAgICAgICAgICB0aGlzLnRyYWNlSW5pdFBlcmYgPSB0cmFjZUlzTnVtYmVyXG4gICAgICAgICAgICAgICAgPyB1c2VyVHJhY2VJbml0UGVyZiA+IDBcbiAgICAgICAgICAgICAgICA6IHVzZXJUcmFjZUluaXRQZXJmOyAvLyBhc3N1bWVzIGVuZCB1c2VyIHByb3ZpZGVzIHRoZSBjb3JyZWN0IGNvbmZpZyB2YWx1ZS90eXBlXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRyYWNlSW5pdE1heElkZW50ID0gMDtcbiAgICAgICAgICAgIHRoaXMudHJhY2VJbml0UGVyZiA9IERFRkFVTFRfUEFSU0VSX0NPTkZJRy50cmFjZUluaXRQZXJmO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHJhY2VJbml0SW5kZW50ID0gLTE7XG4gICAgfVxuICAgIFRSQUNFX0lOSVQocGhhc2VEZXNjLCBwaGFzZUltcGwpIHtcbiAgICAgICAgLy8gTm8gbmVlZCB0byBvcHRpbWl6ZSB0aGlzIHVzaW5nIE5PT1AgcGF0dGVybiBiZWNhdXNlXG4gICAgICAgIC8vIEl0IGlzIG5vdCBjYWxsZWQgaW4gYSBob3Qgc3BvdC4uLlxuICAgICAgICBpZiAodGhpcy50cmFjZUluaXRQZXJmID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0aGlzLnRyYWNlSW5pdEluZGVudCsrO1xuICAgICAgICAgICAgY29uc3QgaW5kZW50ID0gbmV3IEFycmF5KHRoaXMudHJhY2VJbml0SW5kZW50ICsgMSkuam9pbihcIlxcdFwiKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnRyYWNlSW5pdEluZGVudCA8IHRoaXMudHJhY2VJbml0TWF4SWRlbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgJHtpbmRlbnR9LS0+IDwke3BoYXNlRGVzY30+YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IHRpbWUsIHZhbHVlIH0gPSB0aW1lcihwaGFzZUltcGwpO1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgLSBEaWZmaWN1bHQgdG8gcmVwcm9kdWNlIHNwZWNpZmljIHBlcmZvcm1hbmNlIGJlaGF2aW9yICg+MTBtcykgaW4gdGVzdHMgKi9cbiAgICAgICAgICAgIGNvbnN0IHRyYWNlTWV0aG9kID0gdGltZSA+IDEwID8gY29uc29sZS53YXJuIDogY29uc29sZS5sb2c7XG4gICAgICAgICAgICBpZiAodGhpcy50cmFjZUluaXRJbmRlbnQgPCB0aGlzLnRyYWNlSW5pdE1heElkZW50KSB7XG4gICAgICAgICAgICAgICAgdHJhY2VNZXRob2QoYCR7aW5kZW50fTwtLSA8JHtwaGFzZURlc2N9PiB0aW1lOiAke3RpbWV9bXNgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudHJhY2VJbml0SW5kZW50LS07XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcGhhc2VJbXBsKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wZXJmX3RyYWNlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/perf_tracer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/recognizer_api.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/traits/recognizer_api.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RecognizerApi: () => (/* binding */ RecognizerApi)\n/* harmony export */ });\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/includes.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/values.js\");\n/* harmony import */ var _exceptions_public_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../exceptions_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/exceptions_public.js\");\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n/* harmony import */ var _errors_public_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../errors_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/errors_public.js\");\n/* harmony import */ var _grammar_checks_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../grammar/checks.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/checks.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n\n\n\n\n\n\n/**\n * This trait is responsible for implementing the public API\n * for defining Chevrotain parsers, i.e:\n * - CONSUME\n * - RULE\n * - OPTION\n * - ...\n */\nclass RecognizerApi {\n    ACTION(impl) {\n        return impl.call(this);\n    }\n    consume(idx, tokType, options) {\n        return this.consumeInternal(tokType, idx, options);\n    }\n    subrule(idx, ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, idx, options);\n    }\n    option(idx, actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, idx);\n    }\n    or(idx, altsOrOpts) {\n        return this.orInternal(altsOrOpts, idx);\n    }\n    many(idx, actionORMethodDef) {\n        return this.manyInternal(idx, actionORMethodDef);\n    }\n    atLeastOne(idx, actionORMethodDef) {\n        return this.atLeastOneInternal(idx, actionORMethodDef);\n    }\n    CONSUME(tokType, options) {\n        return this.consumeInternal(tokType, 0, options);\n    }\n    CONSUME1(tokType, options) {\n        return this.consumeInternal(tokType, 1, options);\n    }\n    CONSUME2(tokType, options) {\n        return this.consumeInternal(tokType, 2, options);\n    }\n    CONSUME3(tokType, options) {\n        return this.consumeInternal(tokType, 3, options);\n    }\n    CONSUME4(tokType, options) {\n        return this.consumeInternal(tokType, 4, options);\n    }\n    CONSUME5(tokType, options) {\n        return this.consumeInternal(tokType, 5, options);\n    }\n    CONSUME6(tokType, options) {\n        return this.consumeInternal(tokType, 6, options);\n    }\n    CONSUME7(tokType, options) {\n        return this.consumeInternal(tokType, 7, options);\n    }\n    CONSUME8(tokType, options) {\n        return this.consumeInternal(tokType, 8, options);\n    }\n    CONSUME9(tokType, options) {\n        return this.consumeInternal(tokType, 9, options);\n    }\n    SUBRULE(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 0, options);\n    }\n    SUBRULE1(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 1, options);\n    }\n    SUBRULE2(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 2, options);\n    }\n    SUBRULE3(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 3, options);\n    }\n    SUBRULE4(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 4, options);\n    }\n    SUBRULE5(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 5, options);\n    }\n    SUBRULE6(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 6, options);\n    }\n    SUBRULE7(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 7, options);\n    }\n    SUBRULE8(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 8, options);\n    }\n    SUBRULE9(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 9, options);\n    }\n    OPTION(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 0);\n    }\n    OPTION1(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 1);\n    }\n    OPTION2(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 2);\n    }\n    OPTION3(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 3);\n    }\n    OPTION4(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 4);\n    }\n    OPTION5(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 5);\n    }\n    OPTION6(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 6);\n    }\n    OPTION7(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 7);\n    }\n    OPTION8(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 8);\n    }\n    OPTION9(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 9);\n    }\n    OR(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 0);\n    }\n    OR1(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 1);\n    }\n    OR2(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 2);\n    }\n    OR3(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 3);\n    }\n    OR4(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 4);\n    }\n    OR5(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 5);\n    }\n    OR6(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 6);\n    }\n    OR7(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 7);\n    }\n    OR8(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 8);\n    }\n    OR9(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 9);\n    }\n    MANY(actionORMethodDef) {\n        this.manyInternal(0, actionORMethodDef);\n    }\n    MANY1(actionORMethodDef) {\n        this.manyInternal(1, actionORMethodDef);\n    }\n    MANY2(actionORMethodDef) {\n        this.manyInternal(2, actionORMethodDef);\n    }\n    MANY3(actionORMethodDef) {\n        this.manyInternal(3, actionORMethodDef);\n    }\n    MANY4(actionORMethodDef) {\n        this.manyInternal(4, actionORMethodDef);\n    }\n    MANY5(actionORMethodDef) {\n        this.manyInternal(5, actionORMethodDef);\n    }\n    MANY6(actionORMethodDef) {\n        this.manyInternal(6, actionORMethodDef);\n    }\n    MANY7(actionORMethodDef) {\n        this.manyInternal(7, actionORMethodDef);\n    }\n    MANY8(actionORMethodDef) {\n        this.manyInternal(8, actionORMethodDef);\n    }\n    MANY9(actionORMethodDef) {\n        this.manyInternal(9, actionORMethodDef);\n    }\n    MANY_SEP(options) {\n        this.manySepFirstInternal(0, options);\n    }\n    MANY_SEP1(options) {\n        this.manySepFirstInternal(1, options);\n    }\n    MANY_SEP2(options) {\n        this.manySepFirstInternal(2, options);\n    }\n    MANY_SEP3(options) {\n        this.manySepFirstInternal(3, options);\n    }\n    MANY_SEP4(options) {\n        this.manySepFirstInternal(4, options);\n    }\n    MANY_SEP5(options) {\n        this.manySepFirstInternal(5, options);\n    }\n    MANY_SEP6(options) {\n        this.manySepFirstInternal(6, options);\n    }\n    MANY_SEP7(options) {\n        this.manySepFirstInternal(7, options);\n    }\n    MANY_SEP8(options) {\n        this.manySepFirstInternal(8, options);\n    }\n    MANY_SEP9(options) {\n        this.manySepFirstInternal(9, options);\n    }\n    AT_LEAST_ONE(actionORMethodDef) {\n        this.atLeastOneInternal(0, actionORMethodDef);\n    }\n    AT_LEAST_ONE1(actionORMethodDef) {\n        return this.atLeastOneInternal(1, actionORMethodDef);\n    }\n    AT_LEAST_ONE2(actionORMethodDef) {\n        this.atLeastOneInternal(2, actionORMethodDef);\n    }\n    AT_LEAST_ONE3(actionORMethodDef) {\n        this.atLeastOneInternal(3, actionORMethodDef);\n    }\n    AT_LEAST_ONE4(actionORMethodDef) {\n        this.atLeastOneInternal(4, actionORMethodDef);\n    }\n    AT_LEAST_ONE5(actionORMethodDef) {\n        this.atLeastOneInternal(5, actionORMethodDef);\n    }\n    AT_LEAST_ONE6(actionORMethodDef) {\n        this.atLeastOneInternal(6, actionORMethodDef);\n    }\n    AT_LEAST_ONE7(actionORMethodDef) {\n        this.atLeastOneInternal(7, actionORMethodDef);\n    }\n    AT_LEAST_ONE8(actionORMethodDef) {\n        this.atLeastOneInternal(8, actionORMethodDef);\n    }\n    AT_LEAST_ONE9(actionORMethodDef) {\n        this.atLeastOneInternal(9, actionORMethodDef);\n    }\n    AT_LEAST_ONE_SEP(options) {\n        this.atLeastOneSepFirstInternal(0, options);\n    }\n    AT_LEAST_ONE_SEP1(options) {\n        this.atLeastOneSepFirstInternal(1, options);\n    }\n    AT_LEAST_ONE_SEP2(options) {\n        this.atLeastOneSepFirstInternal(2, options);\n    }\n    AT_LEAST_ONE_SEP3(options) {\n        this.atLeastOneSepFirstInternal(3, options);\n    }\n    AT_LEAST_ONE_SEP4(options) {\n        this.atLeastOneSepFirstInternal(4, options);\n    }\n    AT_LEAST_ONE_SEP5(options) {\n        this.atLeastOneSepFirstInternal(5, options);\n    }\n    AT_LEAST_ONE_SEP6(options) {\n        this.atLeastOneSepFirstInternal(6, options);\n    }\n    AT_LEAST_ONE_SEP7(options) {\n        this.atLeastOneSepFirstInternal(7, options);\n    }\n    AT_LEAST_ONE_SEP8(options) {\n        this.atLeastOneSepFirstInternal(8, options);\n    }\n    AT_LEAST_ONE_SEP9(options) {\n        this.atLeastOneSepFirstInternal(9, options);\n    }\n    RULE(name, implementation, config = _parser_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_RULE_CONFIG) {\n        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this.definedRulesNames, name)) {\n            const errMsg = _errors_public_js__WEBPACK_IMPORTED_MODULE_2__.defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({\n                topLevelRule: name,\n                grammarName: this.className,\n            });\n            const error = {\n                message: errMsg,\n                type: _parser_js__WEBPACK_IMPORTED_MODULE_1__.ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n                ruleName: name,\n            };\n            this.definitionErrors.push(error);\n        }\n        this.definedRulesNames.push(name);\n        const ruleImplementation = this.defineRule(name, implementation, config);\n        this[name] = ruleImplementation;\n        return ruleImplementation;\n    }\n    OVERRIDE_RULE(name, impl, config = _parser_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_RULE_CONFIG) {\n        const ruleErrors = (0,_grammar_checks_js__WEBPACK_IMPORTED_MODULE_3__.validateRuleIsOverridden)(name, this.definedRulesNames, this.className);\n        this.definitionErrors = this.definitionErrors.concat(ruleErrors);\n        const ruleImplementation = this.defineRule(name, impl, config);\n        this[name] = ruleImplementation;\n        return ruleImplementation;\n    }\n    BACKTRACK(grammarRule, args) {\n        return function () {\n            // save org state\n            this.isBackTrackingStack.push(1);\n            const orgState = this.saveRecogState();\n            try {\n                grammarRule.apply(this, args);\n                // if no exception was thrown we have succeed parsing the rule.\n                return true;\n            }\n            catch (e) {\n                if ((0,_exceptions_public_js__WEBPACK_IMPORTED_MODULE_0__.isRecognitionException)(e)) {\n                    return false;\n                }\n                else {\n                    throw e;\n                }\n            }\n            finally {\n                this.reloadRecogState(orgState);\n                this.isBackTrackingStack.pop();\n            }\n        };\n    }\n    // GAST export APIs\n    getGAstProductions() {\n        return this.gastProductionsCache;\n    }\n    getSerializedGastProductions() {\n        return (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_4__.serializeGrammar)((0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(this.gastProductionsCache));\n    }\n}\n//# sourceMappingURL=recognizer_api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/recognizer_api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/recognizer_engine.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/traits/recognizer_engine.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RecognizerEngine: () => (/* binding */ RecognizerEngine)\n/* harmony export */ });\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isArray.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/reduce.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/every.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/flatten.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/values.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/uniq.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isObject.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/clone.js\");\n/* harmony import */ var _grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../grammar/keys.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/keys.js\");\n/* harmony import */ var _exceptions_public_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../exceptions_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/exceptions_public.js\");\n/* harmony import */ var _grammar_lookahead_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../grammar/lookahead.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/lookahead.js\");\n/* harmony import */ var _grammar_interpreter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../grammar/interpreter.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/interpreter.js\");\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n/* harmony import */ var _recoverable_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./recoverable.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/recoverable.js\");\n/* harmony import */ var _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../scan/tokens_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens_public.js\");\n/* harmony import */ var _scan_tokens_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../scan/tokens.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens.js\");\n\n\n\n\n\n\n\n\n\n/**\n * This trait is responsible for the runtime parsing engine\n * Used by the official API (recognizer_api.ts)\n */\nclass RecognizerEngine {\n    initRecognizerEngine(tokenVocabulary, config) {\n        this.className = this.constructor.name;\n        // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n        this.shortRuleNameToFull = {};\n        this.fullRuleNameToShort = {};\n        this.ruleShortNameIdx = 256;\n        this.tokenMatcher = _scan_tokens_js__WEBPACK_IMPORTED_MODULE_7__.tokenStructuredMatcherNoCategories;\n        this.subruleIdx = 0;\n        this.definedRulesNames = [];\n        this.tokensMap = {};\n        this.isBackTrackingStack = [];\n        this.RULE_STACK = [];\n        this.RULE_OCCURRENCE_STACK = [];\n        this.gastProductionsCache = {};\n        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(config, \"serializedGrammar\")) {\n            throw Error(\"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" +\n                \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" +\n                \"\\tFor Further details.\");\n        }\n        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(tokenVocabulary)) {\n            // This only checks for Token vocabularies provided as arrays.\n            // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n            // rather than all edge cases of empty Token vocabularies.\n            if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(tokenVocabulary)) {\n                throw Error(\"A Token Vocabulary cannot be empty.\\n\" +\n                    \"\\tNote that the first argument for the parser constructor\\n\" +\n                    \"\\tis no longer a Token vector (since v4.0).\");\n            }\n            if (typeof tokenVocabulary[0].startOffset === \"number\") {\n                throw Error(\"The Parser constructor no longer accepts a token vector as the first argument.\\n\" +\n                    \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" +\n                    \"\\tFor Further details.\");\n            }\n        }\n        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(tokenVocabulary)) {\n            this.tokensMap = (0,lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(tokenVocabulary, (acc, tokType) => {\n                acc[tokType.name] = tokType;\n                return acc;\n            }, {});\n        }\n        else if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(tokenVocabulary, \"modes\") &&\n            (0,lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])((0,lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])((0,lodash_es__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(tokenVocabulary.modes)), _scan_tokens_js__WEBPACK_IMPORTED_MODULE_7__.isTokenType)) {\n            const allTokenTypes = (0,lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])((0,lodash_es__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(tokenVocabulary.modes));\n            const uniqueTokens = (0,lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(allTokenTypes);\n            this.tokensMap = (0,lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(uniqueTokens, (acc, tokType) => {\n                acc[tokType.name] = tokType;\n                return acc;\n            }, {});\n        }\n        else if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(tokenVocabulary)) {\n            this.tokensMap = (0,lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(tokenVocabulary);\n        }\n        else {\n            throw new Error(\"<tokensDictionary> argument must be An Array of Token constructors,\" +\n                \" A dictionary of Token constructors or an IMultiModeLexerDefinition\");\n        }\n        // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n        // parsed with a clear error message (\"expecting EOF but found ...\")\n        this.tokensMap[\"EOF\"] = _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_6__.EOF;\n        const allTokenTypes = (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(tokenVocabulary, \"modes\")\n            ? (0,lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])((0,lodash_es__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(tokenVocabulary.modes))\n            : (0,lodash_es__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(tokenVocabulary);\n        const noTokenCategoriesUsed = (0,lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(allTokenTypes, (tokenConstructor) => (0,lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(tokenConstructor.categoryMatches));\n        this.tokenMatcher = noTokenCategoriesUsed\n            ? _scan_tokens_js__WEBPACK_IMPORTED_MODULE_7__.tokenStructuredMatcherNoCategories\n            : _scan_tokens_js__WEBPACK_IMPORTED_MODULE_7__.tokenStructuredMatcher;\n        // Because ES2015+ syntax should be supported for creating Token classes\n        // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n        // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n        (0,_scan_tokens_js__WEBPACK_IMPORTED_MODULE_7__.augmentTokenTypes)((0,lodash_es__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(this.tokensMap));\n    }\n    defineRule(ruleName, impl, config) {\n        if (this.selfAnalysisDone) {\n            throw Error(`Grammar rule <${ruleName}> may not be defined after the 'performSelfAnalysis' method has been called'\\n` +\n                `Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`);\n        }\n        const resyncEnabled = (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(config, \"resyncEnabled\")\n            ? config.resyncEnabled // assumes end user provides the correct config value/type\n            : _parser_js__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RULE_CONFIG.resyncEnabled;\n        const recoveryValueFunc = (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(config, \"recoveryValueFunc\")\n            ? config.recoveryValueFunc // assumes end user provides the correct config value/type\n            : _parser_js__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RULE_CONFIG.recoveryValueFunc;\n        // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n        // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n        const shortName = this.ruleShortNameIdx << (_grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.BITS_FOR_METHOD_TYPE + _grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.BITS_FOR_OCCURRENCE_IDX);\n        this.ruleShortNameIdx++;\n        this.shortRuleNameToFull[shortName] = ruleName;\n        this.fullRuleNameToShort[ruleName] = shortName;\n        let invokeRuleWithTry;\n        // Micro optimization, only check the condition **once** on rule definition\n        // instead of **every single** rule invocation.\n        if (this.outputCst === true) {\n            invokeRuleWithTry = function invokeRuleWithTry(...args) {\n                try {\n                    this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n                    impl.apply(this, args);\n                    const cst = this.CST_STACK[this.CST_STACK.length - 1];\n                    this.cstPostRule(cst);\n                    return cst;\n                }\n                catch (e) {\n                    return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n                }\n                finally {\n                    this.ruleFinallyStateUpdate();\n                }\n            };\n        }\n        else {\n            invokeRuleWithTry = function invokeRuleWithTryCst(...args) {\n                try {\n                    this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n                    return impl.apply(this, args);\n                }\n                catch (e) {\n                    return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n                }\n                finally {\n                    this.ruleFinallyStateUpdate();\n                }\n            };\n        }\n        const wrappedGrammarRule = Object.assign(invokeRuleWithTry, { ruleName, originalGrammarAction: impl });\n        return wrappedGrammarRule;\n    }\n    invokeRuleCatch(e, resyncEnabledConfig, recoveryValueFunc) {\n        const isFirstInvokedRule = this.RULE_STACK.length === 1;\n        // note the reSync is always enabled for the first rule invocation, because we must always be able to\n        // reSync with EOF and just output some INVALID ParseTree\n        // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n        // path is really the most valid one\n        const reSyncEnabled = resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;\n        if ((0,_exceptions_public_js__WEBPACK_IMPORTED_MODULE_1__.isRecognitionException)(e)) {\n            const recogError = e;\n            if (reSyncEnabled) {\n                const reSyncTokType = this.findReSyncTokenType();\n                if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n                    recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n                    if (this.outputCst) {\n                        const partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n                        partialCstResult.recoveredNode = true;\n                        return partialCstResult;\n                    }\n                    else {\n                        return recoveryValueFunc(e);\n                    }\n                }\n                else {\n                    if (this.outputCst) {\n                        const partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n                        partialCstResult.recoveredNode = true;\n                        recogError.partialCstResult = partialCstResult;\n                    }\n                    // to be handled Further up the call stack\n                    throw recogError;\n                }\n            }\n            else if (isFirstInvokedRule) {\n                // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n                this.moveToTerminatedState();\n                // the parser should never throw one of its own errors outside its flow.\n                // even if error recovery is disabled\n                return recoveryValueFunc(e);\n            }\n            else {\n                // to be recovered Further up the call stack\n                throw recogError;\n            }\n        }\n        else {\n            // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n            throw e;\n        }\n    }\n    // Implementation of parsing DSL\n    optionInternal(actionORMethodDef, occurrence) {\n        const key = this.getKeyForAutomaticLookahead(_grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.OPTION_IDX, occurrence);\n        return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n    }\n    optionInternalLogic(actionORMethodDef, occurrence, key) {\n        let lookAheadFunc = this.getLaFuncFromCache(key);\n        let action;\n        if (typeof actionORMethodDef !== \"function\") {\n            action = actionORMethodDef.DEF;\n            const predicate = actionORMethodDef.GATE;\n            // predicate present\n            if (predicate !== undefined) {\n                const orgLookaheadFunction = lookAheadFunc;\n                lookAheadFunc = () => {\n                    return predicate.call(this) && orgLookaheadFunction.call(this);\n                };\n            }\n        }\n        else {\n            action = actionORMethodDef;\n        }\n        if (lookAheadFunc.call(this) === true) {\n            return action.call(this);\n        }\n        return undefined;\n    }\n    atLeastOneInternal(prodOccurrence, actionORMethodDef) {\n        const laKey = this.getKeyForAutomaticLookahead(_grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.AT_LEAST_ONE_IDX, prodOccurrence);\n        return this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n    }\n    atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, key) {\n        let lookAheadFunc = this.getLaFuncFromCache(key);\n        let action;\n        if (typeof actionORMethodDef !== \"function\") {\n            action = actionORMethodDef.DEF;\n            const predicate = actionORMethodDef.GATE;\n            // predicate present\n            if (predicate !== undefined) {\n                const orgLookaheadFunction = lookAheadFunc;\n                lookAheadFunc = () => {\n                    return predicate.call(this) && orgLookaheadFunction.call(this);\n                };\n            }\n        }\n        else {\n            action = actionORMethodDef;\n        }\n        if (lookAheadFunc.call(this) === true) {\n            let notStuck = this.doSingleRepetition(action);\n            while (lookAheadFunc.call(this) === true &&\n                notStuck === true) {\n                notStuck = this.doSingleRepetition(action);\n            }\n        }\n        else {\n            throw this.raiseEarlyExitException(prodOccurrence, _grammar_lookahead_js__WEBPACK_IMPORTED_MODULE_2__.PROD_TYPE.REPETITION_MANDATORY, actionORMethodDef.ERR_MSG);\n        }\n        // note that while it may seem that this can cause an error because by using a recursive call to\n        // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n        // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        this.attemptInRepetitionRecovery(this.atLeastOneInternal, [prodOccurrence, actionORMethodDef], lookAheadFunc, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.AT_LEAST_ONE_IDX, prodOccurrence, _grammar_interpreter_js__WEBPACK_IMPORTED_MODULE_3__.NextTerminalAfterAtLeastOneWalker);\n    }\n    atLeastOneSepFirstInternal(prodOccurrence, options) {\n        const laKey = this.getKeyForAutomaticLookahead(_grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.AT_LEAST_ONE_SEP_IDX, prodOccurrence);\n        this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n    }\n    atLeastOneSepFirstInternalLogic(prodOccurrence, options, key) {\n        const action = options.DEF;\n        const separator = options.SEP;\n        const firstIterationLookaheadFunc = this.getLaFuncFromCache(key);\n        // 1st iteration\n        if (firstIterationLookaheadFunc.call(this) === true) {\n            action.call(this);\n            //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n            //  because it is only needed in error recovery scenarios.\n            const separatorLookAheadFunc = () => {\n                return this.tokenMatcher(this.LA(1), separator);\n            };\n            // 2nd..nth iterations\n            while (this.tokenMatcher(this.LA(1), separator) === true) {\n                // note that this CONSUME will never enter recovery because\n                // the separatorLookAheadFunc checks that the separator really does exist.\n                this.CONSUME(separator);\n                // No need for checking infinite loop here due to consuming the separator.\n                action.call(this);\n            }\n            // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n            this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [\n                prodOccurrence,\n                separator,\n                separatorLookAheadFunc,\n                action,\n                _grammar_interpreter_js__WEBPACK_IMPORTED_MODULE_3__.NextTerminalAfterAtLeastOneSepWalker,\n            ], separatorLookAheadFunc, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.AT_LEAST_ONE_SEP_IDX, prodOccurrence, _grammar_interpreter_js__WEBPACK_IMPORTED_MODULE_3__.NextTerminalAfterAtLeastOneSepWalker);\n        }\n        else {\n            throw this.raiseEarlyExitException(prodOccurrence, _grammar_lookahead_js__WEBPACK_IMPORTED_MODULE_2__.PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, options.ERR_MSG);\n        }\n    }\n    manyInternal(prodOccurrence, actionORMethodDef) {\n        const laKey = this.getKeyForAutomaticLookahead(_grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.MANY_IDX, prodOccurrence);\n        return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n    }\n    manyInternalLogic(prodOccurrence, actionORMethodDef, key) {\n        let lookaheadFunction = this.getLaFuncFromCache(key);\n        let action;\n        if (typeof actionORMethodDef !== \"function\") {\n            action = actionORMethodDef.DEF;\n            const predicate = actionORMethodDef.GATE;\n            // predicate present\n            if (predicate !== undefined) {\n                const orgLookaheadFunction = lookaheadFunction;\n                lookaheadFunction = () => {\n                    return predicate.call(this) && orgLookaheadFunction.call(this);\n                };\n            }\n        }\n        else {\n            action = actionORMethodDef;\n        }\n        let notStuck = true;\n        while (lookaheadFunction.call(this) === true && notStuck === true) {\n            notStuck = this.doSingleRepetition(action);\n        }\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        this.attemptInRepetitionRecovery(this.manyInternal, [prodOccurrence, actionORMethodDef], lookaheadFunction, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.MANY_IDX, prodOccurrence, _grammar_interpreter_js__WEBPACK_IMPORTED_MODULE_3__.NextTerminalAfterManyWalker, \n        // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n        // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n        // An infinite loop cannot occur as:\n        // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n        // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n        notStuck);\n    }\n    manySepFirstInternal(prodOccurrence, options) {\n        const laKey = this.getKeyForAutomaticLookahead(_grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.MANY_SEP_IDX, prodOccurrence);\n        this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n    }\n    manySepFirstInternalLogic(prodOccurrence, options, key) {\n        const action = options.DEF;\n        const separator = options.SEP;\n        const firstIterationLaFunc = this.getLaFuncFromCache(key);\n        // 1st iteration\n        if (firstIterationLaFunc.call(this) === true) {\n            action.call(this);\n            const separatorLookAheadFunc = () => {\n                return this.tokenMatcher(this.LA(1), separator);\n            };\n            // 2nd..nth iterations\n            while (this.tokenMatcher(this.LA(1), separator) === true) {\n                // note that this CONSUME will never enter recovery because\n                // the separatorLookAheadFunc checks that the separator really does exist.\n                this.CONSUME(separator);\n                // No need for checking infinite loop here due to consuming the separator.\n                action.call(this);\n            }\n            // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n            this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [\n                prodOccurrence,\n                separator,\n                separatorLookAheadFunc,\n                action,\n                _grammar_interpreter_js__WEBPACK_IMPORTED_MODULE_3__.NextTerminalAfterManySepWalker,\n            ], separatorLookAheadFunc, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.MANY_SEP_IDX, prodOccurrence, _grammar_interpreter_js__WEBPACK_IMPORTED_MODULE_3__.NextTerminalAfterManySepWalker);\n        }\n    }\n    repetitionSepSecondInternal(prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker) {\n        while (separatorLookAheadFunc()) {\n            // note that this CONSUME will never enter recovery because\n            // the separatorLookAheadFunc checks that the separator really does exist.\n            this.CONSUME(separator);\n            action.call(this);\n        }\n        // we can only arrive to this function after an error\n        // has occurred (hence the name 'second') so the following\n        // IF will always be entered, its possible to remove it...\n        // however it is kept to avoid confusion and be consistent.\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        /* istanbul ignore else */\n        this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [\n            prodOccurrence,\n            separator,\n            separatorLookAheadFunc,\n            action,\n            nextTerminalAfterWalker,\n        ], separatorLookAheadFunc, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.AT_LEAST_ONE_SEP_IDX, prodOccurrence, nextTerminalAfterWalker);\n    }\n    doSingleRepetition(action) {\n        const beforeIteration = this.getLexerPosition();\n        action.call(this);\n        const afterIteration = this.getLexerPosition();\n        // This boolean will indicate if this repetition progressed\n        // or if we are \"stuck\" (potential infinite loop in the repetition).\n        return afterIteration > beforeIteration;\n    }\n    orInternal(altsOrOpts, occurrence) {\n        const laKey = this.getKeyForAutomaticLookahead(_grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.OR_IDX, occurrence);\n        const alts = (0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF;\n        const laFunc = this.getLaFuncFromCache(laKey);\n        const altIdxToTake = laFunc.call(this, alts);\n        if (altIdxToTake !== undefined) {\n            const chosenAlternative = alts[altIdxToTake];\n            return chosenAlternative.ALT.call(this);\n        }\n        this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);\n    }\n    ruleFinallyStateUpdate() {\n        this.RULE_STACK.pop();\n        this.RULE_OCCURRENCE_STACK.pop();\n        // NOOP when cst is disabled\n        this.cstFinallyStateUpdate();\n        if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n            const firstRedundantTok = this.LA(1);\n            const errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n                firstRedundant: firstRedundantTok,\n                ruleName: this.getCurrRuleFullName(),\n            });\n            this.SAVE_ERROR(new _exceptions_public_js__WEBPACK_IMPORTED_MODULE_1__.NotAllInputParsedException(errMsg, firstRedundantTok));\n        }\n    }\n    subruleInternal(ruleToCall, idx, options) {\n        let ruleResult;\n        try {\n            const args = options !== undefined ? options.ARGS : undefined;\n            this.subruleIdx = idx;\n            ruleResult = ruleToCall.apply(this, args);\n            this.cstPostNonTerminal(ruleResult, options !== undefined && options.LABEL !== undefined\n                ? options.LABEL\n                : ruleToCall.ruleName);\n            return ruleResult;\n        }\n        catch (e) {\n            throw this.subruleInternalError(e, options, ruleToCall.ruleName);\n        }\n    }\n    subruleInternalError(e, options, ruleName) {\n        if ((0,_exceptions_public_js__WEBPACK_IMPORTED_MODULE_1__.isRecognitionException)(e) && e.partialCstResult !== undefined) {\n            this.cstPostNonTerminal(e.partialCstResult, options !== undefined && options.LABEL !== undefined\n                ? options.LABEL\n                : ruleName);\n            delete e.partialCstResult;\n        }\n        throw e;\n    }\n    consumeInternal(tokType, idx, options) {\n        let consumedToken;\n        try {\n            const nextToken = this.LA(1);\n            if (this.tokenMatcher(nextToken, tokType) === true) {\n                this.consumeToken();\n                consumedToken = nextToken;\n            }\n            else {\n                this.consumeInternalError(tokType, nextToken, options);\n            }\n        }\n        catch (eFromConsumption) {\n            consumedToken = this.consumeInternalRecovery(tokType, idx, eFromConsumption);\n        }\n        this.cstPostTerminal(options !== undefined && options.LABEL !== undefined\n            ? options.LABEL\n            : tokType.name, consumedToken);\n        return consumedToken;\n    }\n    consumeInternalError(tokType, nextToken, options) {\n        let msg;\n        const previousToken = this.LA(0);\n        if (options !== undefined && options.ERR_MSG) {\n            msg = options.ERR_MSG;\n        }\n        else {\n            msg = this.errorMessageProvider.buildMismatchTokenMessage({\n                expected: tokType,\n                actual: nextToken,\n                previous: previousToken,\n                ruleName: this.getCurrRuleFullName(),\n            });\n        }\n        throw this.SAVE_ERROR(new _exceptions_public_js__WEBPACK_IMPORTED_MODULE_1__.MismatchedTokenException(msg, nextToken, previousToken));\n    }\n    consumeInternalRecovery(tokType, idx, eFromConsumption) {\n        // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n        // but the original syntax could have been parsed successfully without any backtracking + recovery\n        if (this.recoveryEnabled &&\n            // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n            eFromConsumption.name === \"MismatchedTokenException\" &&\n            !this.isBackTracking()) {\n            const follows = this.getFollowsForInRuleRecovery(tokType, idx);\n            try {\n                return this.tryInRuleRecovery(tokType, follows);\n            }\n            catch (eFromInRuleRecovery) {\n                if (eFromInRuleRecovery.name === _recoverable_js__WEBPACK_IMPORTED_MODULE_5__.IN_RULE_RECOVERY_EXCEPTION) {\n                    // failed in RuleRecovery.\n                    // throw the original error in order to trigger reSync error recovery\n                    throw eFromConsumption;\n                }\n                else {\n                    throw eFromInRuleRecovery;\n                }\n            }\n        }\n        else {\n            throw eFromConsumption;\n        }\n    }\n    saveRecogState() {\n        // errors is a getter which will clone the errors array\n        const savedErrors = this.errors;\n        const savedRuleStack = (0,lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(this.RULE_STACK);\n        return {\n            errors: savedErrors,\n            lexerState: this.exportLexerState(),\n            RULE_STACK: savedRuleStack,\n            CST_STACK: this.CST_STACK,\n        };\n    }\n    reloadRecogState(newState) {\n        this.errors = newState.errors;\n        this.importLexerState(newState.lexerState);\n        this.RULE_STACK = newState.RULE_STACK;\n    }\n    ruleInvocationStateUpdate(shortName, fullName, idxInCallingRule) {\n        this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n        this.RULE_STACK.push(shortName);\n        // NOOP when cst is disabled\n        this.cstInvocationStateUpdate(fullName);\n    }\n    isBackTracking() {\n        return this.isBackTrackingStack.length !== 0;\n    }\n    getCurrRuleFullName() {\n        const shortName = this.getLastExplicitRuleShortName();\n        return this.shortRuleNameToFull[shortName];\n    }\n    shortRuleNameToFullName(shortName) {\n        return this.shortRuleNameToFull[shortName];\n    }\n    isAtEndOfInput() {\n        return this.tokenMatcher(this.LA(1), _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_6__.EOF);\n    }\n    reset() {\n        this.resetLexerState();\n        this.subruleIdx = 0;\n        this.isBackTrackingStack = [];\n        this.errors = [];\n        this.RULE_STACK = [];\n        // TODO: extract a specific reset for TreeBuilder trait\n        this.CST_STACK = [];\n        this.RULE_OCCURRENCE_STACK = [];\n    }\n}\n//# sourceMappingURL=recognizer_engine.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/recognizer_engine.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/recoverable.js":
/*!****************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/traits/recoverable.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EOF_FOLLOW_KEY: () => (/* binding */ EOF_FOLLOW_KEY),\n/* harmony export */   IN_RULE_RECOVERY_EXCEPTION: () => (/* binding */ IN_RULE_RECOVERY_EXCEPTION),\n/* harmony export */   InRuleRecoveryException: () => (/* binding */ InRuleRecoveryException),\n/* harmony export */   Recoverable: () => (/* binding */ Recoverable),\n/* harmony export */   attemptInRepetitionRecovery: () => (/* binding */ attemptInRepetitionRecovery)\n/* harmony export */ });\n/* harmony import */ var _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../scan/tokens_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens_public.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/dropRight.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/find.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/includes.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/map.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/flatten.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/clone.js\");\n/* harmony import */ var _exceptions_public_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../exceptions_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/exceptions_public.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../constants.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/constants.js\");\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n\n\n\n\n\nconst EOF_FOLLOW_KEY = {};\nconst IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\nclass InRuleRecoveryException extends Error {\n    constructor(message) {\n        super(message);\n        this.name = IN_RULE_RECOVERY_EXCEPTION;\n    }\n}\n/**\n * This trait is responsible for the error recovery and fault tolerant logic\n */\nclass Recoverable {\n    initRecoverable(config) {\n        this.firstAfterRepMap = {};\n        this.resyncFollows = {};\n        this.recoveryEnabled = (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, \"recoveryEnabled\")\n            ? config.recoveryEnabled // assumes end user provides the correct config value/type\n            : _parser_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_PARSER_CONFIG.recoveryEnabled;\n        // performance optimization, NOOP will be inlined which\n        // effectively means that this optional feature does not exist\n        // when not used.\n        if (this.recoveryEnabled) {\n            this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n        }\n    }\n    getTokenToInsert(tokType) {\n        const tokToInsert = (0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.createTokenInstance)(tokType, \"\", NaN, NaN, NaN, NaN, NaN, NaN);\n        tokToInsert.isInsertedInRecovery = true;\n        return tokToInsert;\n    }\n    canTokenTypeBeInsertedInRecovery(tokType) {\n        return true;\n    }\n    canTokenTypeBeDeletedInRecovery(tokType) {\n        return true;\n    }\n    tryInRepetitionRecovery(grammarRule, grammarRuleArgs, lookAheadFunc, expectedTokType) {\n        // TODO: can the resyncTokenType be cached?\n        const reSyncTokType = this.findReSyncTokenType();\n        const savedLexerState = this.exportLexerState();\n        const resyncedTokens = [];\n        let passedResyncPoint = false;\n        const nextTokenWithoutResync = this.LA(1);\n        let currToken = this.LA(1);\n        const generateErrorMessage = () => {\n            const previousToken = this.LA(0);\n            // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n            // the error that would have been thrown\n            const msg = this.errorMessageProvider.buildMismatchTokenMessage({\n                expected: expectedTokType,\n                actual: nextTokenWithoutResync,\n                previous: previousToken,\n                ruleName: this.getCurrRuleFullName(),\n            });\n            const error = new _exceptions_public_js__WEBPACK_IMPORTED_MODULE_1__.MismatchedTokenException(msg, nextTokenWithoutResync, this.LA(0));\n            // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n            error.resyncedTokens = (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(resyncedTokens);\n            this.SAVE_ERROR(error);\n        };\n        while (!passedResyncPoint) {\n            // re-synced to a point where we can safely exit the repetition/\n            if (this.tokenMatcher(currToken, expectedTokType)) {\n                generateErrorMessage();\n                return; // must return here to avoid reverting the inputIdx\n            }\n            else if (lookAheadFunc.call(this)) {\n                // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n                generateErrorMessage();\n                // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n                grammarRule.apply(this, grammarRuleArgs);\n                return; // must return here to avoid reverting the inputIdx\n            }\n            else if (this.tokenMatcher(currToken, reSyncTokType)) {\n                passedResyncPoint = true;\n            }\n            else {\n                currToken = this.SKIP_TOKEN();\n                this.addToResyncTokens(currToken, resyncedTokens);\n            }\n        }\n        // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n        // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n        // \"between rules\" resync recovery later in the flow.\n        this.importLexerState(savedLexerState);\n    }\n    shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck) {\n        // Edge case of arriving from a MANY repetition which is stuck\n        // Attempting recovery in this case could cause an infinite loop\n        if (notStuck === false) {\n            return false;\n        }\n        // no need to recover, next token is what we expect...\n        if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n            return false;\n        }\n        // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n        // and prefer some backtracking path that includes recovered errors.\n        if (this.isBackTracking()) {\n            return false;\n        }\n        // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n        // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n        //noinspection RedundantIfStatementJS\n        if (this.canPerformInRuleRecovery(expectTokAfterLastMatch, this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx))) {\n            return false;\n        }\n        return true;\n    }\n    // Error Recovery functionality\n    getFollowsForInRuleRecovery(tokType, tokIdxInRule) {\n        const grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n        const follows = this.getNextPossibleTokenTypes(grammarPath);\n        return follows;\n    }\n    tryInRuleRecovery(expectedTokType, follows) {\n        if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n            const tokToInsert = this.getTokenToInsert(expectedTokType);\n            return tokToInsert;\n        }\n        if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n            const nextTok = this.SKIP_TOKEN();\n            this.consumeToken();\n            return nextTok;\n        }\n        throw new InRuleRecoveryException(\"sad sad panda\");\n    }\n    canPerformInRuleRecovery(expectedToken, follows) {\n        return (this.canRecoverWithSingleTokenInsertion(expectedToken, follows) ||\n            this.canRecoverWithSingleTokenDeletion(expectedToken));\n    }\n    canRecoverWithSingleTokenInsertion(expectedTokType, follows) {\n        if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n            return false;\n        }\n        // must know the possible following tokens to perform single token insertion\n        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(follows)) {\n            return false;\n        }\n        const mismatchedTok = this.LA(1);\n        const isMisMatchedTokInFollows = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(follows, (possibleFollowsTokType) => {\n            return this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n        }) !== undefined;\n        return isMisMatchedTokInFollows;\n    }\n    canRecoverWithSingleTokenDeletion(expectedTokType) {\n        if (!this.canTokenTypeBeDeletedInRecovery(expectedTokType)) {\n            return false;\n        }\n        const isNextTokenWhatIsExpected = this.tokenMatcher(this.LA(2), expectedTokType);\n        return isNextTokenWhatIsExpected;\n    }\n    isInCurrentRuleReSyncSet(tokenTypeIdx) {\n        const followKey = this.getCurrFollowKey();\n        const currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n        return (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(currentRuleReSyncSet, tokenTypeIdx);\n    }\n    findReSyncTokenType() {\n        const allPossibleReSyncTokTypes = this.flattenFollowSet();\n        // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n        let nextToken = this.LA(1);\n        let k = 2;\n        while (true) {\n            const foundMatch = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(allPossibleReSyncTokTypes, (resyncTokType) => {\n                const canMatch = (0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.tokenMatcher)(nextToken, resyncTokType);\n                return canMatch;\n            });\n            if (foundMatch !== undefined) {\n                return foundMatch;\n            }\n            nextToken = this.LA(k);\n            k++;\n        }\n    }\n    getCurrFollowKey() {\n        // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n        if (this.RULE_STACK.length === 1) {\n            return EOF_FOLLOW_KEY;\n        }\n        const currRuleShortName = this.getLastExplicitRuleShortName();\n        const currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n        const prevRuleShortName = this.getPreviousExplicitRuleShortName();\n        return {\n            ruleName: this.shortRuleNameToFullName(currRuleShortName),\n            idxInCallingRule: currRuleIdx,\n            inRule: this.shortRuleNameToFullName(prevRuleShortName),\n        };\n    }\n    buildFullFollowKeyStack() {\n        const explicitRuleStack = this.RULE_STACK;\n        const explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n        return (0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(explicitRuleStack, (ruleName, idx) => {\n            if (idx === 0) {\n                return EOF_FOLLOW_KEY;\n            }\n            return {\n                ruleName: this.shortRuleNameToFullName(ruleName),\n                idxInCallingRule: explicitOccurrenceStack[idx],\n                inRule: this.shortRuleNameToFullName(explicitRuleStack[idx - 1]),\n            };\n        });\n    }\n    flattenFollowSet() {\n        const followStack = (0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(this.buildFullFollowKeyStack(), (currKey) => {\n            return this.getFollowSetFromFollowKey(currKey);\n        });\n        return (0,lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(followStack);\n    }\n    getFollowSetFromFollowKey(followKey) {\n        if (followKey === EOF_FOLLOW_KEY) {\n            return [_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.EOF];\n        }\n        const followName = followKey.ruleName + followKey.idxInCallingRule + _constants_js__WEBPACK_IMPORTED_MODULE_2__.IN + followKey.inRule;\n        return this.resyncFollows[followName];\n    }\n    // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n    // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n    addToResyncTokens(token, resyncTokens) {\n        if (!this.tokenMatcher(token, _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.EOF)) {\n            resyncTokens.push(token);\n        }\n        return resyncTokens;\n    }\n    reSyncTo(tokType) {\n        const resyncedTokens = [];\n        let nextTok = this.LA(1);\n        while (this.tokenMatcher(nextTok, tokType) === false) {\n            nextTok = this.SKIP_TOKEN();\n            this.addToResyncTokens(nextTok, resyncedTokens);\n        }\n        // the last token is not part of the error.\n        return (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(resyncedTokens);\n    }\n    attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n        // by default this is a NO-OP\n        // The actual implementation is with the function(not method) below\n    }\n    getCurrentGrammarPath(tokType, tokIdxInRule) {\n        const pathRuleStack = this.getHumanReadableRuleStack();\n        const pathOccurrenceStack = (0,lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(this.RULE_OCCURRENCE_STACK);\n        const grammarPath = {\n            ruleStack: pathRuleStack,\n            occurrenceStack: pathOccurrenceStack,\n            lastTok: tokType,\n            lastTokOccurrence: tokIdxInRule,\n        };\n        return grammarPath;\n    }\n    getHumanReadableRuleStack() {\n        return (0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(this.RULE_STACK, (currShortName) => this.shortRuleNameToFullName(currShortName));\n    }\n}\nfunction attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n    const key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n    let firstAfterRepInfo = this.firstAfterRepMap[key];\n    if (firstAfterRepInfo === undefined) {\n        const currRuleName = this.getCurrRuleFullName();\n        const ruleGrammar = this.getGAstProductions()[currRuleName];\n        const walker = new nextToksWalker(ruleGrammar, prodOccurrence);\n        firstAfterRepInfo = walker.startWalking();\n        this.firstAfterRepMap[key] = firstAfterRepInfo;\n    }\n    let expectTokAfterLastMatch = firstAfterRepInfo.token;\n    let nextTokIdx = firstAfterRepInfo.occurrence;\n    const isEndOfRule = firstAfterRepInfo.isEndOfRule;\n    // special edge case of a TOP most repetition after which the input should END.\n    // this will force an attempt for inRule recovery in that scenario.\n    if (this.RULE_STACK.length === 1 &&\n        isEndOfRule &&\n        expectTokAfterLastMatch === undefined) {\n        expectTokAfterLastMatch = _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.EOF;\n        nextTokIdx = 1;\n    }\n    // We don't have anything to re-sync to...\n    // this condition was extracted from `shouldInRepetitionRecoveryBeTried` to act as a type-guard\n    if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n        return;\n    }\n    if (this.shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck)) {\n        // TODO: performance optimization: instead of passing the original args here, we modify\n        // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n        // to avoid searching the cache for it once more.\n        this.tryInRepetitionRecovery(prodFunc, args, lookaheadFunc, expectTokAfterLastMatch);\n    }\n}\n//# sourceMappingURL=recoverable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/recoverable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/tree_builder.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/traits/tree_builder.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TreeBuilder: () => (/* binding */ TreeBuilder)\n/* harmony export */ });\n/* harmony import */ var _cst_cst_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cst/cst.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/cst/cst.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/noop.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isUndefined.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/keys.js\");\n/* harmony import */ var _cst_cst_visitor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../cst/cst_visitor.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/cst/cst_visitor.js\");\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n\n\n\n\n/**\n * This trait is responsible for the CST building logic.\n */\nclass TreeBuilder {\n    initTreeBuilder(config) {\n        this.CST_STACK = [];\n        // outputCst is no longer exposed/defined in the pubic API\n        this.outputCst = config.outputCst;\n        this.nodeLocationTracking = (0,lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(config, \"nodeLocationTracking\")\n            ? config.nodeLocationTracking // assumes end user provides the correct config value/type\n            : _parser_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n        if (!this.outputCst) {\n            this.cstInvocationStateUpdate = lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n            this.cstFinallyStateUpdate = lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n            this.cstPostTerminal = lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n            this.cstPostNonTerminal = lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n            this.cstPostRule = lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n        }\n        else {\n            if (/full/i.test(this.nodeLocationTracking)) {\n                if (this.recoveryEnabled) {\n                    this.setNodeLocationFromToken = _cst_cst_js__WEBPACK_IMPORTED_MODULE_0__.setNodeLocationFull;\n                    this.setNodeLocationFromNode = _cst_cst_js__WEBPACK_IMPORTED_MODULE_0__.setNodeLocationFull;\n                    this.cstPostRule = lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n                    this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n                }\n                else {\n                    this.setNodeLocationFromToken = lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n                    this.setNodeLocationFromNode = lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n                    this.cstPostRule = this.cstPostRuleFull;\n                    this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n                }\n            }\n            else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n                if (this.recoveryEnabled) {\n                    this.setNodeLocationFromToken = _cst_cst_js__WEBPACK_IMPORTED_MODULE_0__.setNodeLocationOnlyOffset;\n                    this.setNodeLocationFromNode = _cst_cst_js__WEBPACK_IMPORTED_MODULE_0__.setNodeLocationOnlyOffset;\n                    this.cstPostRule = lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n                    this.setInitialNodeLocation =\n                        this.setInitialNodeLocationOnlyOffsetRecovery;\n                }\n                else {\n                    this.setNodeLocationFromToken = lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n                    this.setNodeLocationFromNode = lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n                    this.cstPostRule = this.cstPostRuleOnlyOffset;\n                    this.setInitialNodeLocation =\n                        this.setInitialNodeLocationOnlyOffsetRegular;\n                }\n            }\n            else if (/none/i.test(this.nodeLocationTracking)) {\n                this.setNodeLocationFromToken = lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n                this.setNodeLocationFromNode = lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n                this.cstPostRule = lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n                this.setInitialNodeLocation = lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n            }\n            else {\n                throw Error(`Invalid <nodeLocationTracking> config option: \"${config.nodeLocationTracking}\"`);\n            }\n        }\n    }\n    setInitialNodeLocationOnlyOffsetRecovery(cstNode) {\n        cstNode.location = {\n            startOffset: NaN,\n            endOffset: NaN,\n        };\n    }\n    setInitialNodeLocationOnlyOffsetRegular(cstNode) {\n        cstNode.location = {\n            // without error recovery the starting Location of a new CstNode is guaranteed\n            // To be the next Token's startOffset (for valid inputs).\n            // For invalid inputs there won't be any CSTOutput so this potential\n            // inaccuracy does not matter\n            startOffset: this.LA(1).startOffset,\n            endOffset: NaN,\n        };\n    }\n    setInitialNodeLocationFullRecovery(cstNode) {\n        cstNode.location = {\n            startOffset: NaN,\n            startLine: NaN,\n            startColumn: NaN,\n            endOffset: NaN,\n            endLine: NaN,\n            endColumn: NaN,\n        };\n    }\n    /**\n       *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n  \n       * @param cstNode\n       */\n    setInitialNodeLocationFullRegular(cstNode) {\n        const nextToken = this.LA(1);\n        cstNode.location = {\n            startOffset: nextToken.startOffset,\n            startLine: nextToken.startLine,\n            startColumn: nextToken.startColumn,\n            endOffset: NaN,\n            endLine: NaN,\n            endColumn: NaN,\n        };\n    }\n    cstInvocationStateUpdate(fullRuleName) {\n        const cstNode = {\n            name: fullRuleName,\n            children: Object.create(null),\n        };\n        this.setInitialNodeLocation(cstNode);\n        this.CST_STACK.push(cstNode);\n    }\n    cstFinallyStateUpdate() {\n        this.CST_STACK.pop();\n    }\n    cstPostRuleFull(ruleCstNode) {\n        // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n        const prevToken = this.LA(0);\n        const loc = ruleCstNode.location;\n        // If this condition is true it means we consumed at least one Token\n        // In this CstNode.\n        if (loc.startOffset <= prevToken.startOffset === true) {\n            loc.endOffset = prevToken.endOffset;\n            loc.endLine = prevToken.endLine;\n            loc.endColumn = prevToken.endColumn;\n        }\n        // \"empty\" CstNode edge case\n        else {\n            loc.startOffset = NaN;\n            loc.startLine = NaN;\n            loc.startColumn = NaN;\n        }\n    }\n    cstPostRuleOnlyOffset(ruleCstNode) {\n        const prevToken = this.LA(0);\n        // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n        const loc = ruleCstNode.location;\n        // If this condition is true it means we consumed at least one Token\n        // In this CstNode.\n        if (loc.startOffset <= prevToken.startOffset === true) {\n            loc.endOffset = prevToken.endOffset;\n        }\n        // \"empty\" CstNode edge case\n        else {\n            loc.startOffset = NaN;\n        }\n    }\n    cstPostTerminal(key, consumedToken) {\n        const rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n        (0,_cst_cst_js__WEBPACK_IMPORTED_MODULE_0__.addTerminalToCst)(rootCst, consumedToken, key);\n        // This is only used when **both** error recovery and CST Output are enabled.\n        this.setNodeLocationFromToken(rootCst.location, consumedToken);\n    }\n    cstPostNonTerminal(ruleCstResult, ruleName) {\n        const preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n        (0,_cst_cst_js__WEBPACK_IMPORTED_MODULE_0__.addNoneTerminalToCst)(preCstNode, ruleName, ruleCstResult);\n        // This is only used when **both** error recovery and CST Output are enabled.\n        this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location);\n    }\n    getBaseCstVisitorConstructor() {\n        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this.baseCstVisitorConstructor)) {\n            const newBaseCstVisitorConstructor = (0,_cst_cst_visitor_js__WEBPACK_IMPORTED_MODULE_1__.createBaseSemanticVisitorConstructor)(this.className, (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(this.gastProductionsCache));\n            this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n            return newBaseCstVisitorConstructor;\n        }\n        return this.baseCstVisitorConstructor;\n    }\n    getBaseCstVisitorConstructorWithDefaults() {\n        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this.baseCstVisitorWithDefaultsConstructor)) {\n            const newConstructor = (0,_cst_cst_visitor_js__WEBPACK_IMPORTED_MODULE_1__.createBaseVisitorConstructorWithDefaults)(this.className, (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(this.gastProductionsCache), this.getBaseCstVisitorConstructor());\n            this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n            return newConstructor;\n        }\n        return this.baseCstVisitorWithDefaultsConstructor;\n    }\n    getLastExplicitRuleShortName() {\n        const ruleStack = this.RULE_STACK;\n        return ruleStack[ruleStack.length - 1];\n    }\n    getPreviousExplicitRuleShortName() {\n        const ruleStack = this.RULE_STACK;\n        return ruleStack[ruleStack.length - 2];\n    }\n    getLastExplicitRuleOccurrenceIndex() {\n        const occurrenceStack = this.RULE_OCCURRENCE_STACK;\n        return occurrenceStack[occurrenceStack.length - 1];\n    }\n}\n//# sourceMappingURL=tree_builder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/tree_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/utils/apply_mixins.js":
/*!****************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/utils/apply_mixins.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyMixins: () => (/* binding */ applyMixins)\n/* harmony export */ });\nfunction applyMixins(derivedCtor, baseCtors) {\n    baseCtors.forEach((baseCtor) => {\n        const baseProto = baseCtor.prototype;\n        Object.getOwnPropertyNames(baseProto).forEach((propName) => {\n            if (propName === \"constructor\") {\n                return;\n            }\n            const basePropDescriptor = Object.getOwnPropertyDescriptor(baseProto, propName);\n            // Handle Accessors\n            if (basePropDescriptor &&\n                (basePropDescriptor.get || basePropDescriptor.set)) {\n                Object.defineProperty(derivedCtor.prototype, propName, basePropDescriptor);\n            }\n            else {\n                derivedCtor.prototype[propName] = baseCtor.prototype[propName];\n            }\n        });\n    });\n}\n//# sourceMappingURL=apply_mixins.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL3BhcnNlci91dGlscy9hcHBseV9taXhpbnMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYWxleGFuZGVyLm5vYmxlL2FwZXgtdG9vbGJveC9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL3BhcnNlci91dGlscy9hcHBseV9taXhpbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGFwcGx5TWl4aW5zKGRlcml2ZWRDdG9yLCBiYXNlQ3RvcnMpIHtcbiAgICBiYXNlQ3RvcnMuZm9yRWFjaCgoYmFzZUN0b3IpID0+IHtcbiAgICAgICAgY29uc3QgYmFzZVByb3RvID0gYmFzZUN0b3IucHJvdG90eXBlO1xuICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhiYXNlUHJvdG8pLmZvckVhY2goKHByb3BOYW1lKSA9PiB7XG4gICAgICAgICAgICBpZiAocHJvcE5hbWUgPT09IFwiY29uc3RydWN0b3JcIikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGJhc2VQcm9wRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZVByb3RvLCBwcm9wTmFtZSk7XG4gICAgICAgICAgICAvLyBIYW5kbGUgQWNjZXNzb3JzXG4gICAgICAgICAgICBpZiAoYmFzZVByb3BEZXNjcmlwdG9yICYmXG4gICAgICAgICAgICAgICAgKGJhc2VQcm9wRGVzY3JpcHRvci5nZXQgfHwgYmFzZVByb3BEZXNjcmlwdG9yLnNldCkpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGVyaXZlZEN0b3IucHJvdG90eXBlLCBwcm9wTmFtZSwgYmFzZVByb3BEZXNjcmlwdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlcml2ZWRDdG9yLnByb3RvdHlwZVtwcm9wTmFtZV0gPSBiYXNlQ3Rvci5wcm90b3R5cGVbcHJvcE5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcGx5X21peGlucy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/utils/apply_mixins.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/scan/lexer.js":
/*!*******************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/scan/lexer.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_MODE: () => (/* binding */ DEFAULT_MODE),\n/* harmony export */   LineTerminatorOptimizedTester: () => (/* binding */ LineTerminatorOptimizedTester),\n/* harmony export */   MODES: () => (/* binding */ MODES),\n/* harmony export */   SUPPORT_STICKY: () => (/* binding */ SUPPORT_STICKY),\n/* harmony export */   addStartOfInput: () => (/* binding */ addStartOfInput),\n/* harmony export */   addStickyFlag: () => (/* binding */ addStickyFlag),\n/* harmony export */   analyzeTokenTypes: () => (/* binding */ analyzeTokenTypes),\n/* harmony export */   buildLineBreakIssueMessage: () => (/* binding */ buildLineBreakIssueMessage),\n/* harmony export */   charCodeToOptimizedIndex: () => (/* binding */ charCodeToOptimizedIndex),\n/* harmony export */   cloneEmptyGroups: () => (/* binding */ cloneEmptyGroups),\n/* harmony export */   disableSticky: () => (/* binding */ disableSticky),\n/* harmony export */   enableSticky: () => (/* binding */ enableSticky),\n/* harmony export */   findDuplicatePatterns: () => (/* binding */ findDuplicatePatterns),\n/* harmony export */   findEmptyMatchRegExps: () => (/* binding */ findEmptyMatchRegExps),\n/* harmony export */   findEndOfInputAnchor: () => (/* binding */ findEndOfInputAnchor),\n/* harmony export */   findInvalidGroupType: () => (/* binding */ findInvalidGroupType),\n/* harmony export */   findInvalidPatterns: () => (/* binding */ findInvalidPatterns),\n/* harmony export */   findMissingPatterns: () => (/* binding */ findMissingPatterns),\n/* harmony export */   findModesThatDoNotExist: () => (/* binding */ findModesThatDoNotExist),\n/* harmony export */   findStartOfInputAnchor: () => (/* binding */ findStartOfInputAnchor),\n/* harmony export */   findUnreachablePatterns: () => (/* binding */ findUnreachablePatterns),\n/* harmony export */   findUnsupportedFlags: () => (/* binding */ findUnsupportedFlags),\n/* harmony export */   isCustomPattern: () => (/* binding */ isCustomPattern),\n/* harmony export */   isShortPattern: () => (/* binding */ isShortPattern),\n/* harmony export */   minOptimizationVal: () => (/* binding */ minOptimizationVal),\n/* harmony export */   performRuntimeChecks: () => (/* binding */ performRuntimeChecks),\n/* harmony export */   performWarningRuntimeChecks: () => (/* binding */ performWarningRuntimeChecks),\n/* harmony export */   validatePatterns: () => (/* binding */ validatePatterns)\n/* harmony export */ });\n/* harmony import */ var _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chevrotain/regexp-to-ast */ \"(ssr)/./node_modules/@chevrotain/regexp-to-ast/lib/src/api.js\");\n/* harmony import */ var _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lexer_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/lexer_public.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/defaults.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/reject.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/map.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isRegExp.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/includes.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isFunction.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isString.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isUndefined.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isArray.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/indexOf.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/reduce.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/filter.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/difference.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/compact.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/head.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/find.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/flatten.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/values.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/keys.js\");\n/* harmony import */ var _chevrotain_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @chevrotain/utils */ \"(ssr)/./node_modules/@chevrotain/utils/lib/src/api.js\");\n/* harmony import */ var _reg_exp_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reg_exp.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/reg_exp.js\");\n/* harmony import */ var _reg_exp_parser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reg_exp_parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/reg_exp_parser.js\");\n\n\n\n\n\n\nconst PATTERN = \"PATTERN\";\nconst DEFAULT_MODE = \"defaultMode\";\nconst MODES = \"modes\";\nlet SUPPORT_STICKY = typeof new RegExp(\"(?:)\").sticky === \"boolean\";\nfunction disableSticky() {\n    SUPPORT_STICKY = false;\n}\nfunction enableSticky() {\n    SUPPORT_STICKY = true;\n}\nfunction analyzeTokenTypes(tokenTypes, options) {\n    options = (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(options, {\n        useSticky: SUPPORT_STICKY,\n        debug: false,\n        safeMode: false,\n        positionTracking: \"full\",\n        lineTerminatorCharacters: [\"\\r\", \"\\n\"],\n        tracer: (msg, action) => action(),\n    });\n    const tracer = options.tracer;\n    tracer(\"initCharCodeToOptimizedIndexMap\", () => {\n        initCharCodeToOptimizedIndexMap();\n    });\n    let onlyRelevantTypes;\n    tracer(\"Reject Lexer.NA\", () => {\n        onlyRelevantTypes = (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(tokenTypes, (currType) => {\n            return currType[PATTERN] === _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.Lexer.NA;\n        });\n    });\n    let hasCustom = false;\n    let allTransformedPatterns;\n    tracer(\"Transform Patterns\", () => {\n        hasCustom = false;\n        allTransformedPatterns = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(onlyRelevantTypes, (currType) => {\n            const currPattern = currType[PATTERN];\n            /* istanbul ignore else */\n            if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(currPattern)) {\n                const regExpSource = currPattern.source;\n                if (regExpSource.length === 1 &&\n                    // only these regExp meta characters which can appear in a length one regExp\n                    regExpSource !== \"^\" &&\n                    regExpSource !== \"$\" &&\n                    regExpSource !== \".\" &&\n                    !currPattern.ignoreCase) {\n                    return regExpSource;\n                }\n                else if (regExpSource.length === 2 &&\n                    regExpSource[0] === \"\\\\\" &&\n                    // not a meta character\n                    !(0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])([\n                        \"d\",\n                        \"D\",\n                        \"s\",\n                        \"S\",\n                        \"t\",\n                        \"r\",\n                        \"n\",\n                        \"t\",\n                        \"0\",\n                        \"c\",\n                        \"b\",\n                        \"B\",\n                        \"f\",\n                        \"v\",\n                        \"w\",\n                        \"W\",\n                    ], regExpSource[1])) {\n                    // escaped meta Characters: /\\+/ /\\[/\n                    // or redundant escaping: /\\a/\n                    // without the escaping \"\\\"\n                    return regExpSource[1];\n                }\n                else {\n                    return options.useSticky\n                        ? addStickyFlag(currPattern)\n                        : addStartOfInput(currPattern);\n                }\n            }\n            else if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(currPattern)) {\n                hasCustom = true;\n                // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n                return { exec: currPattern };\n            }\n            else if (typeof currPattern === \"object\") {\n                hasCustom = true;\n                // ICustomPattern\n                return currPattern;\n            }\n            else if (typeof currPattern === \"string\") {\n                if (currPattern.length === 1) {\n                    return currPattern;\n                }\n                else {\n                    const escapedRegExpString = currPattern.replace(/[\\\\^$.*+?()[\\]{}|]/g, \"\\\\$&\");\n                    const wrappedRegExp = new RegExp(escapedRegExpString);\n                    return options.useSticky\n                        ? addStickyFlag(wrappedRegExp)\n                        : addStartOfInput(wrappedRegExp);\n                }\n            }\n            else {\n                throw Error(\"non exhaustive match\");\n            }\n        });\n    });\n    let patternIdxToType;\n    let patternIdxToGroup;\n    let patternIdxToLongerAltIdxArr;\n    let patternIdxToPushMode;\n    let patternIdxToPopMode;\n    tracer(\"misc mapping\", () => {\n        patternIdxToType = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(onlyRelevantTypes, (currType) => currType.tokenTypeIdx);\n        patternIdxToGroup = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(onlyRelevantTypes, (clazz) => {\n            const groupName = clazz.GROUP;\n            /* istanbul ignore next */\n            if (groupName === _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.Lexer.SKIPPED) {\n                return undefined;\n            }\n            else if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(groupName)) {\n                return groupName;\n            }\n            else if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(groupName)) {\n                return false;\n            }\n            else {\n                throw Error(\"non exhaustive match\");\n            }\n        });\n        patternIdxToLongerAltIdxArr = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(onlyRelevantTypes, (clazz) => {\n            const longerAltType = clazz.LONGER_ALT;\n            if (longerAltType) {\n                const longerAltIdxArr = (0,lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(longerAltType)\n                    ? (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(longerAltType, (type) => (0,lodash_es__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(onlyRelevantTypes, type))\n                    : [(0,lodash_es__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(onlyRelevantTypes, longerAltType)];\n                return longerAltIdxArr;\n            }\n        });\n        patternIdxToPushMode = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(onlyRelevantTypes, (clazz) => clazz.PUSH_MODE);\n        patternIdxToPopMode = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(onlyRelevantTypes, (clazz) => (0,lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(clazz, \"POP_MODE\"));\n    });\n    let patternIdxToCanLineTerminator;\n    tracer(\"Line Terminator Handling\", () => {\n        const lineTerminatorCharCodes = getCharCodes(options.lineTerminatorCharacters);\n        patternIdxToCanLineTerminator = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(onlyRelevantTypes, (tokType) => false);\n        if (options.positionTracking !== \"onlyOffset\") {\n            patternIdxToCanLineTerminator = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(onlyRelevantTypes, (tokType) => {\n                if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(tokType, \"LINE_BREAKS\")) {\n                    return !!tokType.LINE_BREAKS;\n                }\n                else {\n                    return (checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false &&\n                        (0,_reg_exp_js__WEBPACK_IMPORTED_MODULE_3__.canMatchCharCode)(lineTerminatorCharCodes, tokType.PATTERN));\n                }\n            });\n        }\n    });\n    let patternIdxToIsCustom;\n    let patternIdxToShort;\n    let emptyGroups;\n    let patternIdxToConfig;\n    tracer(\"Misc Mapping #2\", () => {\n        patternIdxToIsCustom = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(onlyRelevantTypes, isCustomPattern);\n        patternIdxToShort = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(allTransformedPatterns, isShortPattern);\n        emptyGroups = (0,lodash_es__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(onlyRelevantTypes, (acc, clazz) => {\n            const groupName = clazz.GROUP;\n            if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(groupName) && !(groupName === _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.Lexer.SKIPPED)) {\n                acc[groupName] = [];\n            }\n            return acc;\n        }, {});\n        patternIdxToConfig = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(allTransformedPatterns, (x, idx) => {\n            return {\n                pattern: allTransformedPatterns[idx],\n                longerAlt: patternIdxToLongerAltIdxArr[idx],\n                canLineTerminator: patternIdxToCanLineTerminator[idx],\n                isCustom: patternIdxToIsCustom[idx],\n                short: patternIdxToShort[idx],\n                group: patternIdxToGroup[idx],\n                push: patternIdxToPushMode[idx],\n                pop: patternIdxToPopMode[idx],\n                tokenTypeIdx: patternIdxToType[idx],\n                tokenType: onlyRelevantTypes[idx],\n            };\n        });\n    });\n    let canBeOptimized = true;\n    let charCodeToPatternIdxToConfig = [];\n    if (!options.safeMode) {\n        tracer(\"First Char Optimization\", () => {\n            charCodeToPatternIdxToConfig = (0,lodash_es__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(onlyRelevantTypes, (result, currTokType, idx) => {\n                if (typeof currTokType.PATTERN === \"string\") {\n                    const charCode = currTokType.PATTERN.charCodeAt(0);\n                    const optimizedIdx = charCodeToOptimizedIndex(charCode);\n                    addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);\n                }\n                else if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(currTokType.START_CHARS_HINT)) {\n                    let lastOptimizedIdx;\n                    (0,lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(currTokType.START_CHARS_HINT, (charOrInt) => {\n                        const charCode = typeof charOrInt === \"string\"\n                            ? charOrInt.charCodeAt(0)\n                            : charOrInt;\n                        const currOptimizedIdx = charCodeToOptimizedIndex(charCode);\n                        // Avoid adding the config multiple times\n                        /* istanbul ignore else */\n                        // - Difficult to check this scenario effects as it is only a performance\n                        //   optimization that does not change correctness\n                        if (lastOptimizedIdx !== currOptimizedIdx) {\n                            lastOptimizedIdx = currOptimizedIdx;\n                            addToMapOfArrays(result, currOptimizedIdx, patternIdxToConfig[idx]);\n                        }\n                    });\n                }\n                else if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(currTokType.PATTERN)) {\n                    if (currTokType.PATTERN.unicode) {\n                        canBeOptimized = false;\n                        if (options.ensureOptimizations) {\n                            (0,_chevrotain_utils__WEBPACK_IMPORTED_MODULE_2__.PRINT_ERROR)(`${_reg_exp_js__WEBPACK_IMPORTED_MODULE_3__.failedOptimizationPrefixMsg}` +\n                                `\\tUnable to analyze < ${currTokType.PATTERN.toString()} > pattern.\\n` +\n                                \"\\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\\n\" +\n                                \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                                \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE\");\n                        }\n                    }\n                    else {\n                        const optimizedCodes = (0,_reg_exp_js__WEBPACK_IMPORTED_MODULE_3__.getOptimizedStartCodesIndices)(currTokType.PATTERN, options.ensureOptimizations);\n                        /* istanbul ignore if */\n                        // start code will only be empty given an empty regExp or failure of regexp-to-ast library\n                        // the first should be a different validation and the second cannot be tested.\n                        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(optimizedCodes)) {\n                            // we cannot understand what codes may start possible matches\n                            // The optimization correctness requires knowing start codes for ALL patterns.\n                            // Not actually sure this is an error, no debug message\n                            canBeOptimized = false;\n                        }\n                        (0,lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(optimizedCodes, (code) => {\n                            addToMapOfArrays(result, code, patternIdxToConfig[idx]);\n                        });\n                    }\n                }\n                else {\n                    if (options.ensureOptimizations) {\n                        (0,_chevrotain_utils__WEBPACK_IMPORTED_MODULE_2__.PRINT_ERROR)(`${_reg_exp_js__WEBPACK_IMPORTED_MODULE_3__.failedOptimizationPrefixMsg}` +\n                            `\\tTokenType: <${currTokType.name}> is using a custom token pattern without providing <start_chars_hint> parameter.\\n` +\n                            \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                            \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE\");\n                    }\n                    canBeOptimized = false;\n                }\n                return result;\n            }, []);\n        });\n    }\n    return {\n        emptyGroups: emptyGroups,\n        patternIdxToConfig: patternIdxToConfig,\n        charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,\n        hasCustom: hasCustom,\n        canBeOptimized: canBeOptimized,\n    };\n}\nfunction validatePatterns(tokenTypes, validModesNames) {\n    let errors = [];\n    const missingResult = findMissingPatterns(tokenTypes);\n    errors = errors.concat(missingResult.errors);\n    const invalidResult = findInvalidPatterns(missingResult.valid);\n    const validTokenTypes = invalidResult.valid;\n    errors = errors.concat(invalidResult.errors);\n    errors = errors.concat(validateRegExpPattern(validTokenTypes));\n    errors = errors.concat(findInvalidGroupType(validTokenTypes));\n    errors = errors.concat(findModesThatDoNotExist(validTokenTypes, validModesNames));\n    errors = errors.concat(findUnreachablePatterns(validTokenTypes));\n    return errors;\n}\nfunction validateRegExpPattern(tokenTypes) {\n    let errors = [];\n    const withRegExpPatterns = (0,lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(tokenTypes, (currTokType) => (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(currTokType[PATTERN]));\n    errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));\n    errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));\n    errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));\n    errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));\n    errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));\n    return errors;\n}\nfunction findMissingPatterns(tokenTypes) {\n    const tokenTypesWithMissingPattern = (0,lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(tokenTypes, (currType) => {\n        return !(0,lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(currType, PATTERN);\n    });\n    const errors = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(tokenTypesWithMissingPattern, (currType) => {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- missing static 'PATTERN' property\",\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.MISSING_PATTERN,\n            tokenTypes: [currType],\n        };\n    });\n    const valid = (0,lodash_es__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(tokenTypes, tokenTypesWithMissingPattern);\n    return { errors, valid };\n}\nfunction findInvalidPatterns(tokenTypes) {\n    const tokenTypesWithInvalidPattern = (0,lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(tokenTypes, (currType) => {\n        const pattern = currType[PATTERN];\n        return (!(0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(pattern) &&\n            !(0,lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(pattern) &&\n            !(0,lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(pattern, \"exec\") &&\n            !(0,lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(pattern));\n    });\n    const errors = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(tokenTypesWithInvalidPattern, (currType) => {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' can only be a RegExp, a\" +\n                \" Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.\",\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.INVALID_PATTERN,\n            tokenTypes: [currType],\n        };\n    });\n    const valid = (0,lodash_es__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(tokenTypes, tokenTypesWithInvalidPattern);\n    return { errors, valid };\n}\nconst end_of_input = /[^\\\\][$]/;\nfunction findEndOfInputAnchor(tokenTypes) {\n    class EndAnchorFinder extends _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__.BaseRegExpVisitor {\n        constructor() {\n            super(...arguments);\n            this.found = false;\n        }\n        visitEndAnchor(node) {\n            this.found = true;\n        }\n    }\n    const invalidRegex = (0,lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(tokenTypes, (currType) => {\n        const pattern = currType.PATTERN;\n        try {\n            const regexpAst = (0,_reg_exp_parser_js__WEBPACK_IMPORTED_MODULE_4__.getRegExpAst)(pattern);\n            const endAnchorVisitor = new EndAnchorFinder();\n            endAnchorVisitor.visit(regexpAst);\n            return endAnchorVisitor.found;\n        }\n        catch (e) {\n            // old behavior in case of runtime exceptions with regexp-to-ast.\n            /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n            return end_of_input.test(pattern.source);\n        }\n    });\n    const errors = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(invalidRegex, (currType) => {\n        return {\n            message: \"Unexpected RegExp Anchor Error:\\n\" +\n                \"\\tToken Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\" +\n                \"\\tSee chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n                \"\\tfor details.\",\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.EOI_ANCHOR_FOUND,\n            tokenTypes: [currType],\n        };\n    });\n    return errors;\n}\nfunction findEmptyMatchRegExps(tokenTypes) {\n    const matchesEmptyString = (0,lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(tokenTypes, (currType) => {\n        const pattern = currType.PATTERN;\n        return pattern.test(\"\");\n    });\n    const errors = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(matchesEmptyString, (currType) => {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' must not match an empty string\",\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,\n            tokenTypes: [currType],\n        };\n    });\n    return errors;\n}\nconst start_of_input = /[^\\\\[][\\^]|^\\^/;\nfunction findStartOfInputAnchor(tokenTypes) {\n    class StartAnchorFinder extends _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__.BaseRegExpVisitor {\n        constructor() {\n            super(...arguments);\n            this.found = false;\n        }\n        visitStartAnchor(node) {\n            this.found = true;\n        }\n    }\n    const invalidRegex = (0,lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(tokenTypes, (currType) => {\n        const pattern = currType.PATTERN;\n        try {\n            const regexpAst = (0,_reg_exp_parser_js__WEBPACK_IMPORTED_MODULE_4__.getRegExpAst)(pattern);\n            const startAnchorVisitor = new StartAnchorFinder();\n            startAnchorVisitor.visit(regexpAst);\n            return startAnchorVisitor.found;\n        }\n        catch (e) {\n            // old behavior in case of runtime exceptions with regexp-to-ast.\n            /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n            return start_of_input.test(pattern.source);\n        }\n    });\n    const errors = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(invalidRegex, (currType) => {\n        return {\n            message: \"Unexpected RegExp Anchor Error:\\n\" +\n                \"\\tToken Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\" +\n                \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n                \"\\tfor details.\",\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.SOI_ANCHOR_FOUND,\n            tokenTypes: [currType],\n        };\n    });\n    return errors;\n}\nfunction findUnsupportedFlags(tokenTypes) {\n    const invalidFlags = (0,lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(tokenTypes, (currType) => {\n        const pattern = currType[PATTERN];\n        return pattern instanceof RegExp && (pattern.multiline || pattern.global);\n    });\n    const errors = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(invalidFlags, (currType) => {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,\n            tokenTypes: [currType],\n        };\n    });\n    return errors;\n}\n// This can only test for identical duplicate RegExps, not semantically equivalent ones.\nfunction findDuplicatePatterns(tokenTypes) {\n    const found = [];\n    let identicalPatterns = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(tokenTypes, (outerType) => {\n        return (0,lodash_es__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(tokenTypes, (result, innerType) => {\n            if (outerType.PATTERN.source === innerType.PATTERN.source &&\n                !(0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(found, innerType) &&\n                innerType.PATTERN !== _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.Lexer.NA) {\n                // this avoids duplicates in the result, each Token Type may only appear in one \"set\"\n                // in essence we are creating Equivalence classes on equality relation.\n                found.push(innerType);\n                result.push(innerType);\n                return result;\n            }\n            return result;\n        }, []);\n    });\n    identicalPatterns = (0,lodash_es__WEBPACK_IMPORTED_MODULE_21__[\"default\"])(identicalPatterns);\n    const duplicatePatterns = (0,lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(identicalPatterns, (currIdenticalSet) => {\n        return currIdenticalSet.length > 1;\n    });\n    const errors = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(duplicatePatterns, (setOfIdentical) => {\n        const tokenTypeNames = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(setOfIdentical, (currType) => {\n            return currType.name;\n        });\n        const dupPatternSrc = (0,lodash_es__WEBPACK_IMPORTED_MODULE_22__[\"default\"])(setOfIdentical).PATTERN;\n        return {\n            message: `The same RegExp pattern ->${dupPatternSrc}<-` +\n                `has been used in all of the following Token Types: ${tokenTypeNames.join(\", \")} <-`,\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,\n            tokenTypes: setOfIdentical,\n        };\n    });\n    return errors;\n}\nfunction findInvalidGroupType(tokenTypes) {\n    const invalidTypes = (0,lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(tokenTypes, (clazz) => {\n        if (!(0,lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(clazz, \"GROUP\")) {\n            return false;\n        }\n        const group = clazz.GROUP;\n        return group !== _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.Lexer.SKIPPED && group !== _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.Lexer.NA && !(0,lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(group);\n    });\n    const errors = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(invalidTypes, (currType) => {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,\n            tokenTypes: [currType],\n        };\n    });\n    return errors;\n}\nfunction findModesThatDoNotExist(tokenTypes, validModes) {\n    const invalidModes = (0,lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(tokenTypes, (clazz) => {\n        return (clazz.PUSH_MODE !== undefined && !(0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(validModes, clazz.PUSH_MODE));\n    });\n    const errors = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(invalidModes, (tokType) => {\n        const msg = `Token Type: ->${tokType.name}<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->${tokType.PUSH_MODE}<-` +\n            `which does not exist`;\n        return {\n            message: msg,\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,\n            tokenTypes: [tokType],\n        };\n    });\n    return errors;\n}\nfunction findUnreachablePatterns(tokenTypes) {\n    const errors = [];\n    const canBeTested = (0,lodash_es__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(tokenTypes, (result, tokType, idx) => {\n        const pattern = tokType.PATTERN;\n        if (pattern === _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.Lexer.NA) {\n            return result;\n        }\n        // a more comprehensive validation for all forms of regExps would require\n        // deeper regExp analysis capabilities\n        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(pattern)) {\n            result.push({ str: pattern, idx, tokenType: tokType });\n        }\n        else if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(pattern) && noMetaChar(pattern)) {\n            result.push({ str: pattern.source, idx, tokenType: tokType });\n        }\n        return result;\n    }, []);\n    (0,lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(tokenTypes, (tokType, testIdx) => {\n        (0,lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(canBeTested, ({ str, idx, tokenType }) => {\n            if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n                const msg = `Token: ->${tokenType.name}<- can never be matched.\\n` +\n                    `Because it appears AFTER the Token Type ->${tokType.name}<-` +\n                    `in the lexer's definition.\\n` +\n                    `See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE`;\n                errors.push({\n                    message: msg,\n                    type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.UNREACHABLE_PATTERN,\n                    tokenTypes: [tokType, tokenType],\n                });\n            }\n        });\n    });\n    return errors;\n}\nfunction testTokenType(str, pattern) {\n    /* istanbul ignore else */\n    if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(pattern)) {\n        const regExpArray = pattern.exec(str);\n        return regExpArray !== null && regExpArray.index === 0;\n    }\n    else if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(pattern)) {\n        // maintain the API of custom patterns\n        return pattern(str, 0, [], {});\n    }\n    else if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(pattern, \"exec\")) {\n        // maintain the API of custom patterns\n        return pattern.exec(str, 0, [], {});\n    }\n    else if (typeof pattern === \"string\") {\n        return pattern === str;\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction noMetaChar(regExp) {\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n    const metaChars = [\n        \".\",\n        \"\\\\\",\n        \"[\",\n        \"]\",\n        \"|\",\n        \"^\",\n        \"$\",\n        \"(\",\n        \")\",\n        \"?\",\n        \"*\",\n        \"+\",\n        \"{\",\n    ];\n    return ((0,lodash_es__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(metaChars, (char) => regExp.source.indexOf(char) !== -1) === undefined);\n}\nfunction addStartOfInput(pattern) {\n    const flags = pattern.ignoreCase ? \"i\" : \"\";\n    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n    return new RegExp(`^(?:${pattern.source})`, flags);\n}\nfunction addStickyFlag(pattern) {\n    const flags = pattern.ignoreCase ? \"iy\" : \"y\";\n    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n    return new RegExp(`${pattern.source}`, flags);\n}\nfunction performRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n    const errors = [];\n    // some run time checks to help the end users.\n    if (!(0,lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(lexerDefinition, DEFAULT_MODE)) {\n        errors.push({\n            message: \"A MultiMode Lexer cannot be initialized without a <\" +\n                DEFAULT_MODE +\n                \"> property in its definition\\n\",\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n        });\n    }\n    if (!(0,lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(lexerDefinition, MODES)) {\n        errors.push({\n            message: \"A MultiMode Lexer cannot be initialized without a <\" +\n                MODES +\n                \"> property in its definition\\n\",\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n        });\n    }\n    if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(lexerDefinition, MODES) &&\n        (0,lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(lexerDefinition, DEFAULT_MODE) &&\n        !(0,lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(lexerDefinition.modes, lexerDefinition.defaultMode)) {\n        errors.push({\n            message: `A MultiMode Lexer cannot be initialized with a ${DEFAULT_MODE}: <${lexerDefinition.defaultMode}>` +\n                `which does not exist\\n`,\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n        });\n    }\n    if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(lexerDefinition, MODES)) {\n        (0,lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(lexerDefinition.modes, (currModeValue, currModeName) => {\n            (0,lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(currModeValue, (currTokType, currIdx) => {\n                if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(currTokType)) {\n                    errors.push({\n                        message: `A Lexer cannot be initialized using an undefined Token Type. Mode:` +\n                            `<${currModeName}> at index: <${currIdx}>\\n`,\n                        type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n                    });\n                }\n                else if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(currTokType, \"LONGER_ALT\")) {\n                    const longerAlt = (0,lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(currTokType.LONGER_ALT)\n                        ? currTokType.LONGER_ALT\n                        : [currTokType.LONGER_ALT];\n                    (0,lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(longerAlt, (currLongerAlt) => {\n                        if (!(0,lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(currLongerAlt) &&\n                            !(0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(currModeValue, currLongerAlt)) {\n                            errors.push({\n                                message: `A MultiMode Lexer cannot be initialized with a longer_alt <${currLongerAlt.name}> on token <${currTokType.name}> outside of mode <${currModeName}>\\n`,\n                                type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n                            });\n                        }\n                    });\n                }\n            });\n        });\n    }\n    return errors;\n}\nfunction performWarningRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n    const warnings = [];\n    let hasAnyLineBreak = false;\n    const allTokenTypes = (0,lodash_es__WEBPACK_IMPORTED_MODULE_21__[\"default\"])((0,lodash_es__WEBPACK_IMPORTED_MODULE_24__[\"default\"])((0,lodash_es__WEBPACK_IMPORTED_MODULE_25__[\"default\"])(lexerDefinition.modes)));\n    const concreteTokenTypes = (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(allTokenTypes, (currType) => currType[PATTERN] === _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.Lexer.NA);\n    const terminatorCharCodes = getCharCodes(lineTerminatorCharacters);\n    if (trackLines) {\n        (0,lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(concreteTokenTypes, (tokType) => {\n            const currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);\n            if (currIssue !== false) {\n                const message = buildLineBreakIssueMessage(tokType, currIssue);\n                const warningDescriptor = {\n                    message,\n                    type: currIssue.issue,\n                    tokenType: tokType,\n                };\n                warnings.push(warningDescriptor);\n            }\n            else {\n                // we don't want to attempt to scan if the user explicitly specified the line_breaks option.\n                if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(tokType, \"LINE_BREAKS\")) {\n                    if (tokType.LINE_BREAKS === true) {\n                        hasAnyLineBreak = true;\n                    }\n                }\n                else {\n                    if ((0,_reg_exp_js__WEBPACK_IMPORTED_MODULE_3__.canMatchCharCode)(terminatorCharCodes, tokType.PATTERN)) {\n                        hasAnyLineBreak = true;\n                    }\n                }\n            }\n        });\n    }\n    if (trackLines && !hasAnyLineBreak) {\n        warnings.push({\n            message: \"Warning: No LINE_BREAKS Found.\\n\" +\n                \"\\tThis Lexer has been defined to track line and column information,\\n\" +\n                \"\\tBut none of the Token Types can be identified as matching a line terminator.\\n\" +\n                \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n\" +\n                \"\\tfor details.\",\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS,\n        });\n    }\n    return warnings;\n}\nfunction cloneEmptyGroups(emptyGroups) {\n    const clonedResult = {};\n    const groupKeys = (0,lodash_es__WEBPACK_IMPORTED_MODULE_26__[\"default\"])(emptyGroups);\n    (0,lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(groupKeys, (currKey) => {\n        const currGroupValue = emptyGroups[currKey];\n        /* istanbul ignore else */\n        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(currGroupValue)) {\n            clonedResult[currKey] = [];\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n    });\n    return clonedResult;\n}\n// TODO: refactor to avoid duplication\nfunction isCustomPattern(tokenType) {\n    const pattern = tokenType.PATTERN;\n    /* istanbul ignore else */\n    if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(pattern)) {\n        return false;\n    }\n    else if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(pattern)) {\n        // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n        return true;\n    }\n    else if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(pattern, \"exec\")) {\n        // ICustomPattern\n        return true;\n    }\n    else if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(pattern)) {\n        return false;\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction isShortPattern(pattern) {\n    if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(pattern) && pattern.length === 1) {\n        return pattern.charCodeAt(0);\n    }\n    else {\n        return false;\n    }\n}\n/**\n * Faster than using a RegExp for default newline detection during lexing.\n */\nconst LineTerminatorOptimizedTester = {\n    // implements /\\n|\\r\\n?/g.test\n    test: function (text) {\n        const len = text.length;\n        for (let i = this.lastIndex; i < len; i++) {\n            const c = text.charCodeAt(i);\n            if (c === 10) {\n                this.lastIndex = i + 1;\n                return true;\n            }\n            else if (c === 13) {\n                if (text.charCodeAt(i + 1) === 10) {\n                    this.lastIndex = i + 2;\n                }\n                else {\n                    this.lastIndex = i + 1;\n                }\n                return true;\n            }\n        }\n        return false;\n    },\n    lastIndex: 0,\n};\nfunction checkLineBreaksIssues(tokType, lineTerminatorCharCodes) {\n    if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(tokType, \"LINE_BREAKS\")) {\n        // if the user explicitly declared the line_breaks option we will respect their choice\n        // and assume it is correct.\n        return false;\n    }\n    else {\n        /* istanbul ignore else */\n        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(tokType.PATTERN)) {\n            try {\n                // TODO: why is the casting suddenly needed?\n                (0,_reg_exp_js__WEBPACK_IMPORTED_MODULE_3__.canMatchCharCode)(lineTerminatorCharCodes, tokType.PATTERN);\n            }\n            catch (e) {\n                /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */\n                return {\n                    issue: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.IDENTIFY_TERMINATOR,\n                    errMsg: e.message,\n                };\n            }\n            return false;\n        }\n        else if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(tokType.PATTERN)) {\n            // string literal patterns can always be analyzed to detect line terminator usage\n            return false;\n        }\n        else if (isCustomPattern(tokType)) {\n            // custom token types\n            return { issue: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.CUSTOM_LINE_BREAK };\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n    }\n}\nfunction buildLineBreakIssueMessage(tokType, details) {\n    /* istanbul ignore else */\n    if (details.issue === _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {\n        return (\"Warning: unable to identify line terminator usage in pattern.\\n\" +\n            `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n            `\\t Root cause: ${details.errMsg}.\\n` +\n            \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR\");\n    }\n    else if (details.issue === _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {\n        return (\"Warning: A Custom Token Pattern should specify the <line_breaks> option.\\n\" +\n            `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n            \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK\");\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction getCharCodes(charsOrCodes) {\n    const charCodes = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(charsOrCodes, (numOrString) => {\n        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(numOrString)) {\n            return numOrString.charCodeAt(0);\n        }\n        else {\n            return numOrString;\n        }\n    });\n    return charCodes;\n}\nfunction addToMapOfArrays(map, key, value) {\n    if (map[key] === undefined) {\n        map[key] = [value];\n    }\n    else {\n        map[key].push(value);\n    }\n}\nconst minOptimizationVal = 256;\n/**\n * We are mapping charCode above ASCI (256) into buckets each in the size of 256.\n * This is because ASCI are the most common start chars so each one of those will get its own\n * possible token configs vector.\n *\n * Tokens starting with charCodes \"above\" ASCI are uncommon, so we can \"afford\"\n * to place these into buckets of possible token configs, What we gain from\n * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'\n * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).\n * Our 'charCodeToPatternIdxToConfig' max size will now be:\n * 256 + (2^16 / 2^8) - 1 === 511\n *\n * note the hack for fast division integer part extraction\n * See: https://stackoverflow.com/a/4228528\n */\nlet charCodeToOptimizedIdxMap = [];\nfunction charCodeToOptimizedIndex(charCode) {\n    return charCode < minOptimizationVal\n        ? charCode\n        : charCodeToOptimizedIdxMap[charCode];\n}\n/**\n * This is a compromise between cold start / hot running performance\n * Creating this array takes ~3ms on a modern machine,\n * But if we perform the computation at runtime as needed the CSS Lexer benchmark\n * performance degrades by ~10%\n *\n * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.\n */\nfunction initCharCodeToOptimizedIndexMap() {\n    if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(charCodeToOptimizedIdxMap)) {\n        charCodeToOptimizedIdxMap = new Array(65536);\n        for (let i = 0; i < 65536; i++) {\n            charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;\n        }\n    }\n}\n//# sourceMappingURL=lexer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/scan/lexer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/scan/lexer_errors_public.js":
/*!*********************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/scan/lexer_errors_public.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultLexerErrorProvider: () => (/* binding */ defaultLexerErrorProvider)\n/* harmony export */ });\nconst defaultLexerErrorProvider = {\n    buildUnableToPopLexerModeMessage(token) {\n        return `Unable to pop Lexer Mode after encountering Token ->${token.image}<- The Mode Stack is empty`;\n    },\n    buildUnexpectedCharactersMessage(fullText, startOffset, length, line, column) {\n        return (`unexpected character: ->${fullText.charAt(startOffset)}<- at offset: ${startOffset},` + ` skipped ${length} characters.`);\n    },\n};\n//# sourceMappingURL=lexer_errors_public.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3NjYW4vbGV4ZXJfZXJyb3JzX3B1YmxpYy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBLHNFQUFzRSxZQUFZO0FBQ2xGLEtBQUs7QUFDTDtBQUNBLDJDQUEyQyw2QkFBNkIsZ0JBQWdCLFlBQVksaUJBQWlCLFFBQVE7QUFDN0gsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbGV4YW5kZXIubm9ibGUvYXBleC10b29sYm94L25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYi9zcmMvc2Nhbi9sZXhlcl9lcnJvcnNfcHVibGljLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBkZWZhdWx0TGV4ZXJFcnJvclByb3ZpZGVyID0ge1xuICAgIGJ1aWxkVW5hYmxlVG9Qb3BMZXhlck1vZGVNZXNzYWdlKHRva2VuKSB7XG4gICAgICAgIHJldHVybiBgVW5hYmxlIHRvIHBvcCBMZXhlciBNb2RlIGFmdGVyIGVuY291bnRlcmluZyBUb2tlbiAtPiR7dG9rZW4uaW1hZ2V9PC0gVGhlIE1vZGUgU3RhY2sgaXMgZW1wdHlgO1xuICAgIH0sXG4gICAgYnVpbGRVbmV4cGVjdGVkQ2hhcmFjdGVyc01lc3NhZ2UoZnVsbFRleHQsIHN0YXJ0T2Zmc2V0LCBsZW5ndGgsIGxpbmUsIGNvbHVtbikge1xuICAgICAgICByZXR1cm4gKGB1bmV4cGVjdGVkIGNoYXJhY3RlcjogLT4ke2Z1bGxUZXh0LmNoYXJBdChzdGFydE9mZnNldCl9PC0gYXQgb2Zmc2V0OiAke3N0YXJ0T2Zmc2V0fSxgICsgYCBza2lwcGVkICR7bGVuZ3RofSBjaGFyYWN0ZXJzLmApO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGV4ZXJfZXJyb3JzX3B1YmxpYy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/scan/lexer_errors_public.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/scan/lexer_public.js":
/*!**************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/scan/lexer_public.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Lexer: () => (/* binding */ Lexer),\n/* harmony export */   LexerDefinitionErrorType: () => (/* binding */ LexerDefinitionErrorType)\n/* harmony export */ });\n/* harmony import */ var _lexer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lexer.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/lexer.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/assign.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isArray.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/clone.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/reject.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isUndefined.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/keys.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/map.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/identity.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/noop.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/reduce.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/last.js\");\n/* harmony import */ var _chevrotain_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @chevrotain/utils */ \"(ssr)/./node_modules/@chevrotain/utils/lib/src/api.js\");\n/* harmony import */ var _tokens_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tokens.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens.js\");\n/* harmony import */ var _lexer_errors_public_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lexer_errors_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/lexer_errors_public.js\");\n/* harmony import */ var _reg_exp_parser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reg_exp_parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/reg_exp_parser.js\");\n\n\n\n\n\n\nvar LexerDefinitionErrorType;\n(function (LexerDefinitionErrorType) {\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MISSING_PATTERN\"] = 0] = \"MISSING_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_PATTERN\"] = 1] = \"INVALID_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"EOI_ANCHOR_FOUND\"] = 2] = \"EOI_ANCHOR_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNSUPPORTED_FLAGS_FOUND\"] = 3] = \"UNSUPPORTED_FLAGS_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"DUPLICATE_PATTERNS_FOUND\"] = 4] = \"DUPLICATE_PATTERNS_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_GROUP_TYPE_FOUND\"] = 5] = \"INVALID_GROUP_TYPE_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"PUSH_MODE_DOES_NOT_EXIST\"] = 6] = \"PUSH_MODE_DOES_NOT_EXIST\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\"] = 7] = \"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\"] = 8] = \"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\"] = 9] = \"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\"] = 10] = \"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"SOI_ANCHOR_FOUND\"] = 11] = \"SOI_ANCHOR_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"EMPTY_MATCH_PATTERN\"] = 12] = \"EMPTY_MATCH_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"NO_LINE_BREAKS_FLAGS\"] = 13] = \"NO_LINE_BREAKS_FLAGS\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNREACHABLE_PATTERN\"] = 14] = \"UNREACHABLE_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"IDENTIFY_TERMINATOR\"] = 15] = \"IDENTIFY_TERMINATOR\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"CUSTOM_LINE_BREAK\"] = 16] = \"CUSTOM_LINE_BREAK\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE\"] = 17] = \"MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE\";\n})(LexerDefinitionErrorType || (LexerDefinitionErrorType = {}));\nconst DEFAULT_LEXER_CONFIG = {\n    deferDefinitionErrorsHandling: false,\n    positionTracking: \"full\",\n    lineTerminatorsPattern: /\\n|\\r\\n?/g,\n    lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n    ensureOptimizations: false,\n    safeMode: false,\n    errorMessageProvider: _lexer_errors_public_js__WEBPACK_IMPORTED_MODULE_3__.defaultLexerErrorProvider,\n    traceInitPerf: false,\n    skipValidations: false,\n    recoveryEnabled: true,\n};\nObject.freeze(DEFAULT_LEXER_CONFIG);\nclass Lexer {\n    constructor(lexerDefinition, config = DEFAULT_LEXER_CONFIG) {\n        this.lexerDefinition = lexerDefinition;\n        this.lexerDefinitionErrors = [];\n        this.lexerDefinitionWarning = [];\n        this.patternIdxToConfig = {};\n        this.charCodeToPatternIdxToConfig = {};\n        this.modes = [];\n        this.emptyGroups = {};\n        this.trackStartLines = true;\n        this.trackEndLines = true;\n        this.hasCustom = false;\n        this.canModeBeOptimized = {};\n        // Duplicated from the parser's perf trace trait to allow future extraction\n        // of the lexer to a separate package.\n        this.TRACE_INIT = (phaseDesc, phaseImpl) => {\n            // No need to optimize this using NOOP pattern because\n            // It is not called in a hot spot...\n            if (this.traceInitPerf === true) {\n                this.traceInitIndent++;\n                const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n                if (this.traceInitIndent < this.traceInitMaxIdent) {\n                    console.log(`${indent}--> <${phaseDesc}>`);\n                }\n                const { time, value } = (0,_chevrotain_utils__WEBPACK_IMPORTED_MODULE_1__.timer)(phaseImpl);\n                /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n                const traceMethod = time > 10 ? console.warn : console.log;\n                if (this.traceInitIndent < this.traceInitMaxIdent) {\n                    traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n                }\n                this.traceInitIndent--;\n                return value;\n            }\n            else {\n                return phaseImpl();\n            }\n        };\n        if (typeof config === \"boolean\") {\n            throw Error(\"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" +\n                \"a boolean 2nd argument is no longer supported\");\n        }\n        // todo: defaults func?\n        this.config = (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({}, DEFAULT_LEXER_CONFIG, config);\n        const traceInitVal = this.config.traceInitPerf;\n        if (traceInitVal === true) {\n            this.traceInitMaxIdent = Infinity;\n            this.traceInitPerf = true;\n        }\n        else if (typeof traceInitVal === \"number\") {\n            this.traceInitMaxIdent = traceInitVal;\n            this.traceInitPerf = true;\n        }\n        this.traceInitIndent = -1;\n        this.TRACE_INIT(\"Lexer Constructor\", () => {\n            let actualDefinition;\n            let hasOnlySingleMode = true;\n            this.TRACE_INIT(\"Lexer Config handling\", () => {\n                if (this.config.lineTerminatorsPattern ===\n                    DEFAULT_LEXER_CONFIG.lineTerminatorsPattern) {\n                    // optimized built-in implementation for the defaults definition of lineTerminators\n                    this.config.lineTerminatorsPattern = _lexer_js__WEBPACK_IMPORTED_MODULE_0__.LineTerminatorOptimizedTester;\n                }\n                else {\n                    if (this.config.lineTerminatorCharacters ===\n                        DEFAULT_LEXER_CONFIG.lineTerminatorCharacters) {\n                        throw Error(\"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" +\n                            \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\");\n                    }\n                }\n                if (config.safeMode && config.ensureOptimizations) {\n                    throw Error('\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.');\n                }\n                this.trackStartLines = /full|onlyStart/i.test(this.config.positionTracking);\n                this.trackEndLines = /full/i.test(this.config.positionTracking);\n                // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n                if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(lexerDefinition)) {\n                    actualDefinition = {\n                        modes: { defaultMode: (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(lexerDefinition) },\n                        defaultMode: _lexer_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_MODE,\n                    };\n                }\n                else {\n                    // no conversion needed, input should already be a IMultiModeLexerDefinition\n                    hasOnlySingleMode = false;\n                    actualDefinition = (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(lexerDefinition);\n                }\n            });\n            if (this.config.skipValidations === false) {\n                this.TRACE_INIT(\"performRuntimeChecks\", () => {\n                    this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat((0,_lexer_js__WEBPACK_IMPORTED_MODULE_0__.performRuntimeChecks)(actualDefinition, this.trackStartLines, this.config.lineTerminatorCharacters));\n                });\n                this.TRACE_INIT(\"performWarningRuntimeChecks\", () => {\n                    this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat((0,_lexer_js__WEBPACK_IMPORTED_MODULE_0__.performWarningRuntimeChecks)(actualDefinition, this.trackStartLines, this.config.lineTerminatorCharacters));\n                });\n            }\n            // for extra robustness to avoid throwing an none informative error message\n            actualDefinition.modes = actualDefinition.modes\n                ? actualDefinition.modes\n                : {};\n            // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n            // this transformation is to increase robustness in the case of partially invalid lexer definition.\n            (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(actualDefinition.modes, (currModeValue, currModeName) => {\n                actualDefinition.modes[currModeName] = (0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(currModeValue, (currTokType) => (0,lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(currTokType));\n            });\n            const allModeNames = (0,lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(actualDefinition.modes);\n            (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(actualDefinition.modes, (currModDef, currModName) => {\n                this.TRACE_INIT(`Mode: <${currModName}> processing`, () => {\n                    this.modes.push(currModName);\n                    if (this.config.skipValidations === false) {\n                        this.TRACE_INIT(`validatePatterns`, () => {\n                            this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat((0,_lexer_js__WEBPACK_IMPORTED_MODULE_0__.validatePatterns)(currModDef, allModeNames));\n                        });\n                    }\n                    // If definition errors were encountered, the analysis phase may fail unexpectedly/\n                    // Considering a lexer with definition errors may never be used, there is no point\n                    // to performing the analysis anyhow...\n                    if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(this.lexerDefinitionErrors)) {\n                        (0,_tokens_js__WEBPACK_IMPORTED_MODULE_2__.augmentTokenTypes)(currModDef);\n                        let currAnalyzeResult;\n                        this.TRACE_INIT(`analyzeTokenTypes`, () => {\n                            currAnalyzeResult = (0,_lexer_js__WEBPACK_IMPORTED_MODULE_0__.analyzeTokenTypes)(currModDef, {\n                                lineTerminatorCharacters: this.config.lineTerminatorCharacters,\n                                positionTracking: config.positionTracking,\n                                ensureOptimizations: config.ensureOptimizations,\n                                safeMode: config.safeMode,\n                                tracer: this.TRACE_INIT,\n                            });\n                        });\n                        this.patternIdxToConfig[currModName] =\n                            currAnalyzeResult.patternIdxToConfig;\n                        this.charCodeToPatternIdxToConfig[currModName] =\n                            currAnalyzeResult.charCodeToPatternIdxToConfig;\n                        this.emptyGroups = (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({}, this.emptyGroups, currAnalyzeResult.emptyGroups);\n                        this.hasCustom = currAnalyzeResult.hasCustom || this.hasCustom;\n                        this.canModeBeOptimized[currModName] =\n                            currAnalyzeResult.canBeOptimized;\n                    }\n                });\n            });\n            this.defaultMode = actualDefinition.defaultMode;\n            if (!(0,lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(this.lexerDefinitionErrors) &&\n                !this.config.deferDefinitionErrorsHandling) {\n                const allErrMessages = (0,lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(this.lexerDefinitionErrors, (error) => {\n                    return error.message;\n                });\n                const allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n                throw new Error(\"Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n            }\n            // Only print warning if there are no errors, This will avoid pl\n            (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this.lexerDefinitionWarning, (warningDescriptor) => {\n                (0,_chevrotain_utils__WEBPACK_IMPORTED_MODULE_1__.PRINT_WARNING)(warningDescriptor.message);\n            });\n            this.TRACE_INIT(\"Choosing sub-methods implementations\", () => {\n                // Choose the relevant internal implementations for this specific parser.\n                // These implementations should be in-lined by the JavaScript engine\n                // to provide optimal performance in each scenario.\n                if (_lexer_js__WEBPACK_IMPORTED_MODULE_0__.SUPPORT_STICKY) {\n                    this.chopInput = lodash_es__WEBPACK_IMPORTED_MODULE_14__[\"default\"];\n                    this.match = this.matchWithTest;\n                }\n                else {\n                    this.updateLastIndex = lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"];\n                    this.match = this.matchWithExec;\n                }\n                if (hasOnlySingleMode) {\n                    this.handleModes = lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"];\n                }\n                if (this.trackStartLines === false) {\n                    this.computeNewColumn = lodash_es__WEBPACK_IMPORTED_MODULE_14__[\"default\"];\n                }\n                if (this.trackEndLines === false) {\n                    this.updateTokenEndLineColumnLocation = lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"];\n                }\n                if (/full/i.test(this.config.positionTracking)) {\n                    this.createTokenInstance = this.createFullToken;\n                }\n                else if (/onlyStart/i.test(this.config.positionTracking)) {\n                    this.createTokenInstance = this.createStartOnlyToken;\n                }\n                else if (/onlyOffset/i.test(this.config.positionTracking)) {\n                    this.createTokenInstance = this.createOffsetOnlyToken;\n                }\n                else {\n                    throw Error(`Invalid <positionTracking> config option: \"${this.config.positionTracking}\"`);\n                }\n                if (this.hasCustom) {\n                    this.addToken = this.addTokenUsingPush;\n                    this.handlePayload = this.handlePayloadWithCustom;\n                }\n                else {\n                    this.addToken = this.addTokenUsingMemberAccess;\n                    this.handlePayload = this.handlePayloadNoCustom;\n                }\n            });\n            this.TRACE_INIT(\"Failed Optimization Warnings\", () => {\n                const unOptimizedModes = (0,lodash_es__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(this.canModeBeOptimized, (cannotBeOptimized, canBeOptimized, modeName) => {\n                    if (canBeOptimized === false) {\n                        cannotBeOptimized.push(modeName);\n                    }\n                    return cannotBeOptimized;\n                }, []);\n                if (config.ensureOptimizations && !(0,lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(unOptimizedModes)) {\n                    throw Error(`Lexer Modes: < ${unOptimizedModes.join(\", \")} > cannot be optimized.\\n` +\n                        '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' +\n                        \"\\t Or inspect the console log for details on how to resolve these issues.\");\n                }\n            });\n            this.TRACE_INIT(\"clearRegExpParserCache\", () => {\n                (0,_reg_exp_parser_js__WEBPACK_IMPORTED_MODULE_4__.clearRegExpParserCache)();\n            });\n            this.TRACE_INIT(\"toFastProperties\", () => {\n                (0,_chevrotain_utils__WEBPACK_IMPORTED_MODULE_1__.toFastProperties)(this);\n            });\n        });\n    }\n    tokenize(text, initialMode = this.defaultMode) {\n        if (!(0,lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(this.lexerDefinitionErrors)) {\n            const allErrMessages = (0,lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(this.lexerDefinitionErrors, (error) => {\n                return error.message;\n            });\n            const allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n            throw new Error(\"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" +\n                allErrMessagesString);\n        }\n        return this.tokenizeInternal(text, initialMode);\n    }\n    // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n    // This is intentional due to performance considerations.\n    // this method also used quite a bit of `!` none null assertions because it is too optimized\n    // for `tsc` to always understand it is \"safe\"\n    tokenizeInternal(text, initialMode) {\n        let i, j, k, matchAltImage, longerAlt, matchedImage, payload, altPayload, imageLength, group, tokType, newToken, errLength, droppedChar, msg, match;\n        const orgText = text;\n        const orgLength = orgText.length;\n        let offset = 0;\n        let matchedTokensIndex = 0;\n        // initializing the tokensArray to the \"guessed\" size.\n        // guessing too little will still reduce the number of array re-sizes on pushes.\n        // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n        // but would still have a faster runtime by avoiding (All but one) array resizing.\n        const guessedNumberOfTokens = this.hasCustom\n            ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n            : Math.floor(text.length / 10);\n        const matchedTokens = new Array(guessedNumberOfTokens);\n        const errors = [];\n        let line = this.trackStartLines ? 1 : undefined;\n        let column = this.trackStartLines ? 1 : undefined;\n        const groups = (0,_lexer_js__WEBPACK_IMPORTED_MODULE_0__.cloneEmptyGroups)(this.emptyGroups);\n        const trackLines = this.trackStartLines;\n        const lineTerminatorPattern = this.config.lineTerminatorsPattern;\n        let currModePatternsLength = 0;\n        let patternIdxToConfig = [];\n        let currCharCodeToPatternIdxToConfig = [];\n        const modeStack = [];\n        const emptyArray = [];\n        Object.freeze(emptyArray);\n        let getPossiblePatterns;\n        function getPossiblePatternsSlow() {\n            return patternIdxToConfig;\n        }\n        function getPossiblePatternsOptimized(charCode) {\n            const optimizedCharIdx = (0,_lexer_js__WEBPACK_IMPORTED_MODULE_0__.charCodeToOptimizedIndex)(charCode);\n            const possiblePatterns = currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n            if (possiblePatterns === undefined) {\n                return emptyArray;\n            }\n            else {\n                return possiblePatterns;\n            }\n        }\n        const pop_mode = (popToken) => {\n            // TODO: perhaps avoid this error in the edge case there is no more input?\n            if (modeStack.length === 1 &&\n                // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n                // So no error should occur.\n                popToken.tokenType.PUSH_MODE === undefined) {\n                // if we try to pop the last mode there lexer will no longer have ANY mode.\n                // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n                const msg = this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(popToken);\n                errors.push({\n                    offset: popToken.startOffset,\n                    line: popToken.startLine,\n                    column: popToken.startColumn,\n                    length: popToken.image.length,\n                    message: msg,\n                });\n            }\n            else {\n                modeStack.pop();\n                const newMode = (0,lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(modeStack);\n                patternIdxToConfig = this.patternIdxToConfig[newMode];\n                currCharCodeToPatternIdxToConfig =\n                    this.charCodeToPatternIdxToConfig[newMode];\n                currModePatternsLength = patternIdxToConfig.length;\n                const modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n                if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n                    getPossiblePatterns = getPossiblePatternsOptimized;\n                }\n                else {\n                    getPossiblePatterns = getPossiblePatternsSlow;\n                }\n            }\n        };\n        function push_mode(newMode) {\n            modeStack.push(newMode);\n            currCharCodeToPatternIdxToConfig =\n                this.charCodeToPatternIdxToConfig[newMode];\n            patternIdxToConfig = this.patternIdxToConfig[newMode];\n            currModePatternsLength = patternIdxToConfig.length;\n            currModePatternsLength = patternIdxToConfig.length;\n            const modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n            if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n                getPossiblePatterns = getPossiblePatternsOptimized;\n            }\n            else {\n                getPossiblePatterns = getPossiblePatternsSlow;\n            }\n        }\n        // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n        // seem to matter performance wise.\n        push_mode.call(this, initialMode);\n        let currConfig;\n        const recoveryEnabled = this.config.recoveryEnabled;\n        while (offset < orgLength) {\n            matchedImage = null;\n            const nextCharCode = orgText.charCodeAt(offset);\n            const chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n            const chosenPatternsLength = chosenPatternIdxToConfig.length;\n            for (i = 0; i < chosenPatternsLength; i++) {\n                currConfig = chosenPatternIdxToConfig[i];\n                const currPattern = currConfig.pattern;\n                payload = null;\n                // manually in-lined because > 600 chars won't be in-lined in V8\n                const singleCharCode = currConfig.short;\n                if (singleCharCode !== false) {\n                    if (nextCharCode === singleCharCode) {\n                        // single character string\n                        matchedImage = currPattern;\n                    }\n                }\n                else if (currConfig.isCustom === true) {\n                    match = currPattern.exec(orgText, offset, matchedTokens, groups);\n                    if (match !== null) {\n                        matchedImage = match[0];\n                        if (match.payload !== undefined) {\n                            payload = match.payload;\n                        }\n                    }\n                    else {\n                        matchedImage = null;\n                    }\n                }\n                else {\n                    this.updateLastIndex(currPattern, offset);\n                    matchedImage = this.match(currPattern, text, offset);\n                }\n                if (matchedImage !== null) {\n                    // even though this pattern matched we must try a another longer alternative.\n                    // this can be used to prioritize keywords over identifiers\n                    longerAlt = currConfig.longerAlt;\n                    if (longerAlt !== undefined) {\n                        // TODO: micro optimize, avoid extra prop access\n                        // by saving/linking longerAlt on the original config?\n                        const longerAltLength = longerAlt.length;\n                        for (k = 0; k < longerAltLength; k++) {\n                            const longerAltConfig = patternIdxToConfig[longerAlt[k]];\n                            const longerAltPattern = longerAltConfig.pattern;\n                            altPayload = null;\n                            // single Char can never be a longer alt so no need to test it.\n                            // manually in-lined because > 600 chars won't be in-lined in V8\n                            if (longerAltConfig.isCustom === true) {\n                                match = longerAltPattern.exec(orgText, offset, matchedTokens, groups);\n                                if (match !== null) {\n                                    matchAltImage = match[0];\n                                    if (match.payload !== undefined) {\n                                        altPayload = match.payload;\n                                    }\n                                }\n                                else {\n                                    matchAltImage = null;\n                                }\n                            }\n                            else {\n                                this.updateLastIndex(longerAltPattern, offset);\n                                matchAltImage = this.match(longerAltPattern, text, offset);\n                            }\n                            if (matchAltImage && matchAltImage.length > matchedImage.length) {\n                                matchedImage = matchAltImage;\n                                payload = altPayload;\n                                currConfig = longerAltConfig;\n                                // Exit the loop early after matching one of the longer alternatives\n                                // The first matched alternative takes precedence\n                                break;\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n            // successful match\n            if (matchedImage !== null) {\n                imageLength = matchedImage.length;\n                group = currConfig.group;\n                if (group !== undefined) {\n                    tokType = currConfig.tokenTypeIdx;\n                    // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n                    // createFullToken method\n                    newToken = this.createTokenInstance(matchedImage, offset, tokType, currConfig.tokenType, line, column, imageLength);\n                    this.handlePayload(newToken, payload);\n                    // TODO: optimize NOOP in case there are no special groups?\n                    if (group === false) {\n                        matchedTokensIndex = this.addToken(matchedTokens, matchedTokensIndex, newToken);\n                    }\n                    else {\n                        groups[group].push(newToken);\n                    }\n                }\n                text = this.chopInput(text, imageLength);\n                offset = offset + imageLength;\n                // TODO: with newlines the column may be assigned twice\n                column = this.computeNewColumn(column, imageLength);\n                if (trackLines === true && currConfig.canLineTerminator === true) {\n                    let numOfLTsInMatch = 0;\n                    let foundTerminator;\n                    let lastLTEndOffset;\n                    lineTerminatorPattern.lastIndex = 0;\n                    do {\n                        foundTerminator = lineTerminatorPattern.test(matchedImage);\n                        if (foundTerminator === true) {\n                            lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n                            numOfLTsInMatch++;\n                        }\n                    } while (foundTerminator === true);\n                    if (numOfLTsInMatch !== 0) {\n                        line = line + numOfLTsInMatch;\n                        column = imageLength - lastLTEndOffset;\n                        this.updateTokenEndLineColumnLocation(newToken, group, lastLTEndOffset, numOfLTsInMatch, line, column, imageLength);\n                    }\n                }\n                // will be NOOP if no modes present\n                this.handleModes(currConfig, pop_mode, push_mode, newToken);\n            }\n            else {\n                // error recovery, drop characters until we identify a valid token's start point\n                const errorStartOffset = offset;\n                const errorLine = line;\n                const errorColumn = column;\n                let foundResyncPoint = recoveryEnabled === false;\n                while (foundResyncPoint === false && offset < orgLength) {\n                    // Identity Func (when sticky flag is enabled)\n                    text = this.chopInput(text, 1);\n                    offset++;\n                    for (j = 0; j < currModePatternsLength; j++) {\n                        const currConfig = patternIdxToConfig[j];\n                        const currPattern = currConfig.pattern;\n                        // manually in-lined because > 600 chars won't be in-lined in V8\n                        const singleCharCode = currConfig.short;\n                        if (singleCharCode !== false) {\n                            if (orgText.charCodeAt(offset) === singleCharCode) {\n                                // single character string\n                                foundResyncPoint = true;\n                            }\n                        }\n                        else if (currConfig.isCustom === true) {\n                            foundResyncPoint =\n                                currPattern.exec(orgText, offset, matchedTokens, groups) !== null;\n                        }\n                        else {\n                            this.updateLastIndex(currPattern, offset);\n                            foundResyncPoint = currPattern.exec(text) !== null;\n                        }\n                        if (foundResyncPoint === true) {\n                            break;\n                        }\n                    }\n                }\n                errLength = offset - errorStartOffset;\n                column = this.computeNewColumn(column, errLength);\n                // at this point we either re-synced or reached the end of the input text\n                msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(orgText, errorStartOffset, errLength, errorLine, errorColumn);\n                errors.push({\n                    offset: errorStartOffset,\n                    line: errorLine,\n                    column: errorColumn,\n                    length: errLength,\n                    message: msg,\n                });\n                if (recoveryEnabled === false) {\n                    break;\n                }\n            }\n        }\n        // if we do have custom patterns which push directly into the\n        // TODO: custom tokens should not push directly??\n        if (!this.hasCustom) {\n            // if we guessed a too large size for the tokens array this will shrink it to the right size.\n            matchedTokens.length = matchedTokensIndex;\n        }\n        return {\n            tokens: matchedTokens,\n            groups: groups,\n            errors: errors,\n        };\n    }\n    handleModes(config, pop_mode, push_mode, newToken) {\n        if (config.pop === true) {\n            // need to save the PUSH_MODE property as if the mode is popped\n            // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n            const pushMode = config.push;\n            pop_mode(newToken);\n            if (pushMode !== undefined) {\n                push_mode.call(this, pushMode);\n            }\n        }\n        else if (config.push !== undefined) {\n            push_mode.call(this, config.push);\n        }\n    }\n    chopInput(text, length) {\n        return text.substring(length);\n    }\n    updateLastIndex(regExp, newLastIndex) {\n        regExp.lastIndex = newLastIndex;\n    }\n    // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n    updateTokenEndLineColumnLocation(newToken, group, lastLTIdx, numOfLTsInMatch, line, column, imageLength) {\n        let lastCharIsLT, fixForEndingInLT;\n        if (group !== undefined) {\n            // a none skipped multi line Token, need to update endLine/endColumn\n            lastCharIsLT = lastLTIdx === imageLength - 1;\n            fixForEndingInLT = lastCharIsLT ? -1 : 0;\n            if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n                // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n                newToken.endLine = line + fixForEndingInLT;\n                // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n                // inclusive to exclusive range.\n                newToken.endColumn = column - 1 + -fixForEndingInLT;\n            }\n            // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n        }\n    }\n    computeNewColumn(oldColumn, imageLength) {\n        return oldColumn + imageLength;\n    }\n    createOffsetOnlyToken(image, startOffset, tokenTypeIdx, tokenType) {\n        return {\n            image,\n            startOffset,\n            tokenTypeIdx,\n            tokenType,\n        };\n    }\n    createStartOnlyToken(image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn) {\n        return {\n            image,\n            startOffset,\n            startLine,\n            startColumn,\n            tokenTypeIdx,\n            tokenType,\n        };\n    }\n    createFullToken(image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn, imageLength) {\n        return {\n            image,\n            startOffset,\n            endOffset: startOffset + imageLength - 1,\n            startLine,\n            endLine: startLine,\n            startColumn,\n            endColumn: startColumn + imageLength - 1,\n            tokenTypeIdx,\n            tokenType,\n        };\n    }\n    addTokenUsingPush(tokenVector, index, tokenToAdd) {\n        tokenVector.push(tokenToAdd);\n        return index;\n    }\n    addTokenUsingMemberAccess(tokenVector, index, tokenToAdd) {\n        tokenVector[index] = tokenToAdd;\n        index++;\n        return index;\n    }\n    handlePayloadNoCustom(token, payload) { }\n    handlePayloadWithCustom(token, payload) {\n        if (payload !== null) {\n            token.payload = payload;\n        }\n    }\n    matchWithTest(pattern, text, offset) {\n        const found = pattern.test(text);\n        if (found === true) {\n            return text.substring(offset, pattern.lastIndex);\n        }\n        return null;\n    }\n    matchWithExec(pattern, text) {\n        const regExpArray = pattern.exec(text);\n        return regExpArray !== null ? regExpArray[0] : null;\n    }\n}\nLexer.SKIPPED = \"This marks a skipped Token pattern, this means each token identified by it will\" +\n    \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\nLexer.NA = /NOT_APPLICABLE/;\n//# sourceMappingURL=lexer_public.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/scan/lexer_public.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/scan/reg_exp.js":
/*!*********************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/scan/reg_exp.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canMatchCharCode: () => (/* binding */ canMatchCharCode),\n/* harmony export */   failedOptimizationPrefixMsg: () => (/* binding */ failedOptimizationPrefixMsg),\n/* harmony export */   firstCharOptimizedIndices: () => (/* binding */ firstCharOptimizedIndices),\n/* harmony export */   getOptimizedStartCodesIndices: () => (/* binding */ getOptimizedStartCodesIndices)\n/* harmony export */ });\n/* harmony import */ var _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chevrotain/regexp-to-ast */ \"(ssr)/./node_modules/@chevrotain/regexp-to-ast/lib/src/api.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/values.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/find.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/includes.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isArray.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/every.js\");\n/* harmony import */ var _chevrotain_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @chevrotain/utils */ \"(ssr)/./node_modules/@chevrotain/utils/lib/src/api.js\");\n/* harmony import */ var _reg_exp_parser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reg_exp_parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/reg_exp_parser.js\");\n/* harmony import */ var _lexer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lexer.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/lexer.js\");\n\n\n\n\n\nconst complementErrorMessage = \"Complement Sets are not supported for first char optimization\";\nconst failedOptimizationPrefixMsg = 'Unable to use \"first char\" lexer optimizations:\\n';\nfunction getOptimizedStartCodesIndices(regExp, ensureOptimizations = false) {\n    try {\n        const ast = (0,_reg_exp_parser_js__WEBPACK_IMPORTED_MODULE_2__.getRegExpAst)(regExp);\n        const firstChars = firstCharOptimizedIndices(ast.value, {}, ast.flags.ignoreCase);\n        return firstChars;\n    }\n    catch (e) {\n        /* istanbul ignore next */\n        // Testing this relies on the regexp-to-ast library having a bug... */\n        // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n        if (e.message === complementErrorMessage) {\n            if (ensureOptimizations) {\n                (0,_chevrotain_utils__WEBPACK_IMPORTED_MODULE_1__.PRINT_WARNING)(`${failedOptimizationPrefixMsg}` +\n                    `\\tUnable to optimize: < ${regExp.toString()} >\\n` +\n                    \"\\tComplement Sets cannot be automatically optimized.\\n\" +\n                    \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                    \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\");\n            }\n        }\n        else {\n            let msgSuffix = \"\";\n            if (ensureOptimizations) {\n                msgSuffix =\n                    \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" +\n                        \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n            }\n            (0,_chevrotain_utils__WEBPACK_IMPORTED_MODULE_1__.PRINT_ERROR)(`${failedOptimizationPrefixMsg}\\n` +\n                `\\tFailed parsing: < ${regExp.toString()} >\\n` +\n                `\\tUsing the @chevrotain/regexp-to-ast library\\n` +\n                \"\\tPlease open an issue at: https://github.com/chevrotain/chevrotain/issues\" +\n                msgSuffix);\n        }\n    }\n    return [];\n}\nfunction firstCharOptimizedIndices(ast, result, ignoreCase) {\n    switch (ast.type) {\n        case \"Disjunction\":\n            for (let i = 0; i < ast.value.length; i++) {\n                firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n            }\n            break;\n        case \"Alternative\":\n            const terms = ast.value;\n            for (let i = 0; i < terms.length; i++) {\n                const term = terms[i];\n                // skip terms that cannot effect the first char results\n                switch (term.type) {\n                    case \"EndAnchor\":\n                    // A group back reference cannot affect potential starting char.\n                    // because if a back reference is the first production than automatically\n                    // the group being referenced has had to come BEFORE so its codes have already been added\n                    case \"GroupBackReference\":\n                    // assertions do not affect potential starting codes\n                    case \"Lookahead\":\n                    case \"NegativeLookahead\":\n                    case \"StartAnchor\":\n                    case \"WordBoundary\":\n                    case \"NonWordBoundary\":\n                        continue;\n                }\n                const atom = term;\n                switch (atom.type) {\n                    case \"Character\":\n                        addOptimizedIdxToResult(atom.value, result, ignoreCase);\n                        break;\n                    case \"Set\":\n                        if (atom.complement === true) {\n                            throw Error(complementErrorMessage);\n                        }\n                        (0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(atom.value, (code) => {\n                            if (typeof code === \"number\") {\n                                addOptimizedIdxToResult(code, result, ignoreCase);\n                            }\n                            else {\n                                // range\n                                const range = code;\n                                // cannot optimize when ignoreCase is\n                                if (ignoreCase === true) {\n                                    for (let rangeCode = range.from; rangeCode <= range.to; rangeCode++) {\n                                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                                    }\n                                }\n                                // Optimization (2 orders of magnitude less work for very large ranges)\n                                else {\n                                    // handle unoptimized values\n                                    for (let rangeCode = range.from; rangeCode <= range.to && rangeCode < _lexer_js__WEBPACK_IMPORTED_MODULE_3__.minOptimizationVal; rangeCode++) {\n                                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                                    }\n                                    // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n                                    if (range.to >= _lexer_js__WEBPACK_IMPORTED_MODULE_3__.minOptimizationVal) {\n                                        const minUnOptVal = range.from >= _lexer_js__WEBPACK_IMPORTED_MODULE_3__.minOptimizationVal\n                                            ? range.from\n                                            : _lexer_js__WEBPACK_IMPORTED_MODULE_3__.minOptimizationVal;\n                                        const maxUnOptVal = range.to;\n                                        const minOptIdx = (0,_lexer_js__WEBPACK_IMPORTED_MODULE_3__.charCodeToOptimizedIndex)(minUnOptVal);\n                                        const maxOptIdx = (0,_lexer_js__WEBPACK_IMPORTED_MODULE_3__.charCodeToOptimizedIndex)(maxUnOptVal);\n                                        for (let currOptIdx = minOptIdx; currOptIdx <= maxOptIdx; currOptIdx++) {\n                                            result[currOptIdx] = currOptIdx;\n                                        }\n                                    }\n                                }\n                            }\n                        });\n                        break;\n                    case \"Group\":\n                        firstCharOptimizedIndices(atom.value, result, ignoreCase);\n                        break;\n                    /* istanbul ignore next */\n                    default:\n                        throw Error(\"Non Exhaustive Match\");\n                }\n                // reached a mandatory production, no more **start** codes can be found on this alternative\n                const isOptionalQuantifier = atom.quantifier !== undefined && atom.quantifier.atLeast === 0;\n                if (\n                // A group may be optional due to empty contents /(?:)/\n                // or if everything inside it is optional /((a)?)/\n                (atom.type === \"Group\" && isWholeOptional(atom) === false) ||\n                    // If this term is not a group it may only be optional if it has an optional quantifier\n                    (atom.type !== \"Group\" && isOptionalQuantifier === false)) {\n                    break;\n                }\n            }\n            break;\n        /* istanbul ignore next */\n        default:\n            throw Error(\"non exhaustive match!\");\n    }\n    // console.log(Object.keys(result).length)\n    return (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(result);\n}\nfunction addOptimizedIdxToResult(code, result, ignoreCase) {\n    const optimizedCharIdx = (0,_lexer_js__WEBPACK_IMPORTED_MODULE_3__.charCodeToOptimizedIndex)(code);\n    result[optimizedCharIdx] = optimizedCharIdx;\n    if (ignoreCase === true) {\n        handleIgnoreCase(code, result);\n    }\n}\nfunction handleIgnoreCase(code, result) {\n    const char = String.fromCharCode(code);\n    const upperChar = char.toUpperCase();\n    /* istanbul ignore else */\n    if (upperChar !== char) {\n        const optimizedCharIdx = (0,_lexer_js__WEBPACK_IMPORTED_MODULE_3__.charCodeToOptimizedIndex)(upperChar.charCodeAt(0));\n        result[optimizedCharIdx] = optimizedCharIdx;\n    }\n    else {\n        const lowerChar = char.toLowerCase();\n        if (lowerChar !== char) {\n            const optimizedCharIdx = (0,_lexer_js__WEBPACK_IMPORTED_MODULE_3__.charCodeToOptimizedIndex)(lowerChar.charCodeAt(0));\n            result[optimizedCharIdx] = optimizedCharIdx;\n        }\n    }\n}\nfunction findCode(setNode, targetCharCodes) {\n    return (0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(setNode.value, (codeOrRange) => {\n        if (typeof codeOrRange === \"number\") {\n            return (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(targetCharCodes, codeOrRange);\n        }\n        else {\n            // range\n            const range = codeOrRange;\n            return ((0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(targetCharCodes, (targetCode) => range.from <= targetCode && targetCode <= range.to) !== undefined);\n        }\n    });\n}\nfunction isWholeOptional(ast) {\n    const quantifier = ast.quantifier;\n    if (quantifier && quantifier.atLeast === 0) {\n        return true;\n    }\n    if (!ast.value) {\n        return false;\n    }\n    return (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(ast.value)\n        ? (0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(ast.value, isWholeOptional)\n        : isWholeOptional(ast.value);\n}\nclass CharCodeFinder extends _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__.BaseRegExpVisitor {\n    constructor(targetCharCodes) {\n        super();\n        this.targetCharCodes = targetCharCodes;\n        this.found = false;\n    }\n    visitChildren(node) {\n        // No need to keep looking...\n        if (this.found === true) {\n            return;\n        }\n        // switch lookaheads as they do not actually consume any characters thus\n        // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n        switch (node.type) {\n            case \"Lookahead\":\n                this.visitLookahead(node);\n                return;\n            case \"NegativeLookahead\":\n                this.visitNegativeLookahead(node);\n                return;\n        }\n        super.visitChildren(node);\n    }\n    visitCharacter(node) {\n        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(this.targetCharCodes, node.value)) {\n            this.found = true;\n        }\n    }\n    visitSet(node) {\n        if (node.complement) {\n            if (findCode(node, this.targetCharCodes) === undefined) {\n                this.found = true;\n            }\n        }\n        else {\n            if (findCode(node, this.targetCharCodes) !== undefined) {\n                this.found = true;\n            }\n        }\n    }\n}\nfunction canMatchCharCode(charCodes, pattern) {\n    if (pattern instanceof RegExp) {\n        const ast = (0,_reg_exp_parser_js__WEBPACK_IMPORTED_MODULE_2__.getRegExpAst)(pattern);\n        const charCodeFinder = new CharCodeFinder(charCodes);\n        charCodeFinder.visit(ast);\n        return charCodeFinder.found;\n    }\n    else {\n        return ((0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(pattern, (char) => {\n            return (0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(charCodes, char.charCodeAt(0));\n        }) !== undefined);\n    }\n}\n//# sourceMappingURL=reg_exp.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/scan/reg_exp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/scan/reg_exp_parser.js":
/*!****************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/scan/reg_exp_parser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearRegExpParserCache: () => (/* binding */ clearRegExpParserCache),\n/* harmony export */   getRegExpAst: () => (/* binding */ getRegExpAst)\n/* harmony export */ });\n/* harmony import */ var _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chevrotain/regexp-to-ast */ \"(ssr)/./node_modules/@chevrotain/regexp-to-ast/lib/src/api.js\");\n\nlet regExpAstCache = {};\nconst regExpParser = new _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__.RegExpParser();\nfunction getRegExpAst(regExp) {\n    const regExpStr = regExp.toString();\n    if (regExpAstCache.hasOwnProperty(regExpStr)) {\n        return regExpAstCache[regExpStr];\n    }\n    else {\n        const regExpAst = regExpParser.pattern(regExpStr);\n        regExpAstCache[regExpStr] = regExpAst;\n        return regExpAst;\n    }\n}\nfunction clearRegExpParserCache() {\n    regExpAstCache = {};\n}\n//# sourceMappingURL=reg_exp_parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3NjYW4vcmVnX2V4cF9wYXJzZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTBEO0FBQzFEO0FBQ0EseUJBQXlCLG1FQUFZO0FBQzlCO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2FsZXhhbmRlci5ub2JsZS9hcGV4LXRvb2xib3gvbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliL3NyYy9zY2FuL3JlZ19leHBfcGFyc2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlZ0V4cFBhcnNlciwgfSBmcm9tIFwiQGNoZXZyb3RhaW4vcmVnZXhwLXRvLWFzdFwiO1xubGV0IHJlZ0V4cEFzdENhY2hlID0ge307XG5jb25zdCByZWdFeHBQYXJzZXIgPSBuZXcgUmVnRXhwUGFyc2VyKCk7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVnRXhwQXN0KHJlZ0V4cCkge1xuICAgIGNvbnN0IHJlZ0V4cFN0ciA9IHJlZ0V4cC50b1N0cmluZygpO1xuICAgIGlmIChyZWdFeHBBc3RDYWNoZS5oYXNPd25Qcm9wZXJ0eShyZWdFeHBTdHIpKSB7XG4gICAgICAgIHJldHVybiByZWdFeHBBc3RDYWNoZVtyZWdFeHBTdHJdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgcmVnRXhwQXN0ID0gcmVnRXhwUGFyc2VyLnBhdHRlcm4ocmVnRXhwU3RyKTtcbiAgICAgICAgcmVnRXhwQXN0Q2FjaGVbcmVnRXhwU3RyXSA9IHJlZ0V4cEFzdDtcbiAgICAgICAgcmV0dXJuIHJlZ0V4cEFzdDtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gY2xlYXJSZWdFeHBQYXJzZXJDYWNoZSgpIHtcbiAgICByZWdFeHBBc3RDYWNoZSA9IHt9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVnX2V4cF9wYXJzZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/scan/reg_exp_parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/scan/tokens.js":
/*!********************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/scan/tokens.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assignCategoriesMapProp: () => (/* binding */ assignCategoriesMapProp),\n/* harmony export */   assignCategoriesTokensProp: () => (/* binding */ assignCategoriesTokensProp),\n/* harmony export */   assignTokenDefaultProps: () => (/* binding */ assignTokenDefaultProps),\n/* harmony export */   augmentTokenTypes: () => (/* binding */ augmentTokenTypes),\n/* harmony export */   expandCategories: () => (/* binding */ expandCategories),\n/* harmony export */   hasCategoriesProperty: () => (/* binding */ hasCategoriesProperty),\n/* harmony export */   hasExtendingTokensTypesMapProperty: () => (/* binding */ hasExtendingTokensTypesMapProperty),\n/* harmony export */   hasExtendingTokensTypesProperty: () => (/* binding */ hasExtendingTokensTypesProperty),\n/* harmony export */   hasShortKeyProperty: () => (/* binding */ hasShortKeyProperty),\n/* harmony export */   isTokenType: () => (/* binding */ isTokenType),\n/* harmony export */   singleAssignCategoriesToksMap: () => (/* binding */ singleAssignCategoriesToksMap),\n/* harmony export */   tokenIdxToClass: () => (/* binding */ tokenIdxToClass),\n/* harmony export */   tokenShortNameIdx: () => (/* binding */ tokenShortNameIdx),\n/* harmony export */   tokenStructuredMatcher: () => (/* binding */ tokenStructuredMatcher),\n/* harmony export */   tokenStructuredMatcherNoCategories: () => (/* binding */ tokenStructuredMatcherNoCategories)\n/* harmony export */ });\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/clone.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/compact.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/flatten.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/map.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/difference.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isArray.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/includes.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n\nfunction tokenStructuredMatcher(tokInstance, tokConstructor) {\n    const instanceType = tokInstance.tokenTypeIdx;\n    if (instanceType === tokConstructor.tokenTypeIdx) {\n        return true;\n    }\n    else {\n        return (tokConstructor.isParent === true &&\n            tokConstructor.categoryMatchesMap[instanceType] === true);\n    }\n}\n// Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\nfunction tokenStructuredMatcherNoCategories(token, tokType) {\n    return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\nlet tokenShortNameIdx = 1;\nconst tokenIdxToClass = {};\nfunction augmentTokenTypes(tokenTypes) {\n    // collect the parent Token Types as well.\n    const tokenTypesAndParents = expandCategories(tokenTypes);\n    // add required tokenType and categoryMatches properties\n    assignTokenDefaultProps(tokenTypesAndParents);\n    // fill up the categoryMatches\n    assignCategoriesMapProp(tokenTypesAndParents);\n    assignCategoriesTokensProp(tokenTypesAndParents);\n    (0,lodash_es__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(tokenTypesAndParents, (tokType) => {\n        tokType.isParent = tokType.categoryMatches.length > 0;\n    });\n}\nfunction expandCategories(tokenTypes) {\n    let result = (0,lodash_es__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(tokenTypes);\n    let categories = tokenTypes;\n    let searching = true;\n    while (searching) {\n        categories = (0,lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])((0,lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])((0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(categories, (currTokType) => currTokType.CATEGORIES)));\n        const newCategories = (0,lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(categories, result);\n        result = result.concat(newCategories);\n        if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(newCategories)) {\n            searching = false;\n        }\n        else {\n            categories = newCategories;\n        }\n    }\n    return result;\n}\nfunction assignTokenDefaultProps(tokenTypes) {\n    (0,lodash_es__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(tokenTypes, (currTokType) => {\n        if (!hasShortKeyProperty(currTokType)) {\n            tokenIdxToClass[tokenShortNameIdx] = currTokType;\n            currTokType.tokenTypeIdx = tokenShortNameIdx++;\n        }\n        // CATEGORIES? : TokenType | TokenType[]\n        if (hasCategoriesProperty(currTokType) &&\n            !(0,lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(currTokType.CATEGORIES)\n        // &&\n        // !isUndefined(currTokType.CATEGORIES.PATTERN)\n        ) {\n            currTokType.CATEGORIES = [currTokType.CATEGORIES];\n        }\n        if (!hasCategoriesProperty(currTokType)) {\n            currTokType.CATEGORIES = [];\n        }\n        if (!hasExtendingTokensTypesProperty(currTokType)) {\n            currTokType.categoryMatches = [];\n        }\n        if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n            currTokType.categoryMatchesMap = {};\n        }\n    });\n}\nfunction assignCategoriesTokensProp(tokenTypes) {\n    (0,lodash_es__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(tokenTypes, (currTokType) => {\n        // avoid duplications\n        currTokType.categoryMatches = [];\n        (0,lodash_es__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(currTokType.categoryMatchesMap, (val, key) => {\n            currTokType.categoryMatches.push(tokenIdxToClass[key].tokenTypeIdx);\n        });\n    });\n}\nfunction assignCategoriesMapProp(tokenTypes) {\n    (0,lodash_es__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(tokenTypes, (currTokType) => {\n        singleAssignCategoriesToksMap([], currTokType);\n    });\n}\nfunction singleAssignCategoriesToksMap(path, nextNode) {\n    (0,lodash_es__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(path, (pathNode) => {\n        nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true;\n    });\n    (0,lodash_es__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(nextNode.CATEGORIES, (nextCategory) => {\n        const newPath = path.concat(nextNode);\n        // avoids infinite loops due to cyclic categories.\n        if (!(0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(newPath, nextCategory)) {\n            singleAssignCategoriesToksMap(newPath, nextCategory);\n        }\n    });\n}\nfunction hasShortKeyProperty(tokType) {\n    return (0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(tokType, \"tokenTypeIdx\");\n}\nfunction hasCategoriesProperty(tokType) {\n    return (0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(tokType, \"CATEGORIES\");\n}\nfunction hasExtendingTokensTypesProperty(tokType) {\n    return (0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(tokType, \"categoryMatches\");\n}\nfunction hasExtendingTokensTypesMapProperty(tokType) {\n    return (0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(tokType, \"categoryMatchesMap\");\n}\nfunction isTokenType(tokType) {\n    return (0,lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(tokType, \"tokenTypeIdx\");\n}\n//# sourceMappingURL=tokens.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3NjYW4vdG9rZW5zLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBZ0g7QUFDekc7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDQTtBQUNBO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHFEQUFPO0FBQ1g7QUFDQSxLQUFLO0FBQ0w7QUFDTztBQUNQLGlCQUFpQixxREFBSztBQUN0QjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIscURBQU8sQ0FBQyxxREFBTyxDQUFDLHFEQUFHO0FBQ3hDLDhCQUE4QixxREFBVTtBQUN4QztBQUNBLFlBQVkscURBQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsSUFBSSxxREFBTztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEscURBQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNPO0FBQ1AsSUFBSSxxREFBTztBQUNYO0FBQ0E7QUFDQSxRQUFRLHFEQUFPO0FBQ2Y7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUCxJQUFJLHFEQUFPO0FBQ1g7QUFDQSxLQUFLO0FBQ0w7QUFDTztBQUNQLElBQUkscURBQU87QUFDWDtBQUNBLEtBQUs7QUFDTCxJQUFJLHFEQUFPO0FBQ1g7QUFDQTtBQUNBLGFBQWEscURBQVE7QUFDckI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNPO0FBQ1AsV0FBVyxxREFBRztBQUNkO0FBQ087QUFDUCxXQUFXLHFEQUFHO0FBQ2Q7QUFDTztBQUNQLFdBQVcscURBQUc7QUFDZDtBQUNPO0FBQ1AsV0FBVyxxREFBRztBQUNkO0FBQ087QUFDUCxXQUFXLHFEQUFHO0FBQ2Q7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2FsZXhhbmRlci5ub2JsZS9hcGV4LXRvb2xib3gvbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliL3NyYy9zY2FuL3Rva2Vucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjbG9uZSwgY29tcGFjdCwgZGlmZmVyZW5jZSwgZmxhdHRlbiwgZm9yRWFjaCwgaGFzLCBpbmNsdWRlcywgaXNBcnJheSwgaXNFbXB0eSwgbWFwLCB9IGZyb20gXCJsb2Rhc2gtZXNcIjtcbmV4cG9ydCBmdW5jdGlvbiB0b2tlblN0cnVjdHVyZWRNYXRjaGVyKHRva0luc3RhbmNlLCB0b2tDb25zdHJ1Y3Rvcikge1xuICAgIGNvbnN0IGluc3RhbmNlVHlwZSA9IHRva0luc3RhbmNlLnRva2VuVHlwZUlkeDtcbiAgICBpZiAoaW5zdGFuY2VUeXBlID09PSB0b2tDb25zdHJ1Y3Rvci50b2tlblR5cGVJZHgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gKHRva0NvbnN0cnVjdG9yLmlzUGFyZW50ID09PSB0cnVlICYmXG4gICAgICAgICAgICB0b2tDb25zdHJ1Y3Rvci5jYXRlZ29yeU1hdGNoZXNNYXBbaW5zdGFuY2VUeXBlXSA9PT0gdHJ1ZSk7XG4gICAgfVxufVxuLy8gT3B0aW1pemVkIHRva2VuTWF0Y2hlciBpbiBjYXNlIG91ciBncmFtbWFyIGRvZXMgbm90IHVzZSB0b2tlbiBjYXRlZ29yaWVzXG4vLyBCZWluZyBzbyB0aW55IGl0IGlzIG11Y2ggbW9yZSBsaWtlbHkgdG8gYmUgaW4tbGluZWQgYW5kIHRoaXMgYXZvaWQgdGhlIGZ1bmN0aW9uIGNhbGwgb3ZlcmhlYWRcbmV4cG9ydCBmdW5jdGlvbiB0b2tlblN0cnVjdHVyZWRNYXRjaGVyTm9DYXRlZ29yaWVzKHRva2VuLCB0b2tUeXBlKSB7XG4gICAgcmV0dXJuIHRva2VuLnRva2VuVHlwZUlkeCA9PT0gdG9rVHlwZS50b2tlblR5cGVJZHg7XG59XG5leHBvcnQgbGV0IHRva2VuU2hvcnROYW1lSWR4ID0gMTtcbmV4cG9ydCBjb25zdCB0b2tlbklkeFRvQ2xhc3MgPSB7fTtcbmV4cG9ydCBmdW5jdGlvbiBhdWdtZW50VG9rZW5UeXBlcyh0b2tlblR5cGVzKSB7XG4gICAgLy8gY29sbGVjdCB0aGUgcGFyZW50IFRva2VuIFR5cGVzIGFzIHdlbGwuXG4gICAgY29uc3QgdG9rZW5UeXBlc0FuZFBhcmVudHMgPSBleHBhbmRDYXRlZ29yaWVzKHRva2VuVHlwZXMpO1xuICAgIC8vIGFkZCByZXF1aXJlZCB0b2tlblR5cGUgYW5kIGNhdGVnb3J5TWF0Y2hlcyBwcm9wZXJ0aWVzXG4gICAgYXNzaWduVG9rZW5EZWZhdWx0UHJvcHModG9rZW5UeXBlc0FuZFBhcmVudHMpO1xuICAgIC8vIGZpbGwgdXAgdGhlIGNhdGVnb3J5TWF0Y2hlc1xuICAgIGFzc2lnbkNhdGVnb3JpZXNNYXBQcm9wKHRva2VuVHlwZXNBbmRQYXJlbnRzKTtcbiAgICBhc3NpZ25DYXRlZ29yaWVzVG9rZW5zUHJvcCh0b2tlblR5cGVzQW5kUGFyZW50cyk7XG4gICAgZm9yRWFjaCh0b2tlblR5cGVzQW5kUGFyZW50cywgKHRva1R5cGUpID0+IHtcbiAgICAgICAgdG9rVHlwZS5pc1BhcmVudCA9IHRva1R5cGUuY2F0ZWdvcnlNYXRjaGVzLmxlbmd0aCA+IDA7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZXhwYW5kQ2F0ZWdvcmllcyh0b2tlblR5cGVzKSB7XG4gICAgbGV0IHJlc3VsdCA9IGNsb25lKHRva2VuVHlwZXMpO1xuICAgIGxldCBjYXRlZ29yaWVzID0gdG9rZW5UeXBlcztcbiAgICBsZXQgc2VhcmNoaW5nID0gdHJ1ZTtcbiAgICB3aGlsZSAoc2VhcmNoaW5nKSB7XG4gICAgICAgIGNhdGVnb3JpZXMgPSBjb21wYWN0KGZsYXR0ZW4obWFwKGNhdGVnb3JpZXMsIChjdXJyVG9rVHlwZSkgPT4gY3VyclRva1R5cGUuQ0FURUdPUklFUykpKTtcbiAgICAgICAgY29uc3QgbmV3Q2F0ZWdvcmllcyA9IGRpZmZlcmVuY2UoY2F0ZWdvcmllcywgcmVzdWx0KTtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdChuZXdDYXRlZ29yaWVzKTtcbiAgICAgICAgaWYgKGlzRW1wdHkobmV3Q2F0ZWdvcmllcykpIHtcbiAgICAgICAgICAgIHNlYXJjaGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2F0ZWdvcmllcyA9IG5ld0NhdGVnb3JpZXM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ25Ub2tlbkRlZmF1bHRQcm9wcyh0b2tlblR5cGVzKSB7XG4gICAgZm9yRWFjaCh0b2tlblR5cGVzLCAoY3VyclRva1R5cGUpID0+IHtcbiAgICAgICAgaWYgKCFoYXNTaG9ydEtleVByb3BlcnR5KGN1cnJUb2tUeXBlKSkge1xuICAgICAgICAgICAgdG9rZW5JZHhUb0NsYXNzW3Rva2VuU2hvcnROYW1lSWR4XSA9IGN1cnJUb2tUeXBlO1xuICAgICAgICAgICAgY3VyclRva1R5cGUudG9rZW5UeXBlSWR4ID0gdG9rZW5TaG9ydE5hbWVJZHgrKztcbiAgICAgICAgfVxuICAgICAgICAvLyBDQVRFR09SSUVTPyA6IFRva2VuVHlwZSB8IFRva2VuVHlwZVtdXG4gICAgICAgIGlmIChoYXNDYXRlZ29yaWVzUHJvcGVydHkoY3VyclRva1R5cGUpICYmXG4gICAgICAgICAgICAhaXNBcnJheShjdXJyVG9rVHlwZS5DQVRFR09SSUVTKVxuICAgICAgICAvLyAmJlxuICAgICAgICAvLyAhaXNVbmRlZmluZWQoY3VyclRva1R5cGUuQ0FURUdPUklFUy5QQVRURVJOKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGN1cnJUb2tUeXBlLkNBVEVHT1JJRVMgPSBbY3VyclRva1R5cGUuQ0FURUdPUklFU107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFoYXNDYXRlZ29yaWVzUHJvcGVydHkoY3VyclRva1R5cGUpKSB7XG4gICAgICAgICAgICBjdXJyVG9rVHlwZS5DQVRFR09SSUVTID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFoYXNFeHRlbmRpbmdUb2tlbnNUeXBlc1Byb3BlcnR5KGN1cnJUb2tUeXBlKSkge1xuICAgICAgICAgICAgY3VyclRva1R5cGUuY2F0ZWdvcnlNYXRjaGVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFoYXNFeHRlbmRpbmdUb2tlbnNUeXBlc01hcFByb3BlcnR5KGN1cnJUb2tUeXBlKSkge1xuICAgICAgICAgICAgY3VyclRva1R5cGUuY2F0ZWdvcnlNYXRjaGVzTWFwID0ge307XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ25DYXRlZ29yaWVzVG9rZW5zUHJvcCh0b2tlblR5cGVzKSB7XG4gICAgZm9yRWFjaCh0b2tlblR5cGVzLCAoY3VyclRva1R5cGUpID0+IHtcbiAgICAgICAgLy8gYXZvaWQgZHVwbGljYXRpb25zXG4gICAgICAgIGN1cnJUb2tUeXBlLmNhdGVnb3J5TWF0Y2hlcyA9IFtdO1xuICAgICAgICBmb3JFYWNoKGN1cnJUb2tUeXBlLmNhdGVnb3J5TWF0Y2hlc01hcCwgKHZhbCwga2V5KSA9PiB7XG4gICAgICAgICAgICBjdXJyVG9rVHlwZS5jYXRlZ29yeU1hdGNoZXMucHVzaCh0b2tlbklkeFRvQ2xhc3Nba2V5XS50b2tlblR5cGVJZHgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ25DYXRlZ29yaWVzTWFwUHJvcCh0b2tlblR5cGVzKSB7XG4gICAgZm9yRWFjaCh0b2tlblR5cGVzLCAoY3VyclRva1R5cGUpID0+IHtcbiAgICAgICAgc2luZ2xlQXNzaWduQ2F0ZWdvcmllc1Rva3NNYXAoW10sIGN1cnJUb2tUeXBlKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzaW5nbGVBc3NpZ25DYXRlZ29yaWVzVG9rc01hcChwYXRoLCBuZXh0Tm9kZSkge1xuICAgIGZvckVhY2gocGF0aCwgKHBhdGhOb2RlKSA9PiB7XG4gICAgICAgIG5leHROb2RlLmNhdGVnb3J5TWF0Y2hlc01hcFtwYXRoTm9kZS50b2tlblR5cGVJZHhdID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBmb3JFYWNoKG5leHROb2RlLkNBVEVHT1JJRVMsIChuZXh0Q2F0ZWdvcnkpID0+IHtcbiAgICAgICAgY29uc3QgbmV3UGF0aCA9IHBhdGguY29uY2F0KG5leHROb2RlKTtcbiAgICAgICAgLy8gYXZvaWRzIGluZmluaXRlIGxvb3BzIGR1ZSB0byBjeWNsaWMgY2F0ZWdvcmllcy5cbiAgICAgICAgaWYgKCFpbmNsdWRlcyhuZXdQYXRoLCBuZXh0Q2F0ZWdvcnkpKSB7XG4gICAgICAgICAgICBzaW5nbGVBc3NpZ25DYXRlZ29yaWVzVG9rc01hcChuZXdQYXRoLCBuZXh0Q2F0ZWdvcnkpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaGFzU2hvcnRLZXlQcm9wZXJ0eSh0b2tUeXBlKSB7XG4gICAgcmV0dXJuIGhhcyh0b2tUeXBlLCBcInRva2VuVHlwZUlkeFwiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNDYXRlZ29yaWVzUHJvcGVydHkodG9rVHlwZSkge1xuICAgIHJldHVybiBoYXModG9rVHlwZSwgXCJDQVRFR09SSUVTXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhc0V4dGVuZGluZ1Rva2Vuc1R5cGVzUHJvcGVydHkodG9rVHlwZSkge1xuICAgIHJldHVybiBoYXModG9rVHlwZSwgXCJjYXRlZ29yeU1hdGNoZXNcIik7XG59XG5leHBvcnQgZnVuY3Rpb24gaGFzRXh0ZW5kaW5nVG9rZW5zVHlwZXNNYXBQcm9wZXJ0eSh0b2tUeXBlKSB7XG4gICAgcmV0dXJuIGhhcyh0b2tUeXBlLCBcImNhdGVnb3J5TWF0Y2hlc01hcFwiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Rva2VuVHlwZSh0b2tUeXBlKSB7XG4gICAgcmV0dXJuIGhhcyh0b2tUeXBlLCBcInRva2VuVHlwZUlkeFwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRva2Vucy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/scan/tokens.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/scan/tokens_public.js":
/*!***************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/scan/tokens_public.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EOF: () => (/* binding */ EOF),\n/* harmony export */   createToken: () => (/* binding */ createToken),\n/* harmony export */   createTokenInstance: () => (/* binding */ createTokenInstance),\n/* harmony export */   hasTokenLabel: () => (/* binding */ hasTokenLabel),\n/* harmony export */   tokenLabel: () => (/* binding */ tokenLabel),\n/* harmony export */   tokenMatcher: () => (/* binding */ tokenMatcher),\n/* harmony export */   tokenName: () => (/* binding */ tokenName)\n/* harmony export */ });\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isString.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/isUndefined.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var _lexer_public_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lexer_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/lexer_public.js\");\n/* harmony import */ var _tokens_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tokens.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens.js\");\n\n\n\nfunction tokenLabel(tokType) {\n    if (hasTokenLabel(tokType)) {\n        return tokType.LABEL;\n    }\n    else {\n        return tokType.name;\n    }\n}\nfunction tokenName(tokType) {\n    return tokType.name;\n}\nfunction hasTokenLabel(obj) {\n    return (0,lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(obj.LABEL) && obj.LABEL !== \"\";\n}\nconst PARENT = \"parent\";\nconst CATEGORIES = \"categories\";\nconst LABEL = \"label\";\nconst GROUP = \"group\";\nconst PUSH_MODE = \"push_mode\";\nconst POP_MODE = \"pop_mode\";\nconst LONGER_ALT = \"longer_alt\";\nconst LINE_BREAKS = \"line_breaks\";\nconst START_CHARS_HINT = \"start_chars_hint\";\nfunction createToken(config) {\n    return createTokenInternal(config);\n}\nfunction createTokenInternal(config) {\n    const pattern = config.pattern;\n    const tokenType = {};\n    tokenType.name = config.name;\n    if (!(0,lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(pattern)) {\n        tokenType.PATTERN = pattern;\n    }\n    if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, PARENT)) {\n        throw (\"The parent property is no longer supported.\\n\" +\n            \"See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.\");\n    }\n    if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, CATEGORIES)) {\n        // casting to ANY as this will be fixed inside `augmentTokenTypes``\n        tokenType.CATEGORIES = config[CATEGORIES];\n    }\n    (0,_tokens_js__WEBPACK_IMPORTED_MODULE_1__.augmentTokenTypes)([tokenType]);\n    if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, LABEL)) {\n        tokenType.LABEL = config[LABEL];\n    }\n    if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, GROUP)) {\n        tokenType.GROUP = config[GROUP];\n    }\n    if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, POP_MODE)) {\n        tokenType.POP_MODE = config[POP_MODE];\n    }\n    if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, PUSH_MODE)) {\n        tokenType.PUSH_MODE = config[PUSH_MODE];\n    }\n    if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, LONGER_ALT)) {\n        tokenType.LONGER_ALT = config[LONGER_ALT];\n    }\n    if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, LINE_BREAKS)) {\n        tokenType.LINE_BREAKS = config[LINE_BREAKS];\n    }\n    if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, START_CHARS_HINT)) {\n        tokenType.START_CHARS_HINT = config[START_CHARS_HINT];\n    }\n    return tokenType;\n}\nconst EOF = createToken({ name: \"EOF\", pattern: _lexer_public_js__WEBPACK_IMPORTED_MODULE_0__.Lexer.NA });\n(0,_tokens_js__WEBPACK_IMPORTED_MODULE_1__.augmentTokenTypes)([EOF]);\nfunction createTokenInstance(tokType, image, startOffset, endOffset, startLine, endLine, startColumn, endColumn) {\n    return {\n        image,\n        startOffset,\n        endOffset,\n        startLine,\n        endLine,\n        startColumn,\n        endColumn,\n        tokenTypeIdx: tokType.tokenTypeIdx,\n        tokenType: tokType,\n    };\n}\nfunction tokenMatcher(token, tokType) {\n    return (0,_tokens_js__WEBPACK_IMPORTED_MODULE_1__.tokenStructuredMatcher)(token, tokType);\n}\n//# sourceMappingURL=tokens_public.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3NjYW4vdG9rZW5zX3B1YmxpYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBdUQ7QUFDYjtBQUM4QjtBQUNqRTtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUCxXQUFXLHFEQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHFEQUFXO0FBQ3BCO0FBQ0E7QUFDQSxRQUFRLHFEQUFHO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsUUFBUSxxREFBRztBQUNYO0FBQ0E7QUFDQTtBQUNBLElBQUksNkRBQWlCO0FBQ3JCLFFBQVEscURBQUc7QUFDWDtBQUNBO0FBQ0EsUUFBUSxxREFBRztBQUNYO0FBQ0E7QUFDQSxRQUFRLHFEQUFHO0FBQ1g7QUFDQTtBQUNBLFFBQVEscURBQUc7QUFDWDtBQUNBO0FBQ0EsUUFBUSxxREFBRztBQUNYO0FBQ0E7QUFDQSxRQUFRLHFEQUFHO0FBQ1g7QUFDQTtBQUNBLFFBQVEscURBQUc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNPLDBCQUEwQixzQkFBc0IsbURBQUssS0FBSztBQUNqRSw2REFBaUI7QUFDVjtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVyxrRUFBc0I7QUFDakM7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2FsZXhhbmRlci5ub2JsZS9hcGV4LXRvb2xib3gvbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliL3NyYy9zY2FuL3Rva2Vuc19wdWJsaWMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFzLCBpc1N0cmluZywgaXNVbmRlZmluZWQgfSBmcm9tIFwibG9kYXNoLWVzXCI7XG5pbXBvcnQgeyBMZXhlciB9IGZyb20gXCIuL2xleGVyX3B1YmxpYy5qc1wiO1xuaW1wb3J0IHsgYXVnbWVudFRva2VuVHlwZXMsIHRva2VuU3RydWN0dXJlZE1hdGNoZXIgfSBmcm9tIFwiLi90b2tlbnMuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiB0b2tlbkxhYmVsKHRva1R5cGUpIHtcbiAgICBpZiAoaGFzVG9rZW5MYWJlbCh0b2tUeXBlKSkge1xuICAgICAgICByZXR1cm4gdG9rVHlwZS5MQUJFTDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB0b2tUeXBlLm5hbWU7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHRva2VuTmFtZSh0b2tUeXBlKSB7XG4gICAgcmV0dXJuIHRva1R5cGUubmFtZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNUb2tlbkxhYmVsKG9iaikge1xuICAgIHJldHVybiBpc1N0cmluZyhvYmouTEFCRUwpICYmIG9iai5MQUJFTCAhPT0gXCJcIjtcbn1cbmNvbnN0IFBBUkVOVCA9IFwicGFyZW50XCI7XG5jb25zdCBDQVRFR09SSUVTID0gXCJjYXRlZ29yaWVzXCI7XG5jb25zdCBMQUJFTCA9IFwibGFiZWxcIjtcbmNvbnN0IEdST1VQID0gXCJncm91cFwiO1xuY29uc3QgUFVTSF9NT0RFID0gXCJwdXNoX21vZGVcIjtcbmNvbnN0IFBPUF9NT0RFID0gXCJwb3BfbW9kZVwiO1xuY29uc3QgTE9OR0VSX0FMVCA9IFwibG9uZ2VyX2FsdFwiO1xuY29uc3QgTElORV9CUkVBS1MgPSBcImxpbmVfYnJlYWtzXCI7XG5jb25zdCBTVEFSVF9DSEFSU19ISU5UID0gXCJzdGFydF9jaGFyc19oaW50XCI7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVG9rZW4oY29uZmlnKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVRva2VuSW50ZXJuYWwoY29uZmlnKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRva2VuSW50ZXJuYWwoY29uZmlnKSB7XG4gICAgY29uc3QgcGF0dGVybiA9IGNvbmZpZy5wYXR0ZXJuO1xuICAgIGNvbnN0IHRva2VuVHlwZSA9IHt9O1xuICAgIHRva2VuVHlwZS5uYW1lID0gY29uZmlnLm5hbWU7XG4gICAgaWYgKCFpc1VuZGVmaW5lZChwYXR0ZXJuKSkge1xuICAgICAgICB0b2tlblR5cGUuUEFUVEVSTiA9IHBhdHRlcm47XG4gICAgfVxuICAgIGlmIChoYXMoY29uZmlnLCBQQVJFTlQpKSB7XG4gICAgICAgIHRocm93IChcIlRoZSBwYXJlbnQgcHJvcGVydHkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC5cXG5cIiArXG4gICAgICAgICAgICBcIlNlZTogaHR0cHM6Ly9naXRodWIuY29tL2NoZXZyb3RhaW4vY2hldnJvdGFpbi9pc3N1ZXMvNTY0I2lzc3VlY29tbWVudC0zNDkwNjIzNDYgZm9yIGRldGFpbHMuXCIpO1xuICAgIH1cbiAgICBpZiAoaGFzKGNvbmZpZywgQ0FURUdPUklFUykpIHtcbiAgICAgICAgLy8gY2FzdGluZyB0byBBTlkgYXMgdGhpcyB3aWxsIGJlIGZpeGVkIGluc2lkZSBgYXVnbWVudFRva2VuVHlwZXNgYFxuICAgICAgICB0b2tlblR5cGUuQ0FURUdPUklFUyA9IGNvbmZpZ1tDQVRFR09SSUVTXTtcbiAgICB9XG4gICAgYXVnbWVudFRva2VuVHlwZXMoW3Rva2VuVHlwZV0pO1xuICAgIGlmIChoYXMoY29uZmlnLCBMQUJFTCkpIHtcbiAgICAgICAgdG9rZW5UeXBlLkxBQkVMID0gY29uZmlnW0xBQkVMXTtcbiAgICB9XG4gICAgaWYgKGhhcyhjb25maWcsIEdST1VQKSkge1xuICAgICAgICB0b2tlblR5cGUuR1JPVVAgPSBjb25maWdbR1JPVVBdO1xuICAgIH1cbiAgICBpZiAoaGFzKGNvbmZpZywgUE9QX01PREUpKSB7XG4gICAgICAgIHRva2VuVHlwZS5QT1BfTU9ERSA9IGNvbmZpZ1tQT1BfTU9ERV07XG4gICAgfVxuICAgIGlmIChoYXMoY29uZmlnLCBQVVNIX01PREUpKSB7XG4gICAgICAgIHRva2VuVHlwZS5QVVNIX01PREUgPSBjb25maWdbUFVTSF9NT0RFXTtcbiAgICB9XG4gICAgaWYgKGhhcyhjb25maWcsIExPTkdFUl9BTFQpKSB7XG4gICAgICAgIHRva2VuVHlwZS5MT05HRVJfQUxUID0gY29uZmlnW0xPTkdFUl9BTFRdO1xuICAgIH1cbiAgICBpZiAoaGFzKGNvbmZpZywgTElORV9CUkVBS1MpKSB7XG4gICAgICAgIHRva2VuVHlwZS5MSU5FX0JSRUFLUyA9IGNvbmZpZ1tMSU5FX0JSRUFLU107XG4gICAgfVxuICAgIGlmIChoYXMoY29uZmlnLCBTVEFSVF9DSEFSU19ISU5UKSkge1xuICAgICAgICB0b2tlblR5cGUuU1RBUlRfQ0hBUlNfSElOVCA9IGNvbmZpZ1tTVEFSVF9DSEFSU19ISU5UXTtcbiAgICB9XG4gICAgcmV0dXJuIHRva2VuVHlwZTtcbn1cbmV4cG9ydCBjb25zdCBFT0YgPSBjcmVhdGVUb2tlbih7IG5hbWU6IFwiRU9GXCIsIHBhdHRlcm46IExleGVyLk5BIH0pO1xuYXVnbWVudFRva2VuVHlwZXMoW0VPRl0pO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRva2VuSW5zdGFuY2UodG9rVHlwZSwgaW1hZ2UsIHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQsIHN0YXJ0TGluZSwgZW5kTGluZSwgc3RhcnRDb2x1bW4sIGVuZENvbHVtbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGltYWdlLFxuICAgICAgICBzdGFydE9mZnNldCxcbiAgICAgICAgZW5kT2Zmc2V0LFxuICAgICAgICBzdGFydExpbmUsXG4gICAgICAgIGVuZExpbmUsXG4gICAgICAgIHN0YXJ0Q29sdW1uLFxuICAgICAgICBlbmRDb2x1bW4sXG4gICAgICAgIHRva2VuVHlwZUlkeDogdG9rVHlwZS50b2tlblR5cGVJZHgsXG4gICAgICAgIHRva2VuVHlwZTogdG9rVHlwZSxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRva2VuTWF0Y2hlcih0b2tlbiwgdG9rVHlwZSkge1xuICAgIHJldHVybiB0b2tlblN0cnVjdHVyZWRNYXRjaGVyKHRva2VuLCB0b2tUeXBlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRva2Vuc19wdWJsaWMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/scan/tokens_public.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/version.js":
/*!****************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/version.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\n// needs a separate module as this is required inside chevrotain productive code\n// and also in the entry point for webpack(api.ts).\n// A separate file avoids cyclic dependencies and webpack errors.\nconst VERSION = \"11.0.3\";\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbGV4YW5kZXIubm9ibGUvYXBleC10b29sYm94L25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYi9zcmMvdmVyc2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBuZWVkcyBhIHNlcGFyYXRlIG1vZHVsZSBhcyB0aGlzIGlzIHJlcXVpcmVkIGluc2lkZSBjaGV2cm90YWluIHByb2R1Y3RpdmUgY29kZVxuLy8gYW5kIGFsc28gaW4gdGhlIGVudHJ5IHBvaW50IGZvciB3ZWJwYWNrKGFwaS50cykuXG4vLyBBIHNlcGFyYXRlIGZpbGUgYXZvaWRzIGN5Y2xpYyBkZXBlbmRlbmNpZXMgYW5kIHdlYnBhY2sgZXJyb3JzLlxuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSBcIjExLjAuM1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/version.js\n");

/***/ })

};
;